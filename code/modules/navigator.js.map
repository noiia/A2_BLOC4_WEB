{"version":3,"sources":["<anon>"],"sourcesContent":["/**\n * @license Highcharts JS v11.4.0 (2024-03-04)\n *\n * Standalone navigator module\n *\n * (c) 2009-2024 Mateusz Bernacik\n *\n * License: www.highcharts.com/license\n */\n(function (factory) {\n    if (typeof module === 'object' && module.exports) {\n        factory['default'] = factory;\n        module.exports = factory;\n    } else if (typeof define === 'function' && define.amd) {\n        define('highcharts/modules/navigator', ['highcharts'], function (Highcharts) {\n            factory(Highcharts);\n            factory.Highcharts = Highcharts;\n            return factory;\n        });\n    } else {\n        factory(typeof Highcharts !== 'undefined' ? Highcharts : undefined);\n    }\n}(function (Highcharts) {\n    'use strict';\n    var _modules = Highcharts ? Highcharts._modules : {};\n    function _registerModule(obj, path, args, fn) {\n        if (!obj.hasOwnProperty(path)) {\n            obj[path] = fn.apply(null, args);\n\n            if (typeof CustomEvent === 'function') {\n                window.dispatchEvent(new CustomEvent(\n                    'HighchartsModuleLoaded',\n                    { detail: { path: path, module: obj[path] } }\n                ));\n            }\n        }\n    }\n    _registerModule(_modules, 'Stock/Navigator/ChartNavigatorComposition.js', [_modules['Core/Globals.js'], _modules['Core/Utilities.js']], function (H, U) {\n        /* *\n         *\n         *  (c) 2010-2024 Torstein Honsi\n         *\n         *  License: www.highcharts.com/license\n         *\n         *  !!!!!!! SOURCE GETS TRANSPILED BY TYPESCRIPT. EDIT TS FILE ONLY. !!!!!!!\n         *\n         * */\n        const { isTouchDevice } = H;\n        const { addEvent, merge, pick } = U;\n        /* *\n         *\n         *  Constants\n         *\n         * */\n        const composedMembers = [];\n        /* *\n         *\n         *  Variables\n         *\n         * */\n        let NavigatorConstructor;\n        /* *\n         *\n         *  Functions\n         *\n         * */\n        /**\n         * @private\n         */\n        function compose(ChartClass, NavigatorClass) {\n            if (U.pushUnique(composedMembers, ChartClass)) {\n                const chartProto = ChartClass.prototype;\n                NavigatorConstructor = NavigatorClass;\n                chartProto.callbacks.push(onChartCallback);\n                addEvent(ChartClass, 'afterAddSeries', onChartAfterAddSeries);\n                addEvent(ChartClass, 'afterSetChartSize', onChartAfterSetChartSize);\n                addEvent(ChartClass, 'afterUpdate', onChartAfterUpdate);\n                addEvent(ChartClass, 'beforeRender', onChartBeforeRender);\n                addEvent(ChartClass, 'beforeShowResetZoom', onChartBeforeShowResetZoom);\n                addEvent(ChartClass, 'update', onChartUpdate);\n            }\n        }\n        /**\n         * Handle adding new series.\n         * @private\n         */\n        function onChartAfterAddSeries() {\n            if (this.navigator) {\n                // Recompute which series should be shown in navigator, and add them\n                this.navigator.setBaseSeries(null, false);\n            }\n        }\n        /**\n         * For stock charts, extend the Chart.setChartSize method so that we can set the\n         * final top position of the navigator once the height of the chart, including\n         * the legend, is determined. #367. We can't use Chart.getMargins, because\n         * labels offsets are not calculated yet.\n         * @private\n         */\n        function onChartAfterSetChartSize() {\n            const legend = this.legend, navigator = this.navigator;\n            let legendOptions, xAxis, yAxis;\n            if (navigator) {\n                legendOptions = legend && legend.options;\n                xAxis = navigator.xAxis;\n                yAxis = navigator.yAxis;\n                const { scrollbarHeight, scrollButtonSize } = navigator;\n                // Compute the top position\n                if (this.inverted) {\n                    navigator.left = navigator.opposite ?\n                        this.chartWidth - scrollbarHeight -\n                            navigator.height :\n                        this.spacing[3] + scrollbarHeight;\n                    navigator.top = this.plotTop + scrollButtonSize;\n                }\n                else {\n                    navigator.left = pick(xAxis.left, this.plotLeft + scrollButtonSize);\n                    navigator.top = navigator.navigatorOptions.top ||\n                        this.chartHeight -\n                            navigator.height -\n                            scrollbarHeight -\n                            (this.scrollbar?.options.margin || 0) -\n                            this.spacing[2] -\n                            (this.rangeSelector && this.extraBottomMargin ?\n                                this.rangeSelector.getHeight() :\n                                0) -\n                            ((legendOptions &&\n                                legendOptions.verticalAlign === 'bottom' &&\n                                legendOptions.layout !== 'proximate' && // #13392\n                                legendOptions.enabled &&\n                                !legendOptions.floating) ?\n                                legend.legendHeight +\n                                    pick(legendOptions.margin, 10) :\n                                0) -\n                            (this.titleOffset ? this.titleOffset[2] : 0);\n                }\n                if (xAxis && yAxis) { // false if navigator is disabled (#904)\n                    if (this.inverted) {\n                        xAxis.options.left = yAxis.options.left = navigator.left;\n                    }\n                    else {\n                        xAxis.options.top = yAxis.options.top = navigator.top;\n                    }\n                    xAxis.setAxisSize();\n                    yAxis.setAxisSize();\n                }\n            }\n        }\n        /**\n         * Initialize navigator, if no scrolling exists yet.\n         * @private\n         */\n        function onChartAfterUpdate(event) {\n            if (!this.navigator && !this.scroller &&\n                (this.options.navigator.enabled ||\n                    this.options.scrollbar.enabled)) {\n                this.scroller = this.navigator = new NavigatorConstructor(this);\n                if (pick(event.redraw, true)) {\n                    this.redraw(event.animation); // #7067\n                }\n            }\n        }\n        /**\n         * Initialize navigator for stock charts\n         * @private\n         */\n        function onChartBeforeRender() {\n            const options = this.options;\n            if (options.navigator.enabled ||\n                options.scrollbar.enabled) {\n                this.scroller = this.navigator = new NavigatorConstructor(this);\n            }\n        }\n        /**\n         * For Stock charts. For x only zooming, do not to create the zoom button\n         * because X axis zooming is already allowed by the Navigator and Range\n         * selector. (#9285)\n         * @private\n         */\n        function onChartBeforeShowResetZoom() {\n            const chartOptions = this.options, navigator = chartOptions.navigator, rangeSelector = chartOptions.rangeSelector;\n            if (((navigator && navigator.enabled) ||\n                (rangeSelector && rangeSelector.enabled)) &&\n                ((!isTouchDevice &&\n                    this.zooming.type === 'x') ||\n                    (isTouchDevice && this.zooming.pinchType === 'x'))) {\n                return false;\n            }\n        }\n        /**\n         * @private\n         */\n        function onChartCallback(chart) {\n            const navigator = chart.navigator;\n            // Initialize the navigator\n            if (navigator && chart.xAxis[0]) {\n                const extremes = chart.xAxis[0].getExtremes();\n                navigator.render(extremes.min, extremes.max);\n            }\n        }\n        /**\n         * Merge options, if no scrolling exists yet\n         * @private\n         */\n        function onChartUpdate(e) {\n            const navigatorOptions = (e.options.navigator || {}), scrollbarOptions = (e.options.scrollbar || {});\n            if (!this.navigator && !this.scroller &&\n                (navigatorOptions.enabled || scrollbarOptions.enabled)) {\n                merge(true, this.options.navigator, navigatorOptions);\n                merge(true, this.options.scrollbar, scrollbarOptions);\n                delete e.options.navigator;\n                delete e.options.scrollbar;\n            }\n        }\n        /* *\n         *\n         *  Default Export\n         *\n         * */\n        const ChartNavigatorComposition = {\n            compose\n        };\n\n        return ChartNavigatorComposition;\n    });\n    _registerModule(_modules, 'Core/Axis/NavigatorAxisComposition.js', [_modules['Core/Globals.js'], _modules['Core/Utilities.js']], function (H, U) {\n        /* *\n         *\n         *  (c) 2010-2024 Torstein Honsi\n         *\n         *  License: www.highcharts.com/license\n         *\n         *  !!!!!!! SOURCE GETS TRANSPILED BY TYPESCRIPT. EDIT TS FILE ONLY. !!!!!!!\n         *\n         * */\n        const { isTouchDevice } = H;\n        const { addEvent, correctFloat, defined, isNumber, pick } = U;\n        /* *\n         *\n         *  Functions\n         *\n         * */\n        /**\n         * @private\n         */\n        function onAxisInit() {\n            const axis = this;\n            if (!axis.navigatorAxis) {\n                axis.navigatorAxis = new NavigatorAxisAdditions(axis);\n            }\n        }\n        /**\n         * For Stock charts, override selection zooming with some special features\n         * because X axis zooming is already allowed by the Navigator and Range\n         * selector.\n         * @private\n         */\n        function onAxisSetExtremes(e) {\n            const axis = this, chart = axis.chart, chartOptions = chart.options, navigator = chartOptions.navigator, navigatorAxis = axis.navigatorAxis, pinchType = chart.zooming.pinchType, rangeSelector = chartOptions.rangeSelector, zoomType = chart.zooming.type;\n            let zoomed;\n            if (axis.isXAxis &&\n                (navigator?.enabled || rangeSelector?.enabled)) {\n                // For y only zooming, ignore the X axis completely\n                if (zoomType === 'y' && e.trigger === 'zoom') {\n                    zoomed = false;\n                    // For xy zooming, record the state of the zoom before zoom selection,\n                    // then when the reset button is pressed, revert to this state. This\n                    // should apply only if the chart is initialized with a range (#6612),\n                    // otherwise zoom all the way out.\n                }\n                else if (((e.trigger === 'zoom' && zoomType === 'xy') ||\n                    (isTouchDevice && pinchType === 'xy')) &&\n                    axis.options.range) {\n                    const previousZoom = navigatorAxis.previousZoom;\n                    // Minimum defined, zooming in\n                    if (defined(e.min)) {\n                        navigatorAxis.previousZoom = [axis.min, axis.max];\n                        // Minimum undefined, resetting zoom\n                    }\n                    else if (previousZoom) {\n                        e.min = previousZoom[0];\n                        e.max = previousZoom[1];\n                        navigatorAxis.previousZoom = void 0;\n                    }\n                }\n            }\n            if (typeof zoomed !== 'undefined') {\n                e.preventDefault();\n            }\n        }\n        /* *\n         *\n         *  Class\n         *\n         * */\n        /**\n         * @private\n         * @class\n         */\n        class NavigatorAxisAdditions {\n            /* *\n             *\n             *  Static Functions\n             *\n             * */\n            /**\n             * @private\n             */\n            static compose(AxisClass) {\n                if (!AxisClass.keepProps.includes('navigatorAxis')) {\n                    AxisClass.keepProps.push('navigatorAxis');\n                    addEvent(AxisClass, 'init', onAxisInit);\n                    addEvent(AxisClass, 'setExtremes', onAxisSetExtremes);\n                }\n            }\n            /* *\n             *\n             *  Constructors\n             *\n             * */\n            constructor(axis) {\n                this.axis = axis;\n            }\n            /* *\n             *\n             *  Functions\n             *\n             * */\n            /**\n             * @private\n             */\n            destroy() {\n                this.axis = void 0;\n            }\n            /**\n             * Add logic to normalize the zoomed range in order to preserve the pressed\n             * state of range selector buttons\n             *\n             * @private\n             * @function Highcharts.Axis#toFixedRange\n             */\n            toFixedRange(pxMin, pxMax, fixedMin, fixedMax) {\n                const axis = this.axis, chart = axis.chart, overscroll = pick(axis.ordinal?.convertOverscroll(axis.options.overscroll), 0);\n                let newMin = pick(fixedMin, axis.translate(pxMin, true, !axis.horiz)), newMax = pick(fixedMax, axis.translate(pxMax, true, !axis.horiz));\n                const fixedRange = chart && chart.fixedRange, halfPointRange = (axis.pointRange || 0) / 2;\n                // Add/remove half point range to/from the extremes (#1172)\n                if (!defined(fixedMin)) {\n                    newMin = correctFloat(newMin + halfPointRange);\n                }\n                if (!defined(fixedMax)) {\n                    newMax = correctFloat(newMax - halfPointRange);\n                }\n                // Make sure panning to the edges does not decrease the zoomed range\n                if (fixedRange && axis.dataMin && axis.dataMax) {\n                    const maxWithOverscroll = axis.dataMax + overscroll;\n                    if (newMax >= maxWithOverscroll) {\n                        newMin = correctFloat(maxWithOverscroll - fixedRange);\n                        newMax = correctFloat(maxWithOverscroll);\n                    }\n                    if (newMin <= axis.dataMin) {\n                        newMax = correctFloat(axis.dataMin + fixedRange);\n                    }\n                }\n                if (!isNumber(newMin) || !isNumber(newMax)) { // #1195, #7411\n                    newMin = newMax = void 0;\n                }\n                return {\n                    min: newMin,\n                    max: newMax\n                };\n            }\n        }\n        /* *\n         *\n         *  Default Export\n         *\n         * */\n\n        return NavigatorAxisAdditions;\n    });\n    _registerModule(_modules, 'Stock/Navigator/NavigatorDefaults.js', [_modules['Core/Color/Color.js'], _modules['Core/Series/SeriesRegistry.js']], function (Color, SeriesRegistry) {\n        /* *\n         *\n         *  (c) 2010-2024 Torstein Honsi\n         *\n         *  License: www.highcharts.com/license\n         *\n         *  !!!!!!! SOURCE GETS TRANSPILED BY TYPESCRIPT. EDIT TS FILE ONLY. !!!!!!!\n         *\n         * */\n        const { parse: color } = Color;\n        const { seriesTypes } = SeriesRegistry;\n        /* *\n         *\n         *  Constants\n         *\n         * */\n        /**\n         * The navigator is a small series below the main series, displaying\n         * a view of the entire data set. It provides tools to zoom in and\n         * out on parts of the data as well as panning across the dataset.\n         *\n         * @product      highstock gantt\n         * @optionparent navigator\n         */\n        const NavigatorDefaults = {\n            /**\n             * Whether the navigator and scrollbar should adapt to updated data\n             * in the base X axis. When loading data async, as in the demo below,\n             * this should be `false`. Otherwise new data will trigger navigator\n             * redraw, which will cause unwanted looping. In the demo below, the\n             * data in the navigator is set only once. On navigating, only the main\n             * chart content is updated.\n             *\n             * @sample {highstock} stock/demo/lazy-loading/\n             *         Set to false with async data loading\n             *\n             * @type      {boolean}\n             * @default   true\n             * @apioption navigator.adaptToUpdatedData\n             */\n            /**\n             * An integer identifying the index to use for the base series, or a\n             * string representing the id of the series.\n             *\n             * **Note**: As of Highcharts 5.0, this is now a deprecated option.\n             * Prefer [series.showInNavigator](#plotOptions.series.showInNavigator).\n             *\n             * @see [series.showInNavigator](#plotOptions.series.showInNavigator)\n             *\n             * @deprecated\n             * @type      {number|string}\n             * @default   0\n             * @apioption navigator.baseSeries\n             */\n            /**\n             * Enable or disable the navigator.\n             *\n             * @sample {highstock} stock/navigator/enabled/\n             *         Disable the navigator\n             *\n             * @type      {boolean}\n             * @default   true\n             * @apioption navigator.enabled\n             */\n            /**\n             * When the chart is inverted, whether to draw the navigator on the\n             * opposite side.\n             *\n             * @type      {boolean}\n             * @default   false\n             * @since     5.0.8\n             * @apioption navigator.opposite\n             */\n            /**\n             * The height of the navigator.\n             *\n             * @sample {highstock} stock/navigator/height/\n             *         A higher navigator\n             */\n            height: 40,\n            /**\n             * The distance from the nearest element, the X axis or X axis labels.\n             *\n             * @sample {highstock} stock/navigator/margin/\n             *         A margin of 2 draws the navigator closer to the X axis labels\n             */\n            margin: 25,\n            /**\n             * Whether the mask should be inside the range marking the zoomed\n             * range, or outside. In Highcharts Stock 1.x it was always `false`.\n             *\n             * @sample {highstock} stock/demo/maskinside-false/\n             *         False, mask outside\n             *\n             * @since   2.0\n             */\n            maskInside: true,\n            /**\n             * Options for the handles for dragging the zoomed area.\n             *\n             * @sample {highstock} stock/navigator/handles/\n             *         Colored handles\n             */\n            handles: {\n                /**\n                 * Width for handles.\n                 *\n                 * @sample {highstock} stock/navigator/styled-handles/\n                 *         Styled handles\n                 *\n                 * @since   6.0.0\n                 */\n                width: 7,\n                /**\n                 * Height for handles.\n                 *\n                 * @sample {highstock} stock/navigator/styled-handles/\n                 *         Styled handles\n                 *\n                 * @since   6.0.0\n                 */\n                height: 15,\n                /**\n                 * Array to define shapes of handles. 0-index for left, 1-index for\n                 * right.\n                 *\n                 * Additionally, the URL to a graphic can be given on this form:\n                 * `url(graphic.png)`. Note that for the image to be applied to\n                 * exported charts, its URL needs to be accessible by the export\n                 * server.\n                 *\n                 * Custom callbacks for symbol path generation can also be added to\n                 * `Highcharts.SVGRenderer.prototype.symbols`. The callback is then\n                 * used by its method name, as shown in the demo.\n                 *\n                 * @sample {highstock} stock/navigator/styled-handles/\n                 *         Styled handles\n                 *\n                 * @type    {Array<string>}\n                 * @default [\"navigator-handle\", \"navigator-handle\"]\n                 * @since   6.0.0\n                 */\n                symbols: ['navigator-handle', 'navigator-handle'],\n                /**\n                 * Allows to enable/disable handles.\n                 *\n                 * @since   6.0.0\n                 */\n                enabled: true,\n                /**\n                 * The width for the handle border and the stripes inside.\n                 *\n                 * @sample {highstock} stock/navigator/styled-handles/\n                 *         Styled handles\n                 *\n                 * @since     6.0.0\n                 * @apioption navigator.handles.lineWidth\n                 */\n                lineWidth: 1,\n                /**\n                 * The fill for the handle.\n                 *\n                 * @type    {Highcharts.ColorString|Highcharts.GradientColorObject|Highcharts.PatternObject}\n                 */\n                backgroundColor: \"#f2f2f2\" /* Palette.neutralColor5 */,\n                /**\n                 * The stroke for the handle border and the stripes inside.\n                 *\n                 * @type    {Highcharts.ColorString|Highcharts.GradientColorObject|Highcharts.PatternObject}\n                 */\n                borderColor: \"#999999\" /* Palette.neutralColor40 */\n            },\n            /**\n             * The color of the mask covering the areas of the navigator series\n             * that are currently not visible in the main series. The default\n             * color is bluish with an opacity of 0.3 to see the series below.\n             *\n             * @see In styled mode, the mask is styled with the\n             *      `.highcharts-navigator-mask` and\n             *      `.highcharts-navigator-mask-inside` classes.\n             *\n             * @sample {highstock} stock/navigator/maskfill/\n             *         Blue, semi transparent mask\n             *\n             * @type    {Highcharts.ColorString|Highcharts.GradientColorObject|Highcharts.PatternObject}\n             * @default rgba(102,133,194,0.3)\n             */\n            maskFill: color(\"#667aff\" /* Palette.highlightColor60 */).setOpacity(0.3).get(),\n            /**\n             * The color of the line marking the currently zoomed area in the\n             * navigator.\n             *\n             * @sample {highstock} stock/navigator/outline/\n             *         2px blue outline\n             *\n             * @type    {Highcharts.ColorString|Highcharts.GradientColorObject|Highcharts.PatternObject}\n             * @default #cccccc\n             */\n            outlineColor: \"#999999\" /* Palette.neutralColor40 */,\n            /**\n             * The width of the line marking the currently zoomed area in the\n             * navigator.\n             *\n             * @see In styled mode, the outline stroke width is set with the\n             *      `.highcharts-navigator-outline` class.\n             *\n             * @sample {highstock} stock/navigator/outline/\n             *         2px blue outline\n             *\n             * @type    {number}\n             */\n            outlineWidth: 1,\n            /**\n             * Options for the navigator series. Available options are the same\n             * as any series, documented at [plotOptions](#plotOptions.series)\n             * and [series](#series).\n             *\n             * Unless data is explicitly defined on navigator.series, the data\n             * is borrowed from the first series in the chart.\n             *\n             * Default series options for the navigator series are:\n             * ```js\n             * series: {\n             *     type: 'areaspline',\n             *     fillOpacity: 0.05,\n             *     dataGrouping: {\n             *         smoothed: true\n             *     },\n             *     lineWidth: 1,\n             *     marker: {\n             *         enabled: false\n             *     }\n             * }\n             * ```\n             *\n             * @see In styled mode, the navigator series is styled with the\n             *      `.highcharts-navigator-series` class.\n             *\n             * @sample {highstock} stock/navigator/series-data/\n             *         Using a separate data set for the navigator\n             * @sample {highstock} stock/navigator/series/\n             *         A green navigator series\n             *\n             * @type {*|Array<*>|Highcharts.SeriesOptionsType|Array<Highcharts.SeriesOptionsType>}\n             */\n            series: {\n                /**\n                 * The type of the navigator series.\n                 *\n                 * Heads up:\n                 * In column-type navigator, zooming is limited to at least one\n                 * point with its `pointRange`.\n                 *\n                 * @sample {highstock} stock/navigator/column/\n                 *         Column type navigator\n                 *\n                 * @type    {string}\n                 * @default {highstock} `areaspline` if defined, otherwise `line`\n                 * @default {gantt} gantt\n                 */\n                type: (typeof seriesTypes.areaspline === 'undefined' ?\n                    'line' :\n                    'areaspline'),\n                /**\n                 * The fill opacity of the navigator series.\n                 */\n                fillOpacity: 0.05,\n                /**\n                 * The pixel line width of the navigator series.\n                 */\n                lineWidth: 1,\n                /**\n                 * @ignore-option\n                 */\n                compare: null,\n                /**\n                 * @ignore-option\n                 */\n                sonification: {\n                    enabled: false\n                },\n                /**\n                 * Unless data is explicitly defined, the data is borrowed from the\n                 * first series in the chart.\n                 *\n                 * @type      {Array<number|Array<number|string|null>|object|null>}\n                 * @product   highstock\n                 * @apioption navigator.series.data\n                 */\n                /**\n                 * Data grouping options for the navigator series.\n                 *\n                 * @extends plotOptions.series.dataGrouping\n                 */\n                dataGrouping: {\n                    approximation: 'average',\n                    enabled: true,\n                    groupPixelWidth: 2,\n                    // Replace smoothed property by anchors, #12455.\n                    firstAnchor: 'firstPoint',\n                    anchor: 'middle',\n                    lastAnchor: 'lastPoint',\n                    // Day and week differs from plotOptions.series.dataGrouping\n                    units: [\n                        ['millisecond', [1, 2, 5, 10, 20, 25, 50, 100, 200, 500]],\n                        ['second', [1, 2, 5, 10, 15, 30]],\n                        ['minute', [1, 2, 5, 10, 15, 30]],\n                        ['hour', [1, 2, 3, 4, 6, 8, 12]],\n                        ['day', [1, 2, 3, 4]],\n                        ['week', [1, 2, 3]],\n                        ['month', [1, 3, 6]],\n                        ['year', null]\n                    ]\n                },\n                /**\n                 * Data label options for the navigator series. Data labels are\n                 * disabled by default on the navigator series.\n                 *\n                 * @extends plotOptions.series.dataLabels\n                 */\n                dataLabels: {\n                    enabled: false,\n                    zIndex: 2 // #1839\n                },\n                id: 'highcharts-navigator-series',\n                className: 'highcharts-navigator-series',\n                /**\n                 * Sets the fill color of the navigator series.\n                 *\n                 * @type      {Highcharts.ColorString|Highcharts.GradientColorObject|Highcharts.PatternObject}\n                 * @apioption navigator.series.color\n                 */\n                /**\n                 * Line color for the navigator series. Allows setting the color\n                 * while disallowing the default candlestick setting.\n                 *\n                 * @type {Highcharts.ColorString|null}\n                 */\n                lineColor: null,\n                marker: {\n                    enabled: false\n                },\n                /**\n                 * Since Highcharts Stock v8, default value is the same as default\n                 * `pointRange` defined for a specific type (e.g. `null` for\n                 * column type).\n                 *\n                 * In Highcharts Stock version < 8, defaults to 0.\n                 *\n                 * @extends plotOptions.series.pointRange\n                 * @type {number|null}\n                 * @apioption navigator.series.pointRange\n                 */\n                /**\n                 * The threshold option. Setting it to 0 will make the default\n                 * navigator area series draw its area from the 0 value and up.\n                 *\n                 * @type {number|null}\n                 */\n                threshold: null\n            },\n            /**\n             * Enable or disable navigator sticking to right, while adding new\n             * points. If `undefined`, the navigator sticks to the axis maximum only\n             * if it was already at the maximum prior to adding points.\n             *\n             * @type      {boolean}\n             * @default   undefined\n             * @since 10.2.1\n             * @sample {highstock} stock/navigator/sticktomax-false/\n             * stickToMax set to false\n             * @apioption navigator.stickToMax\n             */\n            /**\n             * Options for the navigator X axis. Default series options for the\n             * navigator xAxis are:\n             * ```js\n             * xAxis: {\n             *     tickWidth: 0,\n             *     lineWidth: 0,\n             *     gridLineWidth: 1,\n             *     tickPixelInterval: 200,\n             *     labels: {\n             *            align: 'left',\n             *         style: {\n             *             color: '#888'\n             *         },\n             *         x: 3,\n             *         y: -4\n             *     }\n             * }\n             * ```\n             *\n             * @extends   xAxis\n             * @excluding linkedTo, maxZoom, minRange, opposite, range, scrollbar,\n             *            showEmpty, maxRange\n             */\n            xAxis: {\n                /**\n                 * Additional range on the right side of the xAxis. Works similar to\n                 * `xAxis.maxPadding`, but the value is set in terms of axis values,\n                 * percentage or pixels.\n                 *\n                 * If it's a number, it is interpreted as axis values, which in a\n                 * datetime axis equals milliseconds.\n                 *\n                 * If it's a percentage string, is interpreted as percentages of the\n                 * axis length. An overscroll of 50% will make a 100px axis 50px longer.\n                 *\n                 * If it's a pixel string, it is interpreted as a fixed pixel value, but\n                 * limited to 90% of the axis length.\n                 *\n                 * If it's undefined, the value is inherited from `xAxis.overscroll`.\n                 *\n                 * Can be set for both, main xAxis and navigator's xAxis.\n                 *\n                 * @type    {number | string | undefined}\n                 * @since   6.0.0\n                 * @apioption navigator.xAxis.overscroll\n                 */\n                className: 'highcharts-navigator-xaxis',\n                tickLength: 0,\n                lineWidth: 0,\n                gridLineColor: \"#e6e6e6\" /* Palette.neutralColor10 */,\n                gridLineWidth: 1,\n                tickPixelInterval: 200,\n                labels: {\n                    align: 'left',\n                    /**\n                     * @type {Highcharts.CSSObject}\n                     */\n                    style: {\n                        /** @ignore */\n                        color: \"#000000\" /* Palette.neutralColor100 */,\n                        /** @ignore */\n                        fontSize: '0.7em',\n                        /** @ignore */\n                        opacity: 0.6,\n                        /** @ignore */\n                        textOutline: '2px contrast'\n                    },\n                    x: 3,\n                    y: -4\n                },\n                crosshair: false\n            },\n            /**\n             * Options for the navigator Y axis. Default series options for the\n             * navigator yAxis are:\n             * ```js\n             * yAxis: {\n             *     gridLineWidth: 0,\n             *     startOnTick: false,\n             *     endOnTick: false,\n             *     minPadding: 0.1,\n             *     maxPadding: 0.1,\n             *     labels: {\n             *         enabled: false\n             *     },\n             *     title: {\n             *         text: null\n             *     },\n             *     tickWidth: 0\n             * }\n             * ```\n             *\n             * @extends   yAxis\n             * @excluding height, linkedTo, maxZoom, minRange, ordinal, range,\n             *            showEmpty, scrollbar, top, units, maxRange, minLength,\n             *            maxLength, resize\n             */\n            yAxis: {\n                className: 'highcharts-navigator-yaxis',\n                gridLineWidth: 0,\n                startOnTick: false,\n                endOnTick: false,\n                minPadding: 0.1,\n                maxPadding: 0.1,\n                labels: {\n                    enabled: false\n                },\n                crosshair: false,\n                title: {\n                    text: null\n                },\n                tickLength: 0,\n                tickWidth: 0\n            }\n        };\n        /* *\n         *\n         *  Default Export\n         *\n         * */\n        /* *\n         *\n         *  API Options\n         *\n         * */\n        /**\n         * Maximum range which can be set using the navigator's handles.\n         * Opposite of [xAxis.minRange](#xAxis.minRange).\n         *\n         * @sample {highstock} stock/navigator/maxrange/\n         *         Defined max and min range\n         *\n         * @type      {number}\n         * @since     6.0.0\n         * @product   highstock gantt\n         * @apioption xAxis.maxRange\n         */\n        (''); // keeps doclets above in JS file\n\n        return NavigatorDefaults;\n    });\n    _registerModule(_modules, 'Stock/Navigator/NavigatorSymbols.js', [], function () {\n        /* *\n         *\n         *  (c) 2010-2024 Torstein Honsi\n         *\n         *  License: www.highcharts.com/license\n         *\n         *  !!!!!!! SOURCE GETS TRANSPILED BY TYPESCRIPT. EDIT TS FILE ONLY. !!!!!!!\n         *\n         * */\n        /* *\n         *\n         *  Constants\n         *\n         * */\n        /**\n         * Draw one of the handles on the side of the zoomed range in the navigator.\n         * @private\n         */\n        function navigatorHandle(_x, _y, width, height, options = {}) {\n            const halfWidth = options.width ? options.width / 2 : width, markerPosition = Math.round(halfWidth / 3) + 0.5;\n            height = options.height || height;\n            return [\n                ['M', -halfWidth - 1, 0.5],\n                ['L', halfWidth, 0.5],\n                ['L', halfWidth, height + 0.5],\n                ['L', -halfWidth - 1, height + 0.5],\n                ['L', -halfWidth - 1, 0.5],\n                ['M', -markerPosition, 4],\n                ['L', -markerPosition, height - 3],\n                ['M', markerPosition - 1, 4],\n                ['L', markerPosition - 1, height - 3]\n            ];\n        }\n        /* *\n         *\n         *  Default Export\n         *\n         * */\n        const NavigatorSymbols = {\n            'navigator-handle': navigatorHandle\n        };\n\n        return NavigatorSymbols;\n    });\n    _registerModule(_modules, 'Stock/Utilities/StockUtilities.js', [_modules['Core/Utilities.js']], function (U) {\n        /* *\n         *\n         *  (c) 2010-2024 Torstein Honsi\n         *\n         *  License: www.highcharts.com/license\n         *\n         *  !!!!!!! SOURCE GETS TRANSPILED BY TYPESCRIPT. EDIT TS FILE ONLY. !!!!!!!\n         *\n         * */\n        const { defined } = U;\n        /* *\n         *\n         *  Functions\n         *\n         * */\n        /**\n         * Sets the chart.fixedRange to the specified value. If the value is larger\n         * than actual range, sets it to the maximum possible range. (#20327)\n         *\n         * @private\n         * @function Highcharts.StockChart#setFixedRange\n         * @param {number|undefined} range\n         *        Range to set in axis units.\n         */\n        function setFixedRange(range) {\n            const xAxis = this.xAxis[0];\n            if (defined(xAxis.dataMax) &&\n                defined(xAxis.dataMin) &&\n                range) {\n                this.fixedRange = Math.min(range, xAxis.dataMax - xAxis.dataMin);\n            }\n            else {\n                this.fixedRange = range;\n            }\n        }\n        const StockUtilities = {\n            setFixedRange\n        };\n\n        return StockUtilities;\n    });\n    _registerModule(_modules, 'Stock/Navigator/NavigatorComposition.js', [_modules['Core/Defaults.js'], _modules['Core/Globals.js'], _modules['Core/Axis/NavigatorAxisComposition.js'], _modules['Stock/Navigator/NavigatorDefaults.js'], _modules['Stock/Navigator/NavigatorSymbols.js'], _modules['Core/Renderer/RendererRegistry.js'], _modules['Stock/Utilities/StockUtilities.js'], _modules['Core/Utilities.js']], function (D, H, NavigatorAxisAdditions, NavigatorDefaults, NavigatorSymbols, RendererRegistry, StockUtilities, U) {\n        /* *\n         *\n         *  (c) 2010-2024 Torstein Honsi\n         *\n         *  License: www.highcharts.com/license\n         *\n         *  !!!!!!! SOURCE GETS TRANSPILED BY TYPESCRIPT. EDIT TS FILE ONLY. !!!!!!!\n         *\n         * */\n        const { setOptions } = D;\n        const { composed } = H;\n        const { getRendererType } = RendererRegistry;\n        const { setFixedRange } = StockUtilities;\n        const { addEvent, extend, pushUnique } = U;\n        /* *\n         *\n         *  Variables\n         *\n         * */\n        /* *\n         *\n         *  Functions\n         *\n         * */\n        /**\n         * @private\n         */\n        function compose(ChartClass, AxisClass, SeriesClass) {\n            NavigatorAxisAdditions.compose(AxisClass);\n            if (pushUnique(composed, 'Navigator')) {\n                ChartClass.prototype.setFixedRange = setFixedRange;\n                extend(getRendererType().prototype.symbols, NavigatorSymbols);\n                addEvent(SeriesClass, 'afterUpdate', onSeriesAfterUpdate);\n                setOptions({ navigator: NavigatorDefaults });\n            }\n        }\n        /**\n         * Handle updating series\n         * @private\n         */\n        function onSeriesAfterUpdate() {\n            if (this.chart.navigator && !this.options.isInternal) {\n                this.chart.navigator.setBaseSeries(null, false);\n            }\n        }\n        /* *\n         *\n         *  Default Export\n         *\n         * */\n        const NavigatorComposition = {\n            compose\n        };\n\n        return NavigatorComposition;\n    });\n    _registerModule(_modules, 'Core/Axis/ScrollbarAxis.js', [_modules['Core/Globals.js'], _modules['Core/Utilities.js']], function (H, U) {\n        /* *\n         *\n         *  (c) 2010-2024 Torstein Honsi\n         *\n         *  License: www.highcharts.com/license\n         *\n         *  !!!!!!! SOURCE GETS TRANSPILED BY TYPESCRIPT. EDIT TS FILE ONLY. !!!!!!!\n         *\n         * */\n        const { composed } = H;\n        const { addEvent, defined, pick, pushUnique } = U;\n        /* *\n         *\n         *  Composition\n         *\n         * */\n        var ScrollbarAxis;\n        (function (ScrollbarAxis) {\n            /* *\n             *\n             *  Variables\n             *\n             * */\n            let Scrollbar;\n            /* *\n             *\n             *  Functions\n             *\n             * */\n            /**\n             * Attaches to axis events to create scrollbars if enabled.\n             *\n             * @private\n             *\n             * @param {Highcharts.Axis} AxisClass\n             * Axis class to extend.\n             *\n             * @param {Highcharts.Scrollbar} ScrollbarClass\n             * Scrollbar class to use.\n             */\n            function compose(AxisClass, ScrollbarClass) {\n                if (pushUnique(composed, 'Axis.Scrollbar')) {\n                    Scrollbar = ScrollbarClass;\n                    addEvent(AxisClass, 'afterGetOffset', onAxisAfterGetOffset);\n                    addEvent(AxisClass, 'afterInit', onAxisAfterInit);\n                    addEvent(AxisClass, 'afterRender', onAxisAfterRender);\n                }\n            }\n            ScrollbarAxis.compose = compose;\n            /** @private */\n            function getExtremes(axis) {\n                const axisMin = pick(axis.options && axis.options.min, axis.min);\n                const axisMax = pick(axis.options && axis.options.max, axis.max);\n                return {\n                    axisMin,\n                    axisMax,\n                    scrollMin: defined(axis.dataMin) ?\n                        Math.min(axisMin, axis.min, axis.dataMin, pick(axis.threshold, Infinity)) : axisMin,\n                    scrollMax: defined(axis.dataMax) ?\n                        Math.max(axisMax, axis.max, axis.dataMax, pick(axis.threshold, -Infinity)) : axisMax\n                };\n            }\n            /**\n             * Make space for a scrollbar.\n             * @private\n             */\n            function onAxisAfterGetOffset() {\n                const axis = this, scrollbar = axis.scrollbar, opposite = scrollbar && !scrollbar.options.opposite, index = axis.horiz ? 2 : opposite ? 3 : 1;\n                if (scrollbar) {\n                    // Reset scrollbars offsets\n                    axis.chart.scrollbarsOffsets = [0, 0];\n                    axis.chart.axisOffset[index] +=\n                        scrollbar.size + (scrollbar.options.margin || 0);\n                }\n            }\n            /**\n             * Wrap axis initialization and create scrollbar if enabled.\n             * @private\n             */\n            function onAxisAfterInit() {\n                const axis = this;\n                if (axis.options &&\n                    axis.options.scrollbar &&\n                    axis.options.scrollbar.enabled) {\n                    // Predefined options:\n                    axis.options.scrollbar.vertical = !axis.horiz;\n                    axis.options.startOnTick = axis.options.endOnTick = false;\n                    axis.scrollbar = new Scrollbar(axis.chart.renderer, axis.options.scrollbar, axis.chart);\n                    addEvent(axis.scrollbar, 'changed', function (e) {\n                        const { axisMin, axisMax, scrollMin: unitedMin, scrollMax: unitedMax } = getExtremes(axis), range = unitedMax - unitedMin;\n                        let to, from;\n                        // #12834, scroll when show/hide series, wrong extremes\n                        if (!defined(axisMin) || !defined(axisMax)) {\n                            return;\n                        }\n                        if ((axis.horiz && !axis.reversed) ||\n                            (!axis.horiz && axis.reversed)) {\n                            to = unitedMin + range * this.to;\n                            from = unitedMin + range * this.from;\n                        }\n                        else {\n                            // Y-values in browser are reversed, but this also\n                            // applies for reversed horizontal axis:\n                            to = unitedMin + range * (1 - this.from);\n                            from = unitedMin + range * (1 - this.to);\n                        }\n                        if (this.shouldUpdateExtremes(e.DOMType)) {\n                            // #17977, set animation to undefined instead of true\n                            const animate = e.DOMType === 'mousemove' ||\n                                e.DOMType === 'touchmove' ? false : void 0;\n                            axis.setExtremes(from, to, true, animate, e);\n                        }\n                        else {\n                            // When live redraw is disabled, don't change extremes\n                            // Only change the position of the scrollbar thumb\n                            this.setRange(this.from, this.to);\n                        }\n                    });\n                }\n            }\n            /**\n             * Wrap rendering axis, and update scrollbar if one is created.\n             * @private\n             */\n            function onAxisAfterRender() {\n                const axis = this, { scrollMin, scrollMax } = getExtremes(axis), scrollbar = axis.scrollbar, offset = (axis.axisTitleMargin + (axis.titleOffset || 0)), scrollbarsOffsets = axis.chart.scrollbarsOffsets, axisMargin = axis.options.margin || 0;\n                let offsetsIndex, from, to;\n                if (scrollbar && scrollbarsOffsets) {\n                    if (axis.horiz) {\n                        // Reserve space for labels/title\n                        if (!axis.opposite) {\n                            scrollbarsOffsets[1] += offset;\n                        }\n                        scrollbar.position(axis.left, (axis.top +\n                            axis.height +\n                            2 +\n                            scrollbarsOffsets[1] -\n                            (axis.opposite ? axisMargin : 0)), axis.width, axis.height);\n                        // Next scrollbar should reserve space for margin (if set)\n                        if (!axis.opposite) {\n                            scrollbarsOffsets[1] += axisMargin;\n                        }\n                        offsetsIndex = 1;\n                    }\n                    else {\n                        // Reserve space for labels/title\n                        if (axis.opposite) {\n                            scrollbarsOffsets[0] += offset;\n                        }\n                        let xPosition;\n                        if (!scrollbar.options.opposite) {\n                            xPosition = axis.opposite ? 0 : axisMargin;\n                        }\n                        else {\n                            xPosition = axis.left +\n                                axis.width +\n                                2 +\n                                scrollbarsOffsets[0] -\n                                (axis.opposite ? 0 : axisMargin);\n                        }\n                        scrollbar.position(xPosition, axis.top, axis.width, axis.height);\n                        // Next scrollbar should reserve space for margin (if set)\n                        if (axis.opposite) {\n                            scrollbarsOffsets[0] += axisMargin;\n                        }\n                        offsetsIndex = 0;\n                    }\n                    scrollbarsOffsets[offsetsIndex] += scrollbar.size +\n                        (scrollbar.options.margin || 0);\n                    if (isNaN(scrollMin) ||\n                        isNaN(scrollMax) ||\n                        !defined(axis.min) ||\n                        !defined(axis.max) ||\n                        axis.min === axis.max // #10733\n                    ) {\n                        // Default action: when extremes are the same or there is\n                        // not extremes on the axis, but scrollbar exists, make it\n                        // full size\n                        scrollbar.setRange(0, 1);\n                    }\n                    else {\n                        from = ((axis.min - scrollMin) /\n                            (scrollMax - scrollMin));\n                        to = ((axis.max - scrollMin) /\n                            (scrollMax - scrollMin));\n                        if ((axis.horiz && !axis.reversed) ||\n                            (!axis.horiz && axis.reversed)) {\n                            scrollbar.setRange(from, to);\n                        }\n                        else {\n                            // Inverse vertical axis\n                            scrollbar.setRange(1 - to, 1 - from);\n                        }\n                    }\n                }\n            }\n        })(ScrollbarAxis || (ScrollbarAxis = {}));\n        /* *\n         *\n         *  Default Export\n         *\n         * */\n\n        return ScrollbarAxis;\n    });\n    _registerModule(_modules, 'Stock/Scrollbar/ScrollbarDefaults.js', [], function () {\n        /* *\n         *\n         *  (c) 2010-2024 Torstein Honsi\n         *\n         *  License: www.highcharts.com/license\n         *\n         *  !!!!!!! SOURCE GETS TRANSPILED BY TYPESCRIPT. EDIT TS FILE ONLY. !!!!!!!\n         *\n         * */\n        /* *\n         *\n         *  Constant\n         *\n         * */\n        /**\n         *\n         * The scrollbar is a means of panning over the X axis of a stock chart.\n         * Scrollbars can also be applied to other types of axes.\n         *\n         * Another approach to scrollable charts is the [chart.scrollablePlotArea](\n         * https://api.highcharts.com/highcharts/chart.scrollablePlotArea) option that\n         * is especially suitable for simpler cartesian charts on mobile.\n         *\n         * In styled mode, all the presentational options for the\n         * scrollbar are replaced by the classes `.highcharts-scrollbar-thumb`,\n         * `.highcharts-scrollbar-arrow`, `.highcharts-scrollbar-button`,\n         * `.highcharts-scrollbar-rifles` and `.highcharts-scrollbar-track`.\n         *\n         * @sample stock/yaxis/inverted-bar-scrollbar/\n         *         A scrollbar on a simple bar chart\n         *\n         * @product highstock gantt\n         * @optionparent scrollbar\n         *\n         * @private\n         */\n        const ScrollbarDefaults = {\n            /**\n             * The height of the scrollbar. If `buttonsEnabled` is true , the height\n             * also applies to the width of the scroll arrows so that they are always\n             * squares.\n             *\n             * @sample stock/scrollbar/style/\n             *         Non-default height\n             *\n             * @type    {number}\n             */\n            height: 10,\n            /**\n             * The border rounding radius of the bar.\n             *\n             * @sample stock/scrollbar/style/\n             *         Scrollbar styling\n             */\n            barBorderRadius: 5,\n            /**\n             * The corner radius of the scrollbar buttons.\n             *\n             * @sample stock/scrollbar/style/\n             *         Scrollbar styling\n             */\n            buttonBorderRadius: 0,\n            /**\n             * Enable or disable the buttons at the end of the scrollbar.\n             *\n             * @since 11.0.0\n             */\n            buttonsEnabled: false,\n            /**\n             * Enable or disable the scrollbar.\n             *\n             * @sample stock/scrollbar/enabled/\n             *         Disable the scrollbar, only use navigator\n             *\n             * @type      {boolean}\n             * @default   true\n             * @apioption scrollbar.enabled\n             */\n            /**\n             * Whether to redraw the main chart as the scrollbar or the navigator\n             * zoomed window is moved. Defaults to `true` for modern browsers and\n             * `false` for legacy IE browsers as well as mobile devices.\n             *\n             * @sample stock/scrollbar/liveredraw\n             *         Setting live redraw to false\n             *\n             * @type  {boolean}\n             * @since 1.3\n             */\n            liveRedraw: void 0,\n            /**\n             * The margin between the scrollbar and its axis when the scrollbar is\n             * applied directly to an axis, or the navigator in case that is enabled.\n             * Defaults to 10 for axis, 0 for navigator.\n             *\n             * @type {number|undefined}\n             */\n            margin: void 0,\n            /**\n             * The minimum width of the scrollbar.\n             *\n             * @since 1.2.5\n             */\n            minWidth: 6,\n            /** @ignore-option */\n            opposite: true,\n            /**\n             * Whether to show or hide the scrollbar when the scrolled content is\n             * zoomed out to it full extent.\n             *\n             * @type      {boolean}\n             * @default   true\n             * @apioption scrollbar.showFull\n             */\n            step: 0.2,\n            /**\n             * The z index of the scrollbar group.\n             */\n            zIndex: 3,\n            /**\n             * The background color of the scrollbar itself.\n             *\n             * @sample stock/scrollbar/style/\n             *         Scrollbar styling\n             *\n             * @type {Highcharts.ColorString|Highcharts.GradientColorObject|Highcharts.PatternObject}\n             */\n            barBackgroundColor: \"#cccccc\" /* Palette.neutralColor20 */,\n            /**\n             * The width of the bar's border.\n             *\n             * @sample stock/scrollbar/style/\n             *         Scrollbar styling\n             */\n            barBorderWidth: 0,\n            /**\n             * The color of the scrollbar's border.\n             *\n             * @type {Highcharts.ColorString|Highcharts.GradientColorObject|Highcharts.PatternObject}\n             */\n            barBorderColor: \"#cccccc\" /* Palette.neutralColor20 */,\n            /**\n             * The color of the small arrow inside the scrollbar buttons.\n             *\n             * @sample stock/scrollbar/style/\n             *         Scrollbar styling\n             *\n             * @type {Highcharts.ColorString|Highcharts.GradientColorObject|Highcharts.PatternObject}\n             */\n            buttonArrowColor: \"#333333\" /* Palette.neutralColor80 */,\n            /**\n             * The color of scrollbar buttons.\n             *\n             * @sample stock/scrollbar/style/\n             *         Scrollbar styling\n             *\n             * @type {Highcharts.ColorString|Highcharts.GradientColorObject|Highcharts.PatternObject}\n             */\n            buttonBackgroundColor: \"#e6e6e6\" /* Palette.neutralColor10 */,\n            /**\n             * The color of the border of the scrollbar buttons.\n             *\n             * @sample stock/scrollbar/style/\n             *         Scrollbar styling\n             *\n             * @type {Highcharts.ColorString|Highcharts.GradientColorObject|Highcharts.PatternObject}\n             */\n            buttonBorderColor: \"#cccccc\" /* Palette.neutralColor20 */,\n            /**\n             * The border width of the scrollbar buttons.\n             *\n             * @sample stock/scrollbar/style/\n             *         Scrollbar styling\n             */\n            buttonBorderWidth: 1,\n            /**\n             * The color of the small rifles in the middle of the scrollbar.\n             *\n             * @type {Highcharts.ColorString|Highcharts.GradientColorObject|Highcharts.PatternObject}\n             */\n            rifleColor: 'none',\n            /**\n             * The color of the track background.\n             *\n             * @sample stock/scrollbar/style/\n             *         Scrollbar styling\n             *\n             * @type {Highcharts.ColorString|Highcharts.GradientColorObject|Highcharts.PatternObject}\n             */\n            trackBackgroundColor: 'rgba(255, 255, 255, 0.001)',\n            /**\n             * The color of the border of the scrollbar track.\n             *\n             * @sample stock/scrollbar/style/\n             *         Scrollbar styling\n             *\n             * @type {Highcharts.ColorString|Highcharts.GradientColorObject|Highcharts.PatternObject}\n             */\n            trackBorderColor: \"#cccccc\" /* Palette.neutralColor20 */,\n            /**\n             * The corner radius of the border of the scrollbar track.\n             *\n             * @sample stock/scrollbar/style/\n             *         Scrollbar styling\n             */\n            trackBorderRadius: 5,\n            /**\n             * The width of the border of the scrollbar track.\n             *\n             * @sample stock/scrollbar/style/\n             *         Scrollbar styling\n             */\n            trackBorderWidth: 1\n        };\n        /* *\n         *\n         *  Default Export\n         *\n         * */\n\n        return ScrollbarDefaults;\n    });\n    _registerModule(_modules, 'Stock/Scrollbar/Scrollbar.js', [_modules['Core/Defaults.js'], _modules['Core/Globals.js'], _modules['Core/Axis/ScrollbarAxis.js'], _modules['Stock/Scrollbar/ScrollbarDefaults.js'], _modules['Core/Utilities.js']], function (D, H, ScrollbarAxis, ScrollbarDefaults, U) {\n        /* *\n         *\n         *  (c) 2010-2024 Torstein Honsi\n         *\n         *  License: www.highcharts.com/license\n         *\n         *  !!!!!!! SOURCE GETS TRANSPILED BY TYPESCRIPT. EDIT TS FILE ONLY. !!!!!!!\n         *\n         * */\n        const { defaultOptions } = D;\n        const { addEvent, correctFloat, defined, destroyObjectProperties, fireEvent, merge, pick, removeEvent } = U;\n        /* *\n         *\n         *  Constants\n         *\n         * */\n        /* eslint-disable no-invalid-this, valid-jsdoc */\n        /**\n         * A reusable scrollbar, internally used in Highcharts Stock's\n         * navigator and optionally on individual axes.\n         *\n         * @private\n         * @class\n         * @name Highcharts.Scrollbar\n         * @param {Highcharts.SVGRenderer} renderer\n         * @param {Highcharts.ScrollbarOptions} options\n         * @param {Highcharts.Chart} chart\n         */\n        class Scrollbar {\n            /* *\n             *\n             *  Static Functions\n             *\n             * */\n            static compose(AxisClass) {\n                ScrollbarAxis.compose(AxisClass, Scrollbar);\n            }\n            /**\n             * When we have vertical scrollbar, rifles and arrow in buttons should be\n             * rotated. The same method is used in Navigator's handles, to rotate them.\n             *\n             * @function Highcharts.swapXY\n             *\n             * @param {Highcharts.SVGPathArray} path\n             * Path to be rotated.\n             *\n             * @param {boolean} [vertical]\n             * If vertical scrollbar, swap x-y values.\n             *\n             * @return {Highcharts.SVGPathArray}\n             * Rotated path.\n             *\n             * @requires modules/stock\n             */\n            static swapXY(path, vertical) {\n                if (vertical) {\n                    path.forEach((seg) => {\n                        const len = seg.length;\n                        let temp;\n                        for (let i = 0; i < len; i += 2) {\n                            temp = seg[i + 1];\n                            if (typeof temp === 'number') {\n                                seg[i + 1] = seg[i + 2];\n                                seg[i + 2] = temp;\n                            }\n                        }\n                    });\n                }\n                return path;\n            }\n            /* *\n             *\n             *  Constructors\n             *\n             * */\n            constructor(renderer, options, chart) {\n                /* *\n                 *\n                 *  Properties\n                 *\n                 * */\n                this._events = [];\n                this.chartX = 0;\n                this.chartY = 0;\n                this.from = 0;\n                this.scrollbarButtons = [];\n                this.scrollbarLeft = 0;\n                this.scrollbarStrokeWidth = 1;\n                this.scrollbarTop = 0;\n                this.size = 0;\n                this.to = 0;\n                this.trackBorderWidth = 1;\n                this.x = 0;\n                this.y = 0;\n                this.init(renderer, options, chart);\n            }\n            /* *\n             *\n             *  Functions\n             *\n             * */\n            /**\n             * Set up the mouse and touch events for the Scrollbar\n             *\n             * @private\n             * @function Highcharts.Scrollbar#addEvents\n             */\n            addEvents() {\n                const buttonsOrder = this.options.inverted ? [1, 0] : [0, 1], buttons = this.scrollbarButtons, bar = this.scrollbarGroup.element, track = this.track.element, mouseDownHandler = this.mouseDownHandler.bind(this), mouseMoveHandler = this.mouseMoveHandler.bind(this), mouseUpHandler = this.mouseUpHandler.bind(this);\n                const _events = [\n                    // Mouse events\n                    [\n                        buttons[buttonsOrder[0]].element,\n                        'click',\n                        this.buttonToMinClick.bind(this)\n                    ],\n                    [\n                        buttons[buttonsOrder[1]].element,\n                        'click',\n                        this.buttonToMaxClick.bind(this)\n                    ],\n                    [track, 'click', this.trackClick.bind(this)],\n                    [bar, 'mousedown', mouseDownHandler],\n                    [bar.ownerDocument, 'mousemove', mouseMoveHandler],\n                    [bar.ownerDocument, 'mouseup', mouseUpHandler],\n                    // Touch events\n                    [bar, 'touchstart', mouseDownHandler],\n                    [bar.ownerDocument, 'touchmove', mouseMoveHandler],\n                    [bar.ownerDocument, 'touchend', mouseUpHandler]\n                ];\n                // Add them all\n                _events.forEach(function (args) {\n                    addEvent.apply(null, args);\n                });\n                this._events = _events;\n            }\n            buttonToMaxClick(e) {\n                const scroller = this;\n                const range = ((scroller.to - scroller.from) *\n                    pick(scroller.options.step, 0.2));\n                scroller.updatePosition(scroller.from + range, scroller.to + range);\n                fireEvent(scroller, 'changed', {\n                    from: scroller.from,\n                    to: scroller.to,\n                    trigger: 'scrollbar',\n                    DOMEvent: e\n                });\n            }\n            buttonToMinClick(e) {\n                const scroller = this;\n                const range = correctFloat(scroller.to - scroller.from) *\n                    pick(scroller.options.step, 0.2);\n                scroller.updatePosition(correctFloat(scroller.from - range), correctFloat(scroller.to - range));\n                fireEvent(scroller, 'changed', {\n                    from: scroller.from,\n                    to: scroller.to,\n                    trigger: 'scrollbar',\n                    DOMEvent: e\n                });\n            }\n            /**\n             * Get normalized (0-1) cursor position over the scrollbar\n             *\n             * @private\n             * @function Highcharts.Scrollbar#cursorToScrollbarPosition\n             *\n             * @param  {*} normalizedEvent\n             *         normalized event, with chartX and chartY values\n             *\n             * @return {Highcharts.Dictionary<number>}\n             *         Local position {chartX, chartY}\n             */\n            cursorToScrollbarPosition(normalizedEvent) {\n                const scroller = this, options = scroller.options, minWidthDifference = options.minWidth > scroller.calculatedWidth ?\n                    options.minWidth :\n                    0; // minWidth distorts translation\n                return {\n                    chartX: (normalizedEvent.chartX - scroller.x -\n                        scroller.xOffset) /\n                        (scroller.barWidth - minWidthDifference),\n                    chartY: (normalizedEvent.chartY - scroller.y -\n                        scroller.yOffset) /\n                        (scroller.barWidth - minWidthDifference)\n                };\n            }\n            /**\n             * Destroys allocated elements.\n             *\n             * @private\n             * @function Highcharts.Scrollbar#destroy\n             */\n            destroy() {\n                const scroller = this, navigator = scroller.chart.scroller;\n                // Disconnect events added in addEvents\n                scroller.removeEvents();\n                // Destroy properties\n                [\n                    'track',\n                    'scrollbarRifles',\n                    'scrollbar',\n                    'scrollbarGroup',\n                    'group'\n                ].forEach(function (prop) {\n                    if (scroller[prop] && scroller[prop].destroy) {\n                        scroller[prop] = scroller[prop].destroy();\n                    }\n                });\n                // #6421, chart may have more scrollbars\n                if (navigator && scroller === navigator.scrollbar) {\n                    navigator.scrollbar = null;\n                    // Destroy elements in collection\n                    destroyObjectProperties(navigator.scrollbarButtons);\n                }\n            }\n            /**\n             * Draw the scrollbar buttons with arrows\n             *\n             * @private\n             * @function Highcharts.Scrollbar#drawScrollbarButton\n             * @param {number} index\n             *        0 is left, 1 is right\n             */\n            drawScrollbarButton(index) {\n                const scroller = this, renderer = scroller.renderer, scrollbarButtons = scroller.scrollbarButtons, options = scroller.options, size = scroller.size, group = renderer.g().add(scroller.group);\n                scrollbarButtons.push(group);\n                if (options.buttonsEnabled) {\n                    // Create a rectangle for the scrollbar button\n                    const rect = renderer.rect()\n                        .addClass('highcharts-scrollbar-button')\n                        .add(group);\n                    // Presentational attributes\n                    if (!scroller.chart.styledMode) {\n                        rect.attr({\n                            stroke: options.buttonBorderColor,\n                            'stroke-width': options.buttonBorderWidth,\n                            fill: options.buttonBackgroundColor\n                        });\n                    }\n                    // Place the rectangle based on the rendered stroke width\n                    rect.attr(rect.crisp({\n                        x: -0.5,\n                        y: -0.5,\n                        // +1 to compensate for crispifying in rect method\n                        width: size + 1,\n                        height: size + 1,\n                        r: options.buttonBorderRadius\n                    }, rect.strokeWidth()));\n                    // Button arrow\n                    const arrow = renderer\n                        .path(Scrollbar.swapXY([[\n                            'M',\n                            size / 2 + (index ? -1 : 1),\n                            size / 2 - 3\n                        ], [\n                            'L',\n                            size / 2 + (index ? -1 : 1),\n                            size / 2 + 3\n                        ], [\n                            'L',\n                            size / 2 + (index ? 2 : -2),\n                            size / 2\n                        ]], options.vertical))\n                        .addClass('highcharts-scrollbar-arrow')\n                        .add(scrollbarButtons[index]);\n                    if (!scroller.chart.styledMode) {\n                        arrow.attr({\n                            fill: options.buttonArrowColor\n                        });\n                    }\n                }\n            }\n            /**\n             * @private\n             * @function Highcharts.Scrollbar#init\n             * @param {Highcharts.SVGRenderer} renderer\n             * @param {Highcharts.ScrollbarOptions} options\n             * @param {Highcharts.Chart} chart\n             */\n            init(renderer, options, chart) {\n                const scroller = this;\n                scroller.scrollbarButtons = [];\n                scroller.renderer = renderer;\n                scroller.userOptions = options;\n                scroller.options = merge(ScrollbarDefaults, defaultOptions.scrollbar, options);\n                scroller.options.margin = pick(scroller.options.margin, 10);\n                scroller.chart = chart;\n                // backward compatibility\n                scroller.size = pick(scroller.options.size, scroller.options.height);\n                // Init\n                if (options.enabled) {\n                    scroller.render();\n                    scroller.addEvents();\n                }\n            }\n            mouseDownHandler(e) {\n                const scroller = this, normalizedEvent = scroller.chart.pointer?.normalize(e) || e, mousePosition = scroller.cursorToScrollbarPosition(normalizedEvent);\n                scroller.chartX = mousePosition.chartX;\n                scroller.chartY = mousePosition.chartY;\n                scroller.initPositions = [scroller.from, scroller.to];\n                scroller.grabbedCenter = true;\n            }\n            /**\n             * Event handler for the mouse move event.\n             * @private\n             */\n            mouseMoveHandler(e) {\n                const scroller = this, normalizedEvent = scroller.chart.pointer?.normalize(e) || e, options = scroller.options, direction = options.vertical ?\n                    'chartY' : 'chartX', initPositions = scroller.initPositions || [];\n                let scrollPosition, chartPosition, change;\n                // In iOS, a mousemove event with e.pageX === 0 is fired when\n                // holding the finger down in the center of the scrollbar. This\n                // should be ignored.\n                if (scroller.grabbedCenter &&\n                    // #4696, scrollbar failed on Android\n                    (!e.touches || e.touches[0][direction] !== 0)) {\n                    chartPosition = scroller.cursorToScrollbarPosition(normalizedEvent)[direction];\n                    scrollPosition = scroller[direction];\n                    change = chartPosition - scrollPosition;\n                    scroller.hasDragged = true;\n                    scroller.updatePosition(initPositions[0] + change, initPositions[1] + change);\n                    if (scroller.hasDragged) {\n                        fireEvent(scroller, 'changed', {\n                            from: scroller.from,\n                            to: scroller.to,\n                            trigger: 'scrollbar',\n                            DOMType: e.type,\n                            DOMEvent: e\n                        });\n                    }\n                }\n            }\n            /**\n             * Event handler for the mouse up event.\n             * @private\n             */\n            mouseUpHandler(e) {\n                const scroller = this;\n                if (scroller.hasDragged) {\n                    fireEvent(scroller, 'changed', {\n                        from: scroller.from,\n                        to: scroller.to,\n                        trigger: 'scrollbar',\n                        DOMType: e.type,\n                        DOMEvent: e\n                    });\n                }\n                scroller.grabbedCenter =\n                    scroller.hasDragged =\n                        scroller.chartX =\n                            scroller.chartY = null;\n            }\n            /**\n             * Position the scrollbar, method called from a parent with defined\n             * dimensions.\n             *\n             * @private\n             * @function Highcharts.Scrollbar#position\n             * @param {number} x\n             *        x-position on the chart\n             * @param {number} y\n             *        y-position on the chart\n             * @param {number} width\n             *        width of the scrollbar\n             * @param {number} height\n             *        height of the scrollbar\n             */\n            position(x, y, width, height) {\n                const scroller = this, options = scroller.options, { buttonsEnabled, margin = 0, vertical } = options, method = scroller.rendered ? 'animate' : 'attr';\n                let xOffset = height, yOffset = 0;\n                // Make the scrollbar visible when it is repositioned, #15763.\n                scroller.group.show();\n                scroller.x = x;\n                scroller.y = y + this.trackBorderWidth;\n                scroller.width = width; // width with buttons\n                scroller.height = height;\n                scroller.xOffset = xOffset;\n                scroller.yOffset = yOffset;\n                // If Scrollbar is a vertical type, swap options:\n                if (vertical) {\n                    scroller.width = scroller.yOffset = width = yOffset = scroller.size;\n                    scroller.xOffset = xOffset = 0;\n                    scroller.yOffset = yOffset = buttonsEnabled ? scroller.size : 0;\n                    // width without buttons\n                    scroller.barWidth = height - (buttonsEnabled ? width * 2 : 0);\n                    scroller.x = x = x + margin;\n                }\n                else {\n                    scroller.height = height = scroller.size;\n                    scroller.xOffset = xOffset = buttonsEnabled ? scroller.size : 0;\n                    // width without buttons\n                    scroller.barWidth = width - (buttonsEnabled ? height * 2 : 0);\n                    scroller.y = scroller.y + margin;\n                }\n                // Set general position for a group:\n                scroller.group[method]({\n                    translateX: x,\n                    translateY: scroller.y\n                });\n                // Resize background/track:\n                scroller.track[method]({\n                    width: width,\n                    height: height\n                });\n                // Move right/bottom button to its place:\n                scroller.scrollbarButtons[1][method]({\n                    translateX: vertical ? 0 : width - xOffset,\n                    translateY: vertical ? height - yOffset : 0\n                });\n            }\n            /**\n             * Removes the event handlers attached previously with addEvents.\n             *\n             * @private\n             * @function Highcharts.Scrollbar#removeEvents\n             */\n            removeEvents() {\n                this._events.forEach(function (args) {\n                    removeEvent.apply(null, args);\n                });\n                this._events.length = 0;\n            }\n            /**\n             * Render scrollbar with all required items.\n             *\n             * @private\n             * @function Highcharts.Scrollbar#render\n             */\n            render() {\n                const scroller = this, renderer = scroller.renderer, options = scroller.options, size = scroller.size, styledMode = scroller.chart.styledMode, group = renderer.g('scrollbar')\n                    .attr({\n                    zIndex: options.zIndex\n                })\n                    .hide() // initially hide the scrollbar #15863\n                    .add();\n                // Draw the scrollbar group\n                scroller.group = group;\n                // Draw the scrollbar track:\n                scroller.track = renderer.rect()\n                    .addClass('highcharts-scrollbar-track')\n                    .attr({\n                    r: options.trackBorderRadius || 0,\n                    height: size,\n                    width: size\n                }).add(group);\n                if (!styledMode) {\n                    scroller.track.attr({\n                        fill: options.trackBackgroundColor,\n                        stroke: options.trackBorderColor,\n                        'stroke-width': options.trackBorderWidth\n                    });\n                }\n                const trackBorderWidth = scroller.trackBorderWidth =\n                    scroller.track.strokeWidth();\n                scroller.track.attr({\n                    x: -trackBorderWidth % 2 / 2,\n                    y: -trackBorderWidth % 2 / 2\n                });\n                // Draw the scrollbar itself\n                scroller.scrollbarGroup = renderer.g().add(group);\n                scroller.scrollbar = renderer.rect()\n                    .addClass('highcharts-scrollbar-thumb')\n                    .attr({\n                    height: size - trackBorderWidth,\n                    width: size - trackBorderWidth,\n                    r: options.barBorderRadius || 0\n                }).add(scroller.scrollbarGroup);\n                scroller.scrollbarRifles = renderer\n                    .path(Scrollbar.swapXY([\n                    ['M', -3, size / 4],\n                    ['L', -3, 2 * size / 3],\n                    ['M', 0, size / 4],\n                    ['L', 0, 2 * size / 3],\n                    ['M', 3, size / 4],\n                    ['L', 3, 2 * size / 3]\n                ], options.vertical))\n                    .addClass('highcharts-scrollbar-rifles')\n                    .add(scroller.scrollbarGroup);\n                if (!styledMode) {\n                    scroller.scrollbar.attr({\n                        fill: options.barBackgroundColor,\n                        stroke: options.barBorderColor,\n                        'stroke-width': options.barBorderWidth\n                    });\n                    scroller.scrollbarRifles.attr({\n                        stroke: options.rifleColor,\n                        'stroke-width': 1\n                    });\n                }\n                scroller.scrollbarStrokeWidth = scroller.scrollbar.strokeWidth();\n                scroller.scrollbarGroup.translate(-scroller.scrollbarStrokeWidth % 2 / 2, -scroller.scrollbarStrokeWidth % 2 / 2);\n                // Draw the buttons:\n                scroller.drawScrollbarButton(0);\n                scroller.drawScrollbarButton(1);\n            }\n            /**\n             * Set scrollbar size, with a given scale.\n             *\n             * @private\n             * @function Highcharts.Scrollbar#setRange\n             * @param {number} from\n             *        scale (0-1) where bar should start\n             * @param {number} to\n             *        scale (0-1) where bar should end\n             */\n            setRange(from, to) {\n                const scroller = this, options = scroller.options, vertical = options.vertical, minWidth = options.minWidth, fullWidth = scroller.barWidth, method = (this.rendered &&\n                    !this.hasDragged &&\n                    !(this.chart.navigator && this.chart.navigator.hasDragged)) ? 'animate' : 'attr';\n                if (!defined(fullWidth)) {\n                    return;\n                }\n                const toPX = fullWidth * Math.min(to, 1);\n                let fromPX, newSize;\n                from = Math.max(from, 0);\n                fromPX = Math.ceil(fullWidth * from);\n                scroller.calculatedWidth = newSize = correctFloat(toPX - fromPX);\n                // We need to recalculate position, if minWidth is used\n                if (newSize < minWidth) {\n                    fromPX = (fullWidth - minWidth + newSize) * from;\n                    newSize = minWidth;\n                }\n                const newPos = Math.floor(fromPX + scroller.xOffset + scroller.yOffset);\n                const newRiflesPos = newSize / 2 - 0.5; // -0.5 -> rifle line width / 2\n                // Store current position:\n                scroller.from = from;\n                scroller.to = to;\n                if (!vertical) {\n                    scroller.scrollbarGroup[method]({\n                        translateX: newPos\n                    });\n                    scroller.scrollbar[method]({\n                        width: newSize\n                    });\n                    scroller.scrollbarRifles[method]({\n                        translateX: newRiflesPos\n                    });\n                    scroller.scrollbarLeft = newPos;\n                    scroller.scrollbarTop = 0;\n                }\n                else {\n                    scroller.scrollbarGroup[method]({\n                        translateY: newPos\n                    });\n                    scroller.scrollbar[method]({\n                        height: newSize\n                    });\n                    scroller.scrollbarRifles[method]({\n                        translateY: newRiflesPos\n                    });\n                    scroller.scrollbarTop = newPos;\n                    scroller.scrollbarLeft = 0;\n                }\n                if (newSize <= 12) {\n                    scroller.scrollbarRifles.hide();\n                }\n                else {\n                    scroller.scrollbarRifles.show();\n                }\n                // Show or hide the scrollbar based on the showFull setting\n                if (options.showFull === false) {\n                    if (from <= 0 && to >= 1) {\n                        scroller.group.hide();\n                    }\n                    else {\n                        scroller.group.show();\n                    }\n                }\n                scroller.rendered = true;\n            }\n            /**\n             * Checks if the extremes should be updated in response to a scrollbar\n             * change event.\n             *\n             * @private\n             * @function Highcharts.Scrollbar#shouldUpdateExtremes\n             */\n            shouldUpdateExtremes(eventType) {\n                return (pick(this.options.liveRedraw, H.svg &&\n                    !H.isTouchDevice &&\n                    !this.chart.boosted) ||\n                    // Mouseup always should change extremes\n                    eventType === 'mouseup' ||\n                    eventType === 'touchend' ||\n                    // Internal events\n                    !defined(eventType));\n            }\n            trackClick(e) {\n                const scroller = this;\n                const normalizedEvent = scroller.chart.pointer?.normalize(e) || e, range = scroller.to - scroller.from, top = scroller.y + scroller.scrollbarTop, left = scroller.x + scroller.scrollbarLeft;\n                if ((scroller.options.vertical && normalizedEvent.chartY > top) ||\n                    (!scroller.options.vertical && normalizedEvent.chartX > left)) {\n                    // On the top or on the left side of the track:\n                    scroller.updatePosition(scroller.from + range, scroller.to + range);\n                }\n                else {\n                    // On the bottom or the right side of the track:\n                    scroller.updatePosition(scroller.from - range, scroller.to - range);\n                }\n                fireEvent(scroller, 'changed', {\n                    from: scroller.from,\n                    to: scroller.to,\n                    trigger: 'scrollbar',\n                    DOMEvent: e\n                });\n            }\n            /**\n             * Update the scrollbar with new options\n             *\n             * @private\n             * @function Highcharts.Scrollbar#update\n             * @param  {Highcharts.ScrollbarOptions} options\n             */\n            update(options) {\n                this.destroy();\n                this.init(this.chart.renderer, merge(true, this.options, options), this.chart);\n            }\n            /**\n             * Update position option in the Scrollbar, with normalized 0-1 scale\n             *\n             * @private\n             * @function Highcharts.Scrollbar#updatePosition\n             * @param  {number} from\n             * @param  {number} to\n             */\n            updatePosition(from, to) {\n                if (to > 1) {\n                    from = correctFloat(1 - correctFloat(to - from));\n                    to = 1;\n                }\n                if (from < 0) {\n                    to = correctFloat(to - from);\n                    from = 0;\n                }\n                this.from = from;\n                this.to = to;\n            }\n        }\n        /* *\n         *\n         *  Static Properties\n         *\n         * */\n        Scrollbar.defaultOptions = ScrollbarDefaults;\n        /* *\n         *\n         *  Registry\n         *\n         * */\n        defaultOptions.scrollbar = merge(true, Scrollbar.defaultOptions, defaultOptions.scrollbar);\n        /* *\n         *\n         *  Default Export\n         *\n         * */\n\n        return Scrollbar;\n    });\n    _registerModule(_modules, 'Stock/Navigator/Navigator.js', [_modules['Core/Axis/Axis.js'], _modules['Stock/Navigator/ChartNavigatorComposition.js'], _modules['Core/Defaults.js'], _modules['Core/Globals.js'], _modules['Core/Axis/NavigatorAxisComposition.js'], _modules['Stock/Navigator/NavigatorComposition.js'], _modules['Stock/Scrollbar/Scrollbar.js'], _modules['Core/Utilities.js']], function (Axis, ChartNavigatorComposition, D, H, NavigatorAxisAdditions, NavigatorComposition, Scrollbar, U) {\n        /* *\n         *\n         *  (c) 2010-2024 Torstein Honsi\n         *\n         *  License: www.highcharts.com/license\n         *\n         *  !!!!!!! SOURCE GETS TRANSPILED BY TYPESCRIPT. EDIT TS FILE ONLY. !!!!!!!\n         *\n         * */\n        const { defaultOptions } = D;\n        const { isTouchDevice } = H;\n        const { addEvent, clamp, correctFloat, defined, destroyObjectProperties, erase, extend, find, fireEvent, isArray, isNumber, merge, pick, removeEvent, splat } = U;\n        /* *\n         *\n         *  Functions\n         *\n         * */\n        /**\n         * Finding the min or max of a set of variables where we don't know if they are\n         * defined, is a pattern that is repeated several places in Highcharts. Consider\n         * making this a global utility method.\n         * @private\n         */\n        function numExt(extreme, ...args) {\n            const numbers = [].filter.call(args, isNumber);\n            if (numbers.length) {\n                return Math[extreme].apply(0, numbers);\n            }\n        }\n        /* *\n         *\n         *  Class\n         *\n         * */\n        /**\n         * The Navigator class\n         *\n         * @private\n         * @class\n         * @name Highcharts.Navigator\n         *\n         * @param {Highcharts.Chart} chart\n         *        Chart object\n         */\n        class Navigator {\n            /* *\n             *\n             *  Static Properties\n             *\n             * */\n            static compose(ChartClass, AxisClass, SeriesClass) {\n                ChartNavigatorComposition.compose(ChartClass, Navigator);\n                NavigatorComposition.compose(ChartClass, AxisClass, SeriesClass);\n            }\n            /* *\n             *\n             *  Constructor\n             *\n             * */\n            constructor(chart) {\n                this.scrollbarHeight = 0;\n                this.init(chart);\n            }\n            /* *\n             *\n             *  Functions\n             *\n             * */\n            /**\n             * Draw one of the handles on the side of the zoomed range in the navigator.\n             *\n             * @private\n             * @function Highcharts.Navigator#drawHandle\n             *\n             * @param {number} x\n             *        The x center for the handle\n             *\n             * @param {number} index\n             *        0 for left and 1 for right\n             *\n             * @param {boolean|undefined} inverted\n             *        Flag for chart.inverted\n             *\n             * @param {string} verb\n             *        Use 'animate' or 'attr'\n             */\n            drawHandle(x, index, inverted, verb) {\n                const navigator = this, height = navigator.navigatorOptions.handles.height;\n                // Place it\n                navigator.handles[index][verb](inverted ? {\n                    translateX: Math.round(navigator.left + navigator.height / 2),\n                    translateY: Math.round(navigator.top + parseInt(x, 10) + 0.5 - height)\n                } : {\n                    translateX: Math.round(navigator.left + parseInt(x, 10)),\n                    translateY: Math.round(navigator.top + navigator.height / 2 - height / 2 - 1)\n                });\n            }\n            /**\n             * Render outline around the zoomed range\n             *\n             * @private\n             * @function Highcharts.Navigator#drawOutline\n             *\n             * @param {number} zoomedMin\n             *        in pixels position where zoomed range starts\n             *\n             * @param {number} zoomedMax\n             *        in pixels position where zoomed range ends\n             *\n             * @param {boolean|undefined} inverted\n             *        flag if chart is inverted\n             *\n             * @param {string} verb\n             *        use 'animate' or 'attr'\n             */\n            drawOutline(zoomedMin, zoomedMax, inverted, verb) {\n                const navigator = this, maskInside = navigator.navigatorOptions.maskInside, outlineWidth = navigator.outline.strokeWidth(), halfOutline = outlineWidth / 2, outlineCorrection = (outlineWidth % 2) / 2, // #5800\n                scrollButtonSize = navigator.scrollButtonSize, navigatorSize = navigator.size, navigatorTop = navigator.top, height = navigator.height, lineTop = navigatorTop - halfOutline, lineBtm = navigatorTop + height;\n                let left = navigator.left, verticalMin, path;\n                if (inverted) {\n                    verticalMin = navigatorTop + zoomedMax + outlineCorrection;\n                    zoomedMax = navigatorTop + zoomedMin + outlineCorrection;\n                    path = [\n                        [\n                            'M',\n                            left + height,\n                            navigatorTop - scrollButtonSize - outlineCorrection\n                        ],\n                        // top right of zoomed range\n                        ['L', left + height, verticalMin],\n                        ['L', left, verticalMin],\n                        ['M', left, zoomedMax],\n                        ['L', left + height, zoomedMax],\n                        [\n                            'L',\n                            left + height,\n                            navigatorTop + navigatorSize + scrollButtonSize\n                        ]\n                    ];\n                    if (maskInside) {\n                        path.push(\n                        // upper left of zoomed range\n                        ['M', left + height, verticalMin - halfOutline], \n                        // upper right of z.r.\n                        [\n                            'L',\n                            left + height,\n                            zoomedMax + halfOutline\n                        ]);\n                    }\n                }\n                else {\n                    left -= scrollButtonSize;\n                    zoomedMin += left + scrollButtonSize - outlineCorrection;\n                    zoomedMax += left + scrollButtonSize - outlineCorrection;\n                    path = [\n                        // left\n                        ['M', left, lineTop],\n                        // upper left of zoomed range\n                        ['L', zoomedMin, lineTop],\n                        // lower left of z.r.\n                        ['L', zoomedMin, lineBtm],\n                        // lower right of z.r.\n                        ['M', zoomedMax, lineBtm],\n                        // upper right of z.r.\n                        ['L', zoomedMax, lineTop],\n                        // right\n                        [\n                            'L',\n                            left + navigatorSize + scrollButtonSize * 2,\n                            navigatorTop + halfOutline\n                        ]\n                    ];\n                    if (maskInside) {\n                        path.push(\n                        // upper left of zoomed range\n                        ['M', zoomedMin - halfOutline, lineTop], \n                        // upper right of z.r.\n                        ['L', zoomedMax + halfOutline, lineTop]);\n                    }\n                }\n                navigator.outline[verb]({\n                    d: path\n                });\n            }\n            /**\n             * Render outline around the zoomed range\n             *\n             * @private\n             * @function Highcharts.Navigator#drawMasks\n             *\n             * @param {number} zoomedMin\n             *        in pixels position where zoomed range starts\n             *\n             * @param {number} zoomedMax\n             *        in pixels position where zoomed range ends\n             *\n             * @param {boolean|undefined} inverted\n             *        flag if chart is inverted\n             *\n             * @param {string} verb\n             *        use 'animate' or 'attr'\n             */\n            drawMasks(zoomedMin, zoomedMax, inverted, verb) {\n                const navigator = this, left = navigator.left, top = navigator.top, navigatorHeight = navigator.height;\n                let height, width, x, y;\n                // Determine rectangle position & size\n                // According to (non)inverted position:\n                if (inverted) {\n                    x = [left, left, left];\n                    y = [top, top + zoomedMin, top + zoomedMax];\n                    width = [navigatorHeight, navigatorHeight, navigatorHeight];\n                    height = [\n                        zoomedMin,\n                        zoomedMax - zoomedMin,\n                        navigator.size - zoomedMax\n                    ];\n                }\n                else {\n                    x = [left, left + zoomedMin, left + zoomedMax];\n                    y = [top, top, top];\n                    width = [\n                        zoomedMin,\n                        zoomedMax - zoomedMin,\n                        navigator.size - zoomedMax\n                    ];\n                    height = [navigatorHeight, navigatorHeight, navigatorHeight];\n                }\n                navigator.shades.forEach((shade, i) => {\n                    shade[verb]({\n                        x: x[i],\n                        y: y[i],\n                        width: width[i],\n                        height: height[i]\n                    });\n                });\n            }\n            /**\n             * Generate DOM elements for a navigator:\n             *\n             * - main navigator group\n             *\n             * - all shades\n             *\n             * - outline\n             *\n             * - handles\n             *\n             * @private\n             * @function Highcharts.Navigator#renderElements\n             */\n            renderElements() {\n                const navigator = this, navigatorOptions = navigator.navigatorOptions, maskInside = navigatorOptions.maskInside, chart = navigator.chart, inverted = chart.inverted, renderer = chart.renderer, mouseCursor = {\n                    cursor: inverted ? 'ns-resize' : 'ew-resize'\n                }, \n                // Create the main navigator group\n                navigatorGroup = navigator.navigatorGroup = renderer\n                    .g('navigator')\n                    .attr({\n                    zIndex: 8,\n                    visibility: 'hidden'\n                })\n                    .add();\n                // Create masks, each mask will get events and fill:\n                [\n                    !maskInside,\n                    maskInside,\n                    !maskInside\n                ].forEach((hasMask, index) => {\n                    const shade = renderer.rect()\n                        .addClass('highcharts-navigator-mask' +\n                        (index === 1 ? '-inside' : '-outside'))\n                        .add(navigatorGroup);\n                    if (!chart.styledMode) {\n                        shade.attr({\n                            fill: hasMask ?\n                                navigatorOptions.maskFill :\n                                'rgba(0,0,0,0)'\n                        });\n                        if (index === 1) {\n                            shade.css(mouseCursor);\n                        }\n                    }\n                    navigator.shades[index] = shade;\n                });\n                // Create the outline:\n                navigator.outline = renderer.path()\n                    .addClass('highcharts-navigator-outline')\n                    .add(navigatorGroup);\n                if (!chart.styledMode) {\n                    navigator.outline.attr({\n                        'stroke-width': navigatorOptions.outlineWidth,\n                        stroke: navigatorOptions.outlineColor\n                    });\n                }\n                // Create the handlers:\n                if (navigatorOptions.handles && navigatorOptions.handles.enabled) {\n                    const handlesOptions = navigatorOptions.handles, { height, width } = handlesOptions;\n                    [0, 1].forEach((index) => {\n                        navigator.handles[index] = renderer.symbol(handlesOptions.symbols[index], -width / 2 - 1, 0, width, height, handlesOptions);\n                        if (chart.inverted) {\n                            navigator.handles[index].attr({\n                                rotation: 90,\n                                rotationOriginX: Math.floor(-width / 2),\n                                rotationOriginY: (height + width) / 2\n                            });\n                        }\n                        // zIndex = 6 for right handle, 7 for left.\n                        // Can't be 10, because of the tooltip in inverted chart #2908\n                        navigator.handles[index].attr({ zIndex: 7 - index })\n                            .addClass('highcharts-navigator-handle ' +\n                            'highcharts-navigator-handle-' +\n                            ['left', 'right'][index]).add(navigatorGroup);\n                        if (!chart.styledMode) {\n                            navigator.handles[index]\n                                .attr({\n                                fill: handlesOptions.backgroundColor,\n                                stroke: handlesOptions.borderColor,\n                                'stroke-width': handlesOptions.lineWidth\n                            })\n                                .css(mouseCursor);\n                        }\n                    });\n                }\n            }\n            /**\n             * Update navigator\n             *\n             * @private\n             * @function Highcharts.Navigator#update\n             *\n             * @param {Highcharts.NavigatorOptions} options\n             *        Options to merge in when updating navigator\n             */\n            update(options) {\n                // Remove references to old navigator series in base series\n                (this.series || []).forEach((series) => {\n                    if (series.baseSeries) {\n                        delete series.baseSeries.navigatorSeries;\n                    }\n                });\n                // Destroy and rebuild navigator\n                this.destroy();\n                const chartOptions = this.chart.options;\n                merge(true, chartOptions.navigator, options);\n                this.init(this.chart);\n            }\n            /**\n             * Render the navigator\n             *\n             * @private\n             * @function Highcharts.Navigator#render\n             * @param {number} min\n             *        X axis value minimum\n             * @param {number} max\n             *        X axis value maximum\n             * @param {number} [pxMin]\n             *        Pixel value minimum\n             * @param {number} [pxMax]\n             *        Pixel value maximum\n             */\n            render(min, max, pxMin, pxMax) {\n                const navigator = this, chart = navigator.chart, xAxis = navigator.xAxis, pointRange = xAxis.pointRange || 0, scrollbarXAxis = xAxis.navigatorAxis.fake ? chart.xAxis[0] : xAxis, navigatorEnabled = navigator.navigatorEnabled, rendered = navigator.rendered, inverted = chart.inverted, minRange = chart.xAxis[0].minRange, maxRange = chart.xAxis[0].options.maxRange, scrollButtonSize = navigator.scrollButtonSize;\n                let navigatorWidth, scrollbarLeft, scrollbarTop, scrollbarHeight = navigator.scrollbarHeight, navigatorSize, verb;\n                // Don't redraw while moving the handles (#4703).\n                if (this.hasDragged && !defined(pxMin)) {\n                    return;\n                }\n                min = correctFloat(min - pointRange / 2);\n                max = correctFloat(max + pointRange / 2);\n                // Don't render the navigator until we have data (#486, #4202, #5172).\n                if (!isNumber(min) || !isNumber(max)) {\n                    // However, if navigator was already rendered, we may need to resize\n                    // it. For example hidden series, but visible navigator (#6022).\n                    if (rendered) {\n                        pxMin = 0;\n                        pxMax = pick(xAxis.width, scrollbarXAxis.width);\n                    }\n                    else {\n                        return;\n                    }\n                }\n                navigator.left = pick(xAxis.left, \n                // in case of scrollbar only, without navigator\n                chart.plotLeft + scrollButtonSize +\n                    (inverted ? chart.plotWidth : 0));\n                let zoomedMax = navigator.size = navigatorSize = pick(xAxis.len, (inverted ? chart.plotHeight : chart.plotWidth) -\n                    2 * scrollButtonSize);\n                if (inverted) {\n                    navigatorWidth = scrollbarHeight;\n                }\n                else {\n                    navigatorWidth = navigatorSize + 2 * scrollButtonSize;\n                }\n                // Get the pixel position of the handles\n                pxMin = pick(pxMin, xAxis.toPixels(min, true));\n                pxMax = pick(pxMax, xAxis.toPixels(max, true));\n                // Verify (#1851, #2238)\n                if (!isNumber(pxMin) || Math.abs(pxMin) === Infinity) {\n                    pxMin = 0;\n                    pxMax = navigatorWidth;\n                }\n                // Are we below the minRange? (#2618, #6191)\n                const newMin = xAxis.toValue(pxMin, true), newMax = xAxis.toValue(pxMax, true), currentRange = Math.abs(correctFloat(newMax - newMin));\n                if (currentRange < minRange) {\n                    if (this.grabbedLeft) {\n                        pxMin = xAxis.toPixels(newMax - minRange - pointRange, true);\n                    }\n                    else if (this.grabbedRight) {\n                        pxMax = xAxis.toPixels(newMin + minRange + pointRange, true);\n                    }\n                }\n                else if (defined(maxRange) &&\n                    correctFloat(currentRange - pointRange) > maxRange) {\n                    if (this.grabbedLeft) {\n                        pxMin = xAxis.toPixels(newMax - maxRange - pointRange, true);\n                    }\n                    else if (this.grabbedRight) {\n                        pxMax = xAxis.toPixels(newMin + maxRange + pointRange, true);\n                    }\n                }\n                // Handles are allowed to cross, but never exceed the plot area\n                navigator.zoomedMax = clamp(Math.max(pxMin, pxMax), 0, zoomedMax);\n                navigator.zoomedMin = clamp(navigator.fixedWidth ?\n                    navigator.zoomedMax - navigator.fixedWidth :\n                    Math.min(pxMin, pxMax), 0, zoomedMax);\n                navigator.range = navigator.zoomedMax - navigator.zoomedMin;\n                zoomedMax = Math.round(navigator.zoomedMax);\n                const zoomedMin = Math.round(navigator.zoomedMin);\n                if (navigatorEnabled) {\n                    navigator.navigatorGroup.attr({\n                        visibility: 'inherit'\n                    });\n                    // Place elements\n                    verb = rendered && !navigator.hasDragged ? 'animate' : 'attr';\n                    navigator.drawMasks(zoomedMin, zoomedMax, inverted, verb);\n                    navigator.drawOutline(zoomedMin, zoomedMax, inverted, verb);\n                    if (navigator.navigatorOptions.handles.enabled) {\n                        navigator.drawHandle(zoomedMin, 0, inverted, verb);\n                        navigator.drawHandle(zoomedMax, 1, inverted, verb);\n                    }\n                }\n                if (navigator.scrollbar) {\n                    if (inverted) {\n                        scrollbarTop = navigator.top - scrollButtonSize;\n                        scrollbarLeft = navigator.left - scrollbarHeight +\n                            (navigatorEnabled || !scrollbarXAxis.opposite ? 0 :\n                                // Multiple axes has offsets:\n                                (scrollbarXAxis.titleOffset || 0) +\n                                    // Self margin from the axis.title\n                                    scrollbarXAxis.axisTitleMargin);\n                        scrollbarHeight = navigatorSize + 2 * scrollButtonSize;\n                    }\n                    else {\n                        scrollbarTop = navigator.top + (navigatorEnabled ?\n                            navigator.height :\n                            -scrollbarHeight);\n                        scrollbarLeft = navigator.left - scrollButtonSize;\n                    }\n                    // Reposition scrollbar\n                    navigator.scrollbar.position(scrollbarLeft, scrollbarTop, navigatorWidth, scrollbarHeight);\n                    // Keep scale 0-1\n                    navigator.scrollbar.setRange(\n                    // Use real value, not rounded because range can be very small\n                    // (#1716)\n                    navigator.zoomedMin / (navigatorSize || 1), navigator.zoomedMax / (navigatorSize || 1));\n                }\n                navigator.rendered = true;\n                fireEvent(this, 'afterRender');\n            }\n            /**\n             * Set up the mouse and touch events for the navigator\n             *\n             * @private\n             * @function Highcharts.Navigator#addMouseEvents\n             */\n            addMouseEvents() {\n                const navigator = this, chart = navigator.chart, container = chart.container;\n                let eventsToUnbind = [], mouseMoveHandler, mouseUpHandler;\n                /**\n                 * Create mouse events' handlers.\n                 * Make them as separate functions to enable wrapping them:\n                 */\n                navigator.mouseMoveHandler = mouseMoveHandler = function (e) {\n                    navigator.onMouseMove(e);\n                };\n                navigator.mouseUpHandler = mouseUpHandler = function (e) {\n                    navigator.onMouseUp(e);\n                };\n                // Add shades and handles mousedown events\n                eventsToUnbind = navigator.getPartsEvents('mousedown');\n                eventsToUnbind.push(\n                // Add mouse move and mouseup events. These are bind to doc/div,\n                // because Navigator.grabbedSomething flags are stored in mousedown\n                // events\n                addEvent(chart.renderTo, 'mousemove', mouseMoveHandler), addEvent(container.ownerDocument, 'mouseup', mouseUpHandler), \n                // Touch events\n                addEvent(chart.renderTo, 'touchmove', mouseMoveHandler), addEvent(container.ownerDocument, 'touchend', mouseUpHandler));\n                eventsToUnbind.concat(navigator.getPartsEvents('touchstart'));\n                navigator.eventsToUnbind = eventsToUnbind;\n                // Data events\n                if (navigator.series && navigator.series[0]) {\n                    eventsToUnbind.push(addEvent(navigator.series[0].xAxis, 'foundExtremes', function () {\n                        chart.navigator.modifyNavigatorAxisExtremes();\n                    }));\n                }\n            }\n            /**\n             * Generate events for handles and masks\n             *\n             * @private\n             * @function Highcharts.Navigator#getPartsEvents\n             *\n             * @param {string} eventName\n             *        Event name handler, 'mousedown' or 'touchstart'\n             *\n             * @return {Array<Function>}\n             *         An array of functions to remove navigator functions from the\n             *         events again.\n             */\n            getPartsEvents(eventName) {\n                const navigator = this, events = [];\n                ['shades', 'handles'].forEach(function (name) {\n                    navigator[name].forEach(function (navigatorItem, index) {\n                        events.push(addEvent(navigatorItem.element, eventName, function (e) {\n                            navigator[name + 'Mousedown'](e, index);\n                        }));\n                    });\n                });\n                return events;\n            }\n            /**\n             * Mousedown on a shaded mask, either:\n             *\n             * - will be stored for future drag&drop\n             *\n             * - will directly shift to a new range\n             *\n             * @private\n             * @function Highcharts.Navigator#shadesMousedown\n             *\n             * @param {Highcharts.PointerEventObject} e\n             *        Mouse event\n             *\n             * @param {number} index\n             *        Index of a mask in Navigator.shades array\n             */\n            shadesMousedown(e, index) {\n                e = this.chart.pointer?.normalize(e) || e;\n                const navigator = this, chart = navigator.chart, xAxis = navigator.xAxis, zoomedMin = navigator.zoomedMin, navigatorSize = navigator.size, range = navigator.range;\n                let navigatorPosition = navigator.left, chartX = e.chartX, fixedMax, fixedMin, ext, left;\n                // For inverted chart, swap some options:\n                if (chart.inverted) {\n                    chartX = e.chartY;\n                    navigatorPosition = navigator.top;\n                }\n                if (index === 1) {\n                    // Store information for drag&drop\n                    navigator.grabbedCenter = chartX;\n                    navigator.fixedWidth = range;\n                    navigator.dragOffset = chartX - zoomedMin;\n                }\n                else {\n                    // Shift the range by clicking on shaded areas\n                    left = chartX - navigatorPosition - range / 2;\n                    if (index === 0) {\n                        left = Math.max(0, left);\n                    }\n                    else if (index === 2 && left + range >= navigatorSize) {\n                        left = navigatorSize - range;\n                        if (navigator.reversedExtremes) {\n                            // #7713\n                            left -= range;\n                            fixedMin = navigator.getUnionExtremes().dataMin;\n                        }\n                        else {\n                            // #2293, #3543\n                            fixedMax = navigator.getUnionExtremes().dataMax;\n                        }\n                    }\n                    if (left !== zoomedMin) { // it has actually moved\n                        navigator.fixedWidth = range; // #1370\n                        ext = xAxis.navigatorAxis.toFixedRange(left, left + range, fixedMin, fixedMax);\n                        if (defined(ext.min)) { // #7411\n                            fireEvent(this, 'setRange', {\n                                min: Math.min(ext.min, ext.max),\n                                max: Math.max(ext.min, ext.max),\n                                redraw: true,\n                                eventArguments: {\n                                    trigger: 'navigator'\n                                }\n                            });\n                        }\n                    }\n                }\n            }\n            /**\n             * Mousedown on a handle mask.\n             * Will store necessary information for drag&drop.\n             *\n             * @private\n             * @function Highcharts.Navigator#handlesMousedown\n             * @param {Highcharts.PointerEventObject} e\n             *        Mouse event\n             * @param {number} index\n             *        Index of a handle in Navigator.handles array\n             */\n            handlesMousedown(e, index) {\n                e = this.chart.pointer?.normalize(e) || e;\n                const navigator = this, chart = navigator.chart, baseXAxis = chart.xAxis[0], \n                // For reversed axes, min and max are changed,\n                // so the other extreme should be stored\n                reverse = navigator.reversedExtremes;\n                if (index === 0) {\n                    // Grab the left handle\n                    navigator.grabbedLeft = true;\n                    navigator.otherHandlePos = navigator.zoomedMax;\n                    navigator.fixedExtreme = reverse ? baseXAxis.min : baseXAxis.max;\n                }\n                else {\n                    // Grab the right handle\n                    navigator.grabbedRight = true;\n                    navigator.otherHandlePos = navigator.zoomedMin;\n                    navigator.fixedExtreme = reverse ? baseXAxis.max : baseXAxis.min;\n                }\n                chart.setFixedRange(void 0);\n            }\n            /**\n             * Mouse move event based on x/y mouse position.\n             *\n             * @private\n             * @function Highcharts.Navigator#onMouseMove\n             *\n             * @param {Highcharts.PointerEventObject} e\n             *        Mouse event\n             */\n            onMouseMove(e) {\n                const navigator = this, chart = navigator.chart, navigatorSize = navigator.navigatorSize, range = navigator.range, dragOffset = navigator.dragOffset, inverted = chart.inverted;\n                let left = navigator.left, chartX;\n                // In iOS, a mousemove event with e.pageX === 0 is fired when holding\n                // the finger down in the center of the scrollbar. This should be\n                // ignored.\n                if (!e.touches || e.touches[0].pageX !== 0) { // #4696\n                    e = chart.pointer?.normalize(e) || e;\n                    chartX = e.chartX;\n                    // Swap some options for inverted chart\n                    if (inverted) {\n                        left = navigator.top;\n                        chartX = e.chartY;\n                    }\n                    // Drag left handle or top handle\n                    if (navigator.grabbedLeft) {\n                        navigator.hasDragged = true;\n                        navigator.render(0, 0, chartX - left, navigator.otherHandlePos);\n                        // Drag right handle or bottom handle\n                    }\n                    else if (navigator.grabbedRight) {\n                        navigator.hasDragged = true;\n                        navigator.render(0, 0, navigator.otherHandlePos, chartX - left);\n                        // Drag scrollbar or open area in navigator\n                    }\n                    else if (navigator.grabbedCenter) {\n                        navigator.hasDragged = true;\n                        if (chartX < dragOffset) { // outside left\n                            chartX = dragOffset;\n                            // outside right\n                        }\n                        else if (chartX >\n                            navigatorSize + dragOffset - range) {\n                            chartX = navigatorSize + dragOffset - range;\n                        }\n                        navigator.render(0, 0, chartX - dragOffset, chartX - dragOffset + range);\n                    }\n                    if (navigator.hasDragged &&\n                        navigator.scrollbar &&\n                        pick(navigator.scrollbar.options.liveRedraw, \n                        // By default, don't run live redraw on touch\n                        // devices or if the chart is in boost.\n                        !isTouchDevice &&\n                            !this.chart.boosted)) {\n                        e.DOMType = e.type;\n                        setTimeout(function () {\n                            navigator.onMouseUp(e);\n                        }, 0);\n                    }\n                }\n            }\n            /**\n             * Mouse up event based on x/y mouse position.\n             *\n             * @private\n             * @function Highcharts.Navigator#onMouseUp\n             * @param {Highcharts.PointerEventObject} e\n             *        Mouse event\n             */\n            onMouseUp(e) {\n                const navigator = this, chart = navigator.chart, xAxis = navigator.xAxis, scrollbar = navigator.scrollbar, DOMEvent = e.DOMEvent || e, inverted = chart.inverted, verb = navigator.rendered && !navigator.hasDragged ?\n                    'animate' : 'attr';\n                let zoomedMax, zoomedMin, unionExtremes, fixedMin, fixedMax, ext;\n                if (\n                // MouseUp is called for both, navigator and scrollbar (that order),\n                // which causes calling afterSetExtremes twice. Prevent first call\n                // by checking if scrollbar is going to set new extremes (#6334)\n                (navigator.hasDragged && (!scrollbar || !scrollbar.hasDragged)) ||\n                    e.trigger === 'scrollbar') {\n                    unionExtremes = navigator.getUnionExtremes();\n                    // When dragging one handle, make sure the other one doesn't change\n                    if (navigator.zoomedMin === navigator.otherHandlePos) {\n                        fixedMin = navigator.fixedExtreme;\n                    }\n                    else if (navigator.zoomedMax === navigator.otherHandlePos) {\n                        fixedMax = navigator.fixedExtreme;\n                    }\n                    // Snap to right edge (#4076)\n                    if (navigator.zoomedMax === navigator.size) {\n                        fixedMax = navigator.reversedExtremes ?\n                            unionExtremes.dataMin :\n                            unionExtremes.dataMax;\n                    }\n                    // Snap to left edge (#7576)\n                    if (navigator.zoomedMin === 0) {\n                        fixedMin = navigator.reversedExtremes ?\n                            unionExtremes.dataMax :\n                            unionExtremes.dataMin;\n                    }\n                    ext = xAxis.navigatorAxis.toFixedRange(navigator.zoomedMin, navigator.zoomedMax, fixedMin, fixedMax);\n                    if (defined(ext.min)) {\n                        fireEvent(this, 'setRange', {\n                            min: Math.min(ext.min, ext.max),\n                            max: Math.max(ext.min, ext.max),\n                            redraw: true,\n                            animation: navigator.hasDragged ? false : null,\n                            eventArguments: {\n                                trigger: 'navigator',\n                                triggerOp: 'navigator-drag',\n                                DOMEvent: DOMEvent // #1838\n                            }\n                        });\n                    }\n                }\n                if (e.DOMType !== 'mousemove' &&\n                    e.DOMType !== 'touchmove') {\n                    navigator.grabbedLeft = navigator.grabbedRight =\n                        navigator.grabbedCenter = navigator.fixedWidth =\n                            navigator.fixedExtreme = navigator.otherHandlePos =\n                                navigator.hasDragged = navigator.dragOffset = null;\n                }\n                // Update position of navigator shades, outline and handles (#12573)\n                if (navigator.navigatorEnabled &&\n                    isNumber(navigator.zoomedMin) &&\n                    isNumber(navigator.zoomedMax)) {\n                    zoomedMin = Math.round(navigator.zoomedMin);\n                    zoomedMax = Math.round(navigator.zoomedMax);\n                    if (navigator.shades) {\n                        navigator.drawMasks(zoomedMin, zoomedMax, inverted, verb);\n                    }\n                    if (navigator.outline) {\n                        navigator.drawOutline(zoomedMin, zoomedMax, inverted, verb);\n                    }\n                    if (navigator.navigatorOptions.handles.enabled &&\n                        Object.keys(navigator.handles).length ===\n                            navigator.handles.length) {\n                        navigator.drawHandle(zoomedMin, 0, inverted, verb);\n                        navigator.drawHandle(zoomedMax, 1, inverted, verb);\n                    }\n                }\n            }\n            /**\n             * Removes the event handlers attached previously with addEvents.\n             *\n             * @private\n             * @function Highcharts.Navigator#removeEvents\n             */\n            removeEvents() {\n                if (this.eventsToUnbind) {\n                    this.eventsToUnbind.forEach(function (unbind) {\n                        unbind();\n                    });\n                    this.eventsToUnbind = void 0;\n                }\n                this.removeBaseSeriesEvents();\n            }\n            /**\n             * Remove data events.\n             *\n             * @private\n             * @function Highcharts.Navigator#removeBaseSeriesEvents\n             */\n            removeBaseSeriesEvents() {\n                const baseSeries = this.baseSeries || [];\n                if (this.navigatorEnabled && baseSeries[0]) {\n                    if (this.navigatorOptions.adaptToUpdatedData !== false) {\n                        baseSeries.forEach(function (series) {\n                            removeEvent(series, 'updatedData', this.updatedDataHandler);\n                        }, this);\n                    }\n                    // We only listen for extremes-events on the first baseSeries\n                    if (baseSeries[0].xAxis) {\n                        removeEvent(baseSeries[0].xAxis, 'foundExtremes', this.modifyBaseAxisExtremes);\n                    }\n                }\n            }\n            /**\n             * Initialize the Navigator object\n             *\n             * @private\n             * @function Highcharts.Navigator#init\n             */\n            init(chart) {\n                const chartOptions = chart.options, navigatorOptions = chartOptions.navigator || {}, navigatorEnabled = navigatorOptions.enabled, scrollbarOptions = chartOptions.scrollbar || {}, scrollbarEnabled = scrollbarOptions.enabled, height = navigatorEnabled && navigatorOptions.height || 0, scrollbarHeight = scrollbarEnabled && scrollbarOptions.height || 0, scrollButtonSize = scrollbarOptions.buttonsEnabled && scrollbarHeight || 0;\n                this.handles = [];\n                this.shades = [];\n                this.chart = chart;\n                this.setBaseSeries();\n                this.height = height;\n                this.scrollbarHeight = scrollbarHeight;\n                this.scrollButtonSize = scrollButtonSize;\n                this.scrollbarEnabled = scrollbarEnabled;\n                this.navigatorEnabled = navigatorEnabled;\n                this.navigatorOptions = navigatorOptions;\n                this.scrollbarOptions = scrollbarOptions;\n                this.opposite = pick(navigatorOptions.opposite, Boolean(!navigatorEnabled && chart.inverted)); // #6262\n                const navigator = this, baseSeries = navigator.baseSeries, xAxisIndex = chart.xAxis.length, yAxisIndex = chart.yAxis.length, baseXaxis = baseSeries && baseSeries[0] && baseSeries[0].xAxis ||\n                    chart.xAxis[0] || { options: {} };\n                chart.isDirtyBox = true;\n                if (navigator.navigatorEnabled) {\n                    // an x axis is required for scrollbar also\n                    navigator.xAxis = new Axis(chart, merge({\n                        // inherit base xAxis' break, ordinal options and overscroll\n                        breaks: baseXaxis.options.breaks,\n                        ordinal: baseXaxis.options.ordinal,\n                        overscroll: baseXaxis.options.overscroll\n                    }, navigatorOptions.xAxis, {\n                        id: 'navigator-x-axis',\n                        yAxis: 'navigator-y-axis',\n                        type: 'datetime',\n                        index: xAxisIndex,\n                        isInternal: true,\n                        offset: 0,\n                        keepOrdinalPadding: true,\n                        startOnTick: false,\n                        endOnTick: false,\n                        minPadding: 0,\n                        maxPadding: 0,\n                        zoomEnabled: false\n                    }, chart.inverted ? {\n                        offsets: [scrollButtonSize, 0, -scrollButtonSize, 0],\n                        width: height\n                    } : {\n                        offsets: [0, -scrollButtonSize, 0, scrollButtonSize],\n                        height: height\n                    }), 'xAxis');\n                    navigator.yAxis = new Axis(chart, merge(navigatorOptions.yAxis, {\n                        id: 'navigator-y-axis',\n                        alignTicks: false,\n                        offset: 0,\n                        index: yAxisIndex,\n                        isInternal: true,\n                        reversed: pick((navigatorOptions.yAxis &&\n                            navigatorOptions.yAxis.reversed), (chart.yAxis[0] && chart.yAxis[0].reversed), false),\n                        zoomEnabled: false\n                    }, chart.inverted ? {\n                        width: height\n                    } : {\n                        height: height\n                    }), 'yAxis');\n                    // If we have a base series, initialize the navigator series\n                    if (baseSeries || navigatorOptions.series.data) {\n                        navigator.updateNavigatorSeries(false);\n                        // If not, set up an event to listen for added series\n                    }\n                    else if (chart.series.length === 0) {\n                        navigator.unbindRedraw = addEvent(chart, 'beforeRedraw', function () {\n                            // We've got one, now add it as base\n                            if (chart.series.length > 0 && !navigator.series) {\n                                navigator.setBaseSeries();\n                                navigator.unbindRedraw(); // reset\n                            }\n                        });\n                    }\n                    navigator.reversedExtremes = (chart.inverted && !navigator.xAxis.reversed) || (!chart.inverted && navigator.xAxis.reversed);\n                    // Render items, so we can bind events to them:\n                    navigator.renderElements();\n                    // Add mouse events\n                    navigator.addMouseEvents();\n                    // in case of scrollbar only, fake an x axis to get translation\n                }\n                else {\n                    navigator.xAxis = {\n                        chart,\n                        navigatorAxis: {\n                            fake: true\n                        },\n                        translate: function (value, reverse) {\n                            const axis = chart.xAxis[0], ext = axis.getExtremes(), scrollTrackWidth = axis.len - 2 * scrollButtonSize, min = numExt('min', axis.options.min, ext.dataMin), valueRange = numExt('max', axis.options.max, ext.dataMax) - min;\n                            return reverse ?\n                                // from pixel to value\n                                (value * valueRange / scrollTrackWidth) + min :\n                                // from value to pixel\n                                scrollTrackWidth * (value - min) / valueRange;\n                        },\n                        toPixels: function (value) {\n                            return this.translate(value);\n                        },\n                        toValue: function (value) {\n                            return this.translate(value, true);\n                        }\n                    };\n                    navigator.xAxis.navigatorAxis.axis = navigator.xAxis;\n                    navigator.xAxis.navigatorAxis.toFixedRange = (NavigatorAxisAdditions.prototype.toFixedRange.bind(navigator.xAxis.navigatorAxis));\n                }\n                // Initialize the scrollbar\n                if (chart.options.scrollbar.enabled) {\n                    const options = merge(chart.options.scrollbar, { vertical: chart.inverted });\n                    if (!isNumber(options.margin) && navigator.navigatorEnabled) {\n                        options.margin = chart.inverted ? -3 : 3;\n                    }\n                    chart.scrollbar = navigator.scrollbar = new Scrollbar(chart.renderer, options, chart);\n                    addEvent(navigator.scrollbar, 'changed', function (e) {\n                        const range = navigator.size, to = range * this.to, from = range * this.from;\n                        navigator.hasDragged = navigator.scrollbar.hasDragged;\n                        navigator.render(0, 0, from, to);\n                        if (this.shouldUpdateExtremes(e.DOMType)) {\n                            setTimeout(function () {\n                                navigator.onMouseUp(e);\n                            });\n                        }\n                    });\n                }\n                // Add data events\n                navigator.addBaseSeriesEvents();\n                // Add redraw events\n                navigator.addChartEvents();\n            }\n            /**\n             * Get the union data extremes of the chart - the outer data extremes of the\n             * base X axis and the navigator axis.\n             *\n             * @private\n             * @function Highcharts.Navigator#getUnionExtremes\n             */\n            getUnionExtremes(returnFalseOnNoBaseSeries) {\n                const baseAxis = this.chart.xAxis[0], navAxis = this.xAxis, navAxisOptions = navAxis.options, baseAxisOptions = baseAxis.options;\n                let ret;\n                if (!returnFalseOnNoBaseSeries || baseAxis.dataMin !== null) {\n                    ret = {\n                        dataMin: pick(// #4053\n                        navAxisOptions && navAxisOptions.min, numExt('min', baseAxisOptions.min, baseAxis.dataMin, navAxis.dataMin, navAxis.min)),\n                        dataMax: pick(navAxisOptions && navAxisOptions.max, numExt('max', baseAxisOptions.max, baseAxis.dataMax, navAxis.dataMax, navAxis.max))\n                    };\n                }\n                return ret;\n            }\n            /**\n             * Set the base series and update the navigator series from this. With a bit\n             * of modification we should be able to make this an API method to be called\n             * from the outside\n             *\n             * @private\n             * @function Highcharts.Navigator#setBaseSeries\n             * @param {Highcharts.SeriesOptionsType} [baseSeriesOptions]\n             *        Additional series options for a navigator\n             * @param {boolean} [redraw]\n             *        Whether to redraw after update.\n             */\n            setBaseSeries(baseSeriesOptions, redraw) {\n                const chart = this.chart, baseSeries = this.baseSeries = [];\n                baseSeriesOptions = (baseSeriesOptions ||\n                    chart.options && chart.options.navigator.baseSeries ||\n                    (chart.series.length ?\n                        // Find the first non-navigator series (#8430)\n                        find(chart.series, (s) => (!s.options.isInternal)).index :\n                        0));\n                // Iterate through series and add the ones that should be shown in\n                // navigator.\n                (chart.series || []).forEach((series, i) => {\n                    if (\n                    // Don't include existing nav series\n                    !series.options.isInternal &&\n                        (series.options.showInNavigator ||\n                            (i === baseSeriesOptions ||\n                                series.options.id === baseSeriesOptions) &&\n                                series.options.showInNavigator !== false)) {\n                        baseSeries.push(series);\n                    }\n                });\n                // When run after render, this.xAxis already exists\n                if (this.xAxis && !this.xAxis.navigatorAxis.fake) {\n                    this.updateNavigatorSeries(true, redraw);\n                }\n            }\n            /**\n             * Update series in the navigator from baseSeries, adding new if does not\n             * exist.\n             *\n             * @private\n             * @function Highcharts.Navigator.updateNavigatorSeries\n             */\n            updateNavigatorSeries(addEvents, redraw) {\n                const navigator = this, chart = navigator.chart, baseSeries = navigator.baseSeries, navSeriesMixin = {\n                    enableMouseTracking: false,\n                    index: null,\n                    linkedTo: null,\n                    group: 'nav',\n                    padXAxis: false,\n                    xAxis: 'navigator-x-axis',\n                    yAxis: 'navigator-y-axis',\n                    showInLegend: false,\n                    stacking: void 0,\n                    isInternal: true,\n                    states: {\n                        inactive: {\n                            opacity: 1\n                        }\n                    }\n                }, \n                // Remove navigator series that are no longer in the baseSeries\n                navigatorSeries = navigator.series =\n                    (navigator.series || []).filter((navSeries) => {\n                        const base = navSeries.baseSeries;\n                        if (baseSeries.indexOf(base) < 0) { // Not in array\n                            // If there is still a base series connected to this\n                            // series, remove event handler and reference.\n                            if (base) {\n                                removeEvent(base, 'updatedData', navigator.updatedDataHandler);\n                                delete base.navigatorSeries;\n                            }\n                            // Kill the nav series. It may already have been\n                            // destroyed (#8715).\n                            if (navSeries.chart) {\n                                navSeries.destroy();\n                            }\n                            return false;\n                        }\n                        return true;\n                    });\n                let baseOptions, mergedNavSeriesOptions, chartNavigatorSeriesOptions = navigator.navigatorOptions.series, baseNavigatorOptions;\n                // Go through each base series and merge the options to create new\n                // series\n                if (baseSeries && baseSeries.length) {\n                    baseSeries.forEach((base) => {\n                        const linkedNavSeries = base.navigatorSeries, userNavOptions = extend(\n                        // Grab color and visibility from base as default\n                        {\n                            color: base.color,\n                            visible: base.visible\n                        }, !isArray(chartNavigatorSeriesOptions) ?\n                            chartNavigatorSeriesOptions :\n                            defaultOptions.navigator.series);\n                        // Don't update if the series exists in nav and we have disabled\n                        // adaptToUpdatedData.\n                        if (linkedNavSeries &&\n                            navigator.navigatorOptions.adaptToUpdatedData === false) {\n                            return;\n                        }\n                        navSeriesMixin.name = 'Navigator ' + baseSeries.length;\n                        baseOptions = base.options || {};\n                        baseNavigatorOptions = baseOptions.navigatorOptions || {};\n                        // The dataLabels options are not merged correctly\n                        // if the settings are an array, #13847.\n                        userNavOptions.dataLabels = splat(userNavOptions.dataLabels);\n                        mergedNavSeriesOptions = merge(baseOptions, navSeriesMixin, userNavOptions, baseNavigatorOptions);\n                        // Once nav series type is resolved, pick correct pointRange\n                        mergedNavSeriesOptions.pointRange = pick(\n                        // Stricte set pointRange in options\n                        userNavOptions.pointRange, baseNavigatorOptions.pointRange, \n                        // Fallback to default values, e.g. `null` for column\n                        defaultOptions.plotOptions[mergedNavSeriesOptions.type || 'line'].pointRange);\n                        // Merge data separately. Do a slice to avoid mutating the\n                        // navigator options from base series (#4923).\n                        const navigatorSeriesData = baseNavigatorOptions.data || userNavOptions.data;\n                        navigator.hasNavigatorData =\n                            navigator.hasNavigatorData || !!navigatorSeriesData;\n                        mergedNavSeriesOptions.data =\n                            navigatorSeriesData ||\n                                baseOptions.data && baseOptions.data.slice(0);\n                        // Update or add the series\n                        if (linkedNavSeries && linkedNavSeries.options) {\n                            linkedNavSeries.update(mergedNavSeriesOptions, redraw);\n                        }\n                        else {\n                            base.navigatorSeries = chart.initSeries(mergedNavSeriesOptions);\n                            // Set data on initial run with dataSorting enabled (#20318)\n                            chart.setSortedData();\n                            base.navigatorSeries.baseSeries = base; // Store ref\n                            navigatorSeries.push(base.navigatorSeries);\n                        }\n                    });\n                }\n                // If user has defined data (and no base series) or explicitly defined\n                // navigator.series as an array, we create these series on top of any\n                // base series.\n                if (chartNavigatorSeriesOptions.data &&\n                    !(baseSeries && baseSeries.length) ||\n                    isArray(chartNavigatorSeriesOptions)) {\n                    navigator.hasNavigatorData = false;\n                    // Allow navigator.series to be an array\n                    chartNavigatorSeriesOptions =\n                        splat(chartNavigatorSeriesOptions);\n                    chartNavigatorSeriesOptions.forEach((userSeriesOptions, i) => {\n                        navSeriesMixin.name =\n                            'Navigator ' + (navigatorSeries.length + 1);\n                        mergedNavSeriesOptions = merge(defaultOptions.navigator.series, {\n                            // Since we don't have a base series to pull color from,\n                            // try to fake it by using color from series with same\n                            // index. Otherwise pull from the colors array. We need\n                            // an explicit color as otherwise updates will increment\n                            // color counter and we'll get a new color for each\n                            // update of the nav series.\n                            color: chart.series[i] &&\n                                !chart.series[i].options.isInternal &&\n                                chart.series[i].color ||\n                                chart.options.colors[i] ||\n                                chart.options.colors[0]\n                        }, navSeriesMixin, userSeriesOptions);\n                        mergedNavSeriesOptions.data = userSeriesOptions.data;\n                        if (mergedNavSeriesOptions.data) {\n                            navigator.hasNavigatorData = true;\n                            navigatorSeries.push(chart.initSeries(mergedNavSeriesOptions));\n                        }\n                    });\n                }\n                if (addEvents) {\n                    this.addBaseSeriesEvents();\n                }\n            }\n            /**\n             * Add data events.\n             * For example when main series is updated we need to recalculate extremes\n             *\n             * @private\n             * @function Highcharts.Navigator#addBaseSeriesEvent\n             */\n            addBaseSeriesEvents() {\n                const navigator = this, baseSeries = navigator.baseSeries || [];\n                // Bind modified extremes event to first base's xAxis only.\n                // In event of > 1 base-xAxes, the navigator will ignore those.\n                // Adding this multiple times to the same axis is no problem, as\n                // duplicates should be discarded by the browser.\n                if (baseSeries[0] && baseSeries[0].xAxis) {\n                    baseSeries[0].eventsToUnbind.push(addEvent(baseSeries[0].xAxis, 'foundExtremes', this.modifyBaseAxisExtremes));\n                }\n                baseSeries.forEach((base) => {\n                    // Link base series show/hide to navigator series visibility\n                    base.eventsToUnbind.push(addEvent(base, 'show', function () {\n                        if (this.navigatorSeries) {\n                            this.navigatorSeries.setVisible(true, false);\n                        }\n                    }));\n                    base.eventsToUnbind.push(addEvent(base, 'hide', function () {\n                        if (this.navigatorSeries) {\n                            this.navigatorSeries.setVisible(false, false);\n                        }\n                    }));\n                    // Respond to updated data in the base series, unless explicitly\n                    // not adapting to data changes.\n                    if (this.navigatorOptions.adaptToUpdatedData !== false) {\n                        if (base.xAxis) {\n                            base.eventsToUnbind.push(addEvent(base, 'updatedData', this.updatedDataHandler));\n                        }\n                    }\n                    // Handle series removal\n                    base.eventsToUnbind.push(addEvent(base, 'remove', function () {\n                        if (this.navigatorSeries) {\n                            erase(navigator.series, this.navigatorSeries);\n                            if (defined(this.navigatorSeries.options)) {\n                                this.navigatorSeries.remove(false);\n                            }\n                            delete this.navigatorSeries;\n                        }\n                    }));\n                });\n            }\n            /**\n             * Get minimum from all base series connected to the navigator\n             * @private\n             * @param {number} currentSeriesMin\n             *        Minium from the current series\n             * @return {number}\n             *         Minimum from all series\n             */\n            getBaseSeriesMin(currentSeriesMin) {\n                return this.baseSeries.reduce(function (min, series) {\n                    // (#10193)\n                    return Math.min(min, series.xData && series.xData.length ?\n                        series.xData[0] : min);\n                }, currentSeriesMin);\n            }\n            /**\n             * Set the navigator x axis extremes to reflect the total. The navigator\n             * extremes should always be the extremes of the union of all series in the\n             * chart as well as the navigator series.\n             *\n             * @private\n             * @function Highcharts.Navigator#modifyNavigatorAxisExtremes\n             */\n            modifyNavigatorAxisExtremes() {\n                const xAxis = this.xAxis;\n                if (typeof xAxis.getExtremes !== 'undefined') {\n                    const unionExtremes = this.getUnionExtremes(true);\n                    if (unionExtremes &&\n                        (unionExtremes.dataMin !== xAxis.min ||\n                            unionExtremes.dataMax !== xAxis.max)) {\n                        xAxis.min = unionExtremes.dataMin;\n                        xAxis.max = unionExtremes.dataMax;\n                    }\n                }\n            }\n            /**\n             * Hook to modify the base axis extremes with information from the Navigator\n             *\n             * @private\n             * @function Highcharts.Navigator#modifyBaseAxisExtremes\n             */\n            modifyBaseAxisExtremes() {\n                const baseXAxis = this, navigator = baseXAxis.chart.navigator, baseExtremes = baseXAxis.getExtremes(), baseMin = baseExtremes.min, baseMax = baseExtremes.max, baseDataMin = baseExtremes.dataMin, baseDataMax = baseExtremes.dataMax, range = baseMax - baseMin, stickToMin = navigator.stickToMin, stickToMax = navigator.stickToMax, overscroll = pick(baseXAxis.ordinal?.convertOverscroll(baseXAxis.options.overscroll), 0), navigatorSeries = navigator.series && navigator.series[0], hasSetExtremes = !!baseXAxis.setExtremes, \n                // When the extremes have been set by range selector button, don't\n                // stick to min or max. The range selector buttons will handle the\n                // extremes. (#5489)\n                unmutable = baseXAxis.eventArgs &&\n                    baseXAxis.eventArgs.trigger === 'rangeSelectorButton';\n                let newMax, newMin;\n                if (!unmutable) {\n                    // If the zoomed range is already at the min, move it to the right\n                    // as new data comes in\n                    if (stickToMin) {\n                        newMin = baseDataMin;\n                        newMax = newMin + range;\n                    }\n                    // If the zoomed range is already at the max, move it to the right\n                    // as new data comes in\n                    if (stickToMax) {\n                        newMax = baseDataMax + overscroll;\n                        // If stickToMin is true, the new min value is set above\n                        if (!stickToMin) {\n                            newMin = Math.max(baseDataMin, // don't go below data extremes (#13184)\n                            newMax - range, navigator.getBaseSeriesMin(navigatorSeries && navigatorSeries.xData ?\n                                navigatorSeries.xData[0] :\n                                -Number.MAX_VALUE));\n                        }\n                    }\n                    // Update the extremes\n                    if (hasSetExtremes && (stickToMin || stickToMax)) {\n                        if (isNumber(newMin)) {\n                            baseXAxis.min = baseXAxis.userMin = newMin;\n                            baseXAxis.max = baseXAxis.userMax = newMax;\n                        }\n                    }\n                }\n                // Reset\n                navigator.stickToMin =\n                    navigator.stickToMax = null;\n            }\n            /**\n             * Handler for updated data on the base series. When data is modified, the\n             * navigator series must reflect it. This is called from the Chart.redraw\n             * function before axis and series extremes are computed.\n             *\n             * @private\n             * @function Highcharts.Navigator#updateDataHandler\n             */\n            updatedDataHandler() {\n                const navigator = this.chart.navigator, baseSeries = this, navigatorSeries = this.navigatorSeries, shouldStickToMax = navigator.reversedExtremes ?\n                    Math.round(navigator.zoomedMin) === 0 :\n                    Math.round(navigator.zoomedMax) >= Math.round(navigator.size);\n                // If the scrollbar is scrolled all the way to the right, keep right as\n                // new data comes in, unless user set navigator.stickToMax to false.\n                navigator.stickToMax = pick(this.chart.options.navigator &&\n                    this.chart.options.navigator.stickToMax, shouldStickToMax);\n                navigator.stickToMin = navigator.shouldStickToMin(baseSeries, navigator);\n                // Set the navigator series data to the new data of the base series\n                if (navigatorSeries && !navigator.hasNavigatorData) {\n                    navigatorSeries.options.pointStart = baseSeries.xData[0];\n                    navigatorSeries.setData(baseSeries.options.data, false, null, false); // #5414\n                }\n            }\n            /**\n             * Detect if the zoomed area should stick to the minimum, #14742.\n             *\n             * @private\n             * @function Highcharts.Navigator#shouldStickToMin\n             */\n            shouldStickToMin(baseSeries, navigator) {\n                const xDataMin = navigator.getBaseSeriesMin(baseSeries.xData[0]), xAxis = baseSeries.xAxis, max = xAxis.max, min = xAxis.min, range = xAxis.options.range;\n                let stickToMin = true;\n                if (isNumber(max) && isNumber(min)) {\n                    // If range declared, stick to the minimum only if the range\n                    // is smaller than the data set range.\n                    if (range && max - xDataMin > 0) {\n                        stickToMin = max - xDataMin < range;\n                    }\n                    else {\n                        // If the current axis minimum falls outside the new\n                        // updated dataset, we must adjust.\n                        stickToMin = min <= xDataMin;\n                    }\n                }\n                else {\n                    stickToMin = false; // #15864\n                }\n                return stickToMin;\n            }\n            /**\n             * Add chart events, like redrawing navigator, when chart requires that.\n             *\n             * @private\n             * @function Highcharts.Navigator#addChartEvents\n             */\n            addChartEvents() {\n                if (!this.eventsToUnbind) {\n                    this.eventsToUnbind = [];\n                }\n                this.eventsToUnbind.push(\n                // Move the scrollbar after redraw, like after data updata even if\n                // axes don't redraw\n                addEvent(this.chart, 'redraw', function () {\n                    const navigator = this.navigator, xAxis = navigator && (navigator.baseSeries &&\n                        navigator.baseSeries[0] &&\n                        navigator.baseSeries[0].xAxis ||\n                        this.xAxis[0]); // #5709, #13114\n                    if (xAxis) {\n                        navigator.render(xAxis.min, xAxis.max);\n                    }\n                }), \n                // Make room for the navigator, can be placed around the chart:\n                addEvent(this.chart, 'getMargins', function () {\n                    let chart = this, navigator = chart.navigator, marginName = navigator.opposite ?\n                        'plotTop' : 'marginBottom';\n                    if (chart.inverted) {\n                        marginName = navigator.opposite ?\n                            'marginRight' : 'plotLeft';\n                    }\n                    chart[marginName] =\n                        (chart[marginName] || 0) + (navigator.navigatorEnabled || !chart.inverted ?\n                            navigator.height + navigator.scrollbarHeight :\n                            0) + navigator.navigatorOptions.margin;\n                }), addEvent(Navigator, 'setRange', function (e) {\n                    this.chart.xAxis[0].setExtremes(e.min, e.max, e.redraw, e.animation, e.eventArguments);\n                }));\n            }\n            /**\n             * Destroys allocated elements.\n             *\n             * @private\n             * @function Highcharts.Navigator#destroy\n             */\n            destroy() {\n                // Disconnect events added in addEvents\n                this.removeEvents();\n                if (this.xAxis) {\n                    erase(this.chart.xAxis, this.xAxis);\n                    erase(this.chart.axes, this.xAxis);\n                }\n                if (this.yAxis) {\n                    erase(this.chart.yAxis, this.yAxis);\n                    erase(this.chart.axes, this.yAxis);\n                }\n                // Destroy series\n                (this.series || []).forEach((s) => {\n                    if (s.destroy) {\n                        s.destroy();\n                    }\n                });\n                // Destroy properties\n                [\n                    'series', 'xAxis', 'yAxis', 'shades', 'outline', 'scrollbarTrack',\n                    'scrollbarRifles', 'scrollbarGroup', 'scrollbar', 'navigatorGroup',\n                    'rendered'\n                ].forEach((prop) => {\n                    if (this[prop] && this[prop].destroy) {\n                        this[prop].destroy();\n                    }\n                    this[prop] = null;\n                });\n                // Destroy elements in collection\n                [this.handles].forEach((coll) => {\n                    destroyObjectProperties(coll);\n                });\n            }\n        }\n        /* *\n         *\n         *  Default Export\n         *\n         * */\n\n        return Navigator;\n    });\n    _registerModule(_modules, 'Stock/Navigator/StandaloneNavigatorDefaults.js', [], function () {\n        /* *\n         *\n         *  (c) 2010-2024 Mateusz Bernacik\n         *\n         *  License: www.highcharts.com/license\n         *\n         *  !!!!!!! SOURCE GETS TRANSPILED BY TYPESCRIPT. EDIT TS FILE ONLY. !!!!!!!\n         *\n         * */\n        /* *\n         *\n         *  Constants\n         *\n         * */\n        const standaloneNavigatorDefaults = {\n            chart: {\n                height: 70,\n                margin: [0, 5, 0, 5]\n            },\n            exporting: {\n                enabled: false\n            },\n            legend: {\n                enabled: false\n            },\n            navigator: {\n                enabled: false\n            },\n            plotOptions: {\n                series: {\n                    states: {\n                        hover: {\n                            enabled: false\n                        }\n                    },\n                    marker: {\n                        enabled: false\n                    }\n                }\n            },\n            scrollbar: {\n                enabled: false\n            },\n            title: {\n                text: ''\n            },\n            tooltip: {\n                enabled: false\n            },\n            xAxis: {\n                visible: false\n            },\n            yAxis: {\n                height: 0,\n                visible: false\n            }\n        };\n        /* *\n         *\n         *  Default Export\n         *\n         * */\n\n        return standaloneNavigatorDefaults;\n    });\n    _registerModule(_modules, 'Stock/Navigator/StandaloneNavigator.js', [_modules['Core/Chart/Chart.js'], _modules['Stock/Navigator/Navigator.js'], _modules['Core/Globals.js'], _modules['Core/Utilities.js'], _modules['Core/Axis/Axis.js'], _modules['Stock/Navigator/StandaloneNavigatorDefaults.js']], function (Chart, Navigator, G, U, Axis, standaloneNavigatorDefaults) {\n        /* *\n         *\n         *  (c) 2010-2024 Mateusz Bernacik\n         *\n         *  License: www.highcharts.com/license\n         *\n         *  !!!!!!! SOURCE GETS TRANSPILED BY TYPESCRIPT. EDIT TS FILE ONLY. !!!!!!!\n         *\n         * */\n        const { merge, addEvent, fireEvent, pick } = U;\n        /* *\n         *\n         *  Class\n         *\n         * */\n        /**\n         * The StandaloneNavigator class. The StandaloneNavigator class allows for\n         * creating a standalone navigator component that synchronizes the extremes\n         * across multiple bound charts.\n         *\n         * @class\n         * @name Highcharts.StandaloneNavigator\n         *\n         * @param {string|Highcharts.HTMLDOMElement} [renderTo]\n         * The DOM element to render to, or its id.\n         *\n         * @param {StandaloneNavigatorOptions} userOptions\n         * The standalone navigator options.\n         */\n        class StandaloneNavigator {\n            /* *\n             *\n             *  Static Functions\n             *\n             * */\n            /**\n             * Factory function for standalone navigator.\n             *\n             * @function Highcharts.navigator\n             *\n             * @param {string|Highcharts.HTMLDOMElement} [renderTo]\n             * The DOM element to render to, or its id.\n             *\n             * @param {StandaloneNavigatorOptions} options\n             * The standalone navigator options with chart-like structure.\n             *\n             * Returns the navigator object.\n             */\n            static navigator(renderTo, options) {\n                const nav = new StandaloneNavigator(renderTo, options);\n                if (!G.navigators) {\n                    G.navigators = [nav];\n                }\n                else {\n                    G.navigators.push(nav);\n                }\n                return nav;\n            }\n            /* *\n             *\n             *  Constructor\n             *\n             * */\n            constructor(element, userOptions) {\n                this.boundAxes = [];\n                this.userOptions = userOptions;\n                this.chartOptions = merge(G.getOptions(), standaloneNavigatorDefaults, { navigator: userOptions });\n                const chart = new Chart(element, this.chartOptions);\n                chart.options = merge(chart.options, { navigator: { enabled: true }, scrollbar: { enabled: true } });\n                if (this.chartOptions.navigator && this.chartOptions.scrollbar) {\n                    this.chartOptions.navigator.enabled = true;\n                    this.chartOptions.scrollbar.enabled = true;\n                }\n                this.navigator = new Navigator(chart);\n                chart.navigator = this.navigator;\n                this.initNavigator();\n            }\n            /**\n             * Binds an axis to the standalone navigator,\n             * allowing the navigator to control the axis' range.\n             *\n             * @sample stock/standalone-navigator/bind/\n             *         Bind chart with a button\n             *\n             * @function Highcharts.StandaloneNavigator#bind\n             *\n             * @param {Axis | Chart} axisOrChart\n             *        The Axis or Chart to bind to the navigator.\n             *\n             * @param {boolean} [twoWay=true]\n             *        Enables two-way binding between the navigator and the axis/chart.\n             *        When true, changes in the navigator's range will update the axis\n             *        and vice versa. When false, changes in the navigator's range will\n             *        be reflected in the axis, but changes in the axis ranges won't be\n             *        reflected on the navigator.\n             */\n            bind(axisOrChart, twoWay = true) {\n                const nav = this;\n                // If the chart is passed, bind the first xAxis\n                const axis = (axisOrChart instanceof Chart) ?\n                    axisOrChart.xAxis[0] :\n                    axisOrChart;\n                if (!(axis instanceof Axis)) {\n                    return;\n                }\n                const { min, max } = this.navigator.xAxis, removeEventCallbacks = [];\n                if (twoWay) {\n                    const removeSetExtremesEvent = addEvent(axis, 'setExtremes', (e) => {\n                        if (e.trigger === 'pan' ||\n                            e.trigger === 'zoom' ||\n                            e.trigger === 'mouseWheelZoom') {\n                            nav.setRange(e.min, e.max, true, e.trigger !== 'pan', { trigger: axis });\n                        }\n                    });\n                    removeEventCallbacks.push(removeSetExtremesEvent);\n                }\n                const removeSetRangeEvent = addEvent(this.navigator, 'setRange', (e) => {\n                    axis.setExtremes(e.min, e.max, e.redraw, e.animation);\n                });\n                removeEventCallbacks.push(removeSetRangeEvent);\n                let boundAxis = this.boundAxes.filter(function (boundAxis) {\n                    return boundAxis.axis === axis;\n                })[0];\n                if (!boundAxis) {\n                    boundAxis = { axis, callbacks: [] };\n                    this.boundAxes.push(boundAxis);\n                }\n                boundAxis.callbacks = removeEventCallbacks;\n                // Show axis' series in navigator based on showInNavigator property\n                axis.series.forEach((series) => {\n                    if (series.options.showInNavigator) {\n                        nav.addSeries(series.options);\n                    }\n                });\n                // Set extremes to match the navigator's extremes\n                axis.setExtremes(min, max);\n                // Unbind the axis before it's destroyed\n                addEvent(axis, 'destroy', (e) => {\n                    if (!e.keepEvents) {\n                        this.unbind(axis);\n                    }\n                });\n            }\n            /**\n             * Unbinds a single axis or all bound axes from the standalone navigator.\n             *\n             * @sample stock/standalone-navigator/unbind/\n             *         Unbind chart with a button\n             *\n             * @function Highcharts.StandaloneNavigator#unbind\n             *\n             * @param {Chart | Axis | undefined} axisOrChart\n             *        Passing a Chart object unbinds the first X axis of the chart,\n             *        an Axis object unbinds that specific axis,\n             *        and undefined unbinds all axes bound to the navigator.\n             */\n            unbind(axisOrChart) {\n                // If no axis or chart is provided, unbind all bound axes\n                if (!axisOrChart) {\n                    this.boundAxes.forEach(({ callbacks }) => {\n                        callbacks.forEach((removeCallback) => removeCallback());\n                    });\n                    this.boundAxes.length = 0;\n                    return;\n                }\n                const axis = (axisOrChart instanceof Axis) ?\n                    axisOrChart :\n                    axisOrChart.xAxis[0];\n                for (let i = this.boundAxes.length - 1; i >= 0; i--) {\n                    if (this.boundAxes[i].axis === axis) {\n                        this.boundAxes[i].callbacks.forEach((callback) => callback());\n                        this.boundAxes.splice(i, 1);\n                    }\n                }\n            }\n            /**\n             * Destroys allocated standalone navigator elements.\n             *\n             * @function Highcharts.StandaloneNavigator#destroy\n             */\n            destroy() {\n                // Disconnect events\n                this.boundAxes.forEach(({ callbacks }) => {\n                    callbacks.forEach((removeCallback) => removeCallback());\n                });\n                this.boundAxes.length = 0;\n                this.navigator.destroy();\n                this.navigator.chart.destroy();\n            }\n            /**\n             * Updates the standalone navigator's options with a new set of user\n             * options.\n             *\n             * @sample stock/standalone-navigator/update/\n             *         Bind chart with a button\n             *\n             * @function Highcharts.StandaloneNavigator#update\n             *\n             * @param  {StandaloneNavigatorOptions} newOptions\n             *         Updates the standalone navigator's options with new user options.\n             *\n             * @param  {boolean | undefined} redraw\n             *         Whether to redraw the standalone navigator. By default, if not\n             *         specified, the standalone navigator will be redrawn.\n             */\n            update(newOptions, redraw) {\n                this.chartOptions = merge(this.chartOptions, { navigator: newOptions });\n                this.navigator.chart.update(this.chartOptions, redraw);\n            }\n            /**\n             * Redraws the standalone navigator.\n             *\n             * @function Highcharts.StandaloneNavigator#redraw\n             */\n            redraw() {\n                this.navigator.chart.redraw();\n            }\n            /**\n             * Adds a series to the standalone navigator.\n             *\n             * @private\n             *\n             * @param {SeriesOptions} seriesOptions\n             *        Options for the series to be added to the navigator.\n             */\n            addSeries(seriesOptions) {\n                this.navigator.chart.addSeries(merge(seriesOptions, { showInNavigator: pick(seriesOptions.showInNavigator, true) }));\n                this.navigator.setBaseSeries();\n            }\n            /**\n             * Initialize the standalone navigator.\n             *\n             * @private\n             */\n            initNavigator() {\n                const nav = this.navigator;\n                nav.top = 1;\n                nav.xAxis.setScale();\n                nav.yAxis.setScale();\n                nav.xAxis.render();\n                nav.yAxis.render();\n                nav.series?.forEach((s) => {\n                    s.translate();\n                    s.render();\n                    s.redraw();\n                });\n                const { min, max } = this.getInitialExtremes();\n                nav.chart.xAxis[0].userMin = min;\n                nav.chart.xAxis[0].userMax = max;\n                nav.render(min, max);\n            }\n            /**\n             * Get the current range of the standalone navigator.\n             *\n             * @sample stock/standalone-navigator/getrange/\n             *         Report the standalone navigator's range by clicking on a button\n             *\n             * @function Highcharts.StandaloneNavigator#getRange\n             *\n             * @return {Highcharts.ExtremesObject}\n             *         The current range of the standalone navigator.\n             */\n            getRange() {\n                const { min, max } = this.navigator.chart.xAxis[0].getExtremes(), { userMin, userMax, min: dataMin, max: dataMax } = this.navigator.xAxis.getExtremes();\n                return {\n                    min: pick(min, dataMin),\n                    max: pick(max, dataMax),\n                    dataMin,\n                    dataMax,\n                    userMin,\n                    userMax\n                };\n            }\n            /**\n             * Set the range of the standalone navigator.\n             *\n             * @sample stock/standalone-navigator/setrange/\n             *         Set range from a button\n             *\n             * @function Highcharts.StandaloneNavigator#setRange\n             *\n             * @param {number | undefined} min\n             *        The new minimum value.\n             *\n             * @param {number | undefined} max\n             *        The new maximum value.\n             *\n             * @emits Highcharts.StandaloneNavigator#event:setRange\n             */\n            setRange(min, max, redraw, animation, eventArguments) {\n                fireEvent(this.navigator, 'setRange', {\n                    min,\n                    max,\n                    redraw,\n                    animation,\n                    eventArguments: merge(eventArguments, { trigger: 'navigator' })\n                });\n            }\n            /**\n             * Get the initial, options based extremes for the standalone navigator.\n             *\n             * @private\n             *\n             * @return {{ min: number, max: number }}\n             *         The initial minimum and maximum extremes values.\n             */\n            getInitialExtremes() {\n                const { min, max } = this.navigator.xAxis.getExtremes();\n                return {\n                    min: min,\n                    max: max\n                };\n            }\n        }\n        /* *\n         *\n         *  API Declarations\n         *\n         * */\n        /**\n         * Standalone Navigator options.\n         *\n         * @interface Highcharts.StandaloneNavigatorOptions\n         */ /**\n        */\n        ''; // detach doclets above\n\n        return StandaloneNavigator;\n    });\n    _registerModule(_modules, 'masters/modules/navigator.src.js', [_modules['Core/Globals.js'], _modules['Stock/Navigator/StandaloneNavigator.js'], _modules['Stock/Navigator/NavigatorComposition.js']], function (Highcharts, StandaloneNavigator, NavigatorComposition) {\n\n        const G = Highcharts;\n        G.StandaloneNavigator = G.StandaloneNavigator || StandaloneNavigator;\n        NavigatorComposition.compose(G.Chart, G.Axis, G.Series);\n        G.navigator = StandaloneNavigator.navigator;\n\n    });\n}));"],"names":["factory","module","exports","define","amd","Highcharts","undefined","_modules","_registerModule","obj","path","args","fn","hasOwnProperty","apply","CustomEvent","window","dispatchEvent","detail","H","U","NavigatorConstructor","isTouchDevice","addEvent","merge","pick","composedMembers","onChartAfterAddSeries","navigator","setBaseSeries","onChartAfterSetChartSize","legendOptions","xAxis","yAxis","legend","options","scrollbarHeight","scrollButtonSize","inverted","left","opposite","chartWidth","height","spacing","top","plotTop","plotLeft","navigatorOptions","chartHeight","scrollbar","margin","rangeSelector","extraBottomMargin","getHeight","verticalAlign","layout","enabled","floating","legendHeight","titleOffset","setAxisSize","onChartAfterUpdate","event","scroller","redraw","animation","onChartBeforeRender","onChartBeforeShowResetZoom","chartOptions","zooming","type","pinchType","onChartCallback","chart","extremes","getExtremes","render","min","max","onChartUpdate","e","scrollbarOptions","compose","ChartClass","NavigatorClass","pushUnique","chartProto","prototype","callbacks","push","correctFloat","defined","isNumber","onAxisInit","axis","navigatorAxis","NavigatorAxisAdditions","onAxisSetExtremes","zoomed","zoomType","isXAxis","trigger","range","previousZoom","preventDefault","AxisClass","keepProps","includes","constructor","destroy","toFixedRange","pxMin","pxMax","fixedMin","fixedMax","overscroll","ordinal","convertOverscroll","newMin","translate","horiz","newMax","fixedRange","halfPointRange","pointRange","dataMin","dataMax","maxWithOverscroll","Color","SeriesRegistry","parse","color","seriesTypes","maskInside","handles","width","symbols","lineWidth","backgroundColor","borderColor","maskFill","setOpacity","get","outlineColor","outlineWidth","series","areaspline","fillOpacity","compare","sonification","dataGrouping","approximation","groupPixelWidth","firstAnchor","anchor","lastAnchor","units","dataLabels","zIndex","id","className","lineColor","marker","threshold","tickLength","gridLineColor","gridLineWidth","tickPixelInterval","labels","align","style","fontSize","opacity","textOutline","x","y","crosshair","startOnTick","endOnTick","minPadding","maxPadding","title","text","tickWidth","_x","_y","halfWidth","markerPosition","Math","round","setFixedRange","D","NavigatorDefaults","NavigatorSymbols","RendererRegistry","StockUtilities","setOptions","composed","getRendererType","extend","onSeriesAfterUpdate","isInternal","SeriesClass","ScrollbarAxis","Scrollbar","axisMin","axisMax","scrollMin","Infinity","scrollMax","onAxisAfterGetOffset","index","scrollbarsOffsets","axisOffset","size","onAxisAfterInit","vertical","renderer","to","from","unitedMin","unitedMax","reversed","shouldUpdateExtremes","DOMType","animate","setExtremes","setRange","onAxisAfterRender","offsetsIndex","offset","axisTitleMargin","axisMargin","position","xPosition","isNaN","ScrollbarClass","barBorderRadius","buttonBorderRadius","buttonsEnabled","liveRedraw","minWidth","step","barBackgroundColor","barBorderWidth","barBorderColor","buttonArrowColor","buttonBackgroundColor","buttonBorderColor","buttonBorderWidth","rifleColor","trackBackgroundColor","trackBorderColor","trackBorderRadius","trackBorderWidth","ScrollbarDefaults","defaultOptions","destroyObjectProperties","fireEvent","removeEvent","swapXY","forEach","seg","temp","len","length","i","_events","chartX","chartY","scrollbarButtons","scrollbarLeft","scrollbarStrokeWidth","scrollbarTop","init","addEvents","buttonsOrder","buttons","bar","scrollbarGroup","element","track","mouseDownHandler","bind","mouseMoveHandler","mouseUpHandler","buttonToMinClick","buttonToMaxClick","trackClick","ownerDocument","updatePosition","DOMEvent","cursorToScrollbarPosition","normalizedEvent","minWidthDifference","calculatedWidth","xOffset","barWidth","yOffset","removeEvents","prop","drawScrollbarButton","group","g","add","rect","addClass","styledMode","attr","stroke","fill","crisp","r","strokeWidth","arrow","userOptions","pointer","normalize","mousePosition","initPositions","grabbedCenter","change","direction","touches","chartPosition","hasDragged","method","rendered","show","translateX","translateY","hide","scrollbarRifles","fromPX","newSize","fullWidth","toPX","ceil","newPos","floor","newRiflesPos","showFull","eventType","svg","boosted","update","Axis","ChartNavigatorComposition","NavigatorComposition","clamp","erase","find","isArray","splat","numExt","extreme","numbers","filter","call","Navigator","drawHandle","verb","parseInt","drawOutline","zoomedMin","zoomedMax","outline","halfOutline","outlineCorrection","navigatorSize","navigatorTop","lineTop","lineBtm","verticalMin","d","drawMasks","navigatorHeight","shades","shade","renderElements","mouseCursor","cursor","navigatorGroup","visibility","hasMask","css","handlesOptions","symbol","rotation","rotationOriginX","rotationOriginY","baseSeries","navigatorSeries","scrollbarXAxis","fake","navigatorEnabled","minRange","maxRange","navigatorWidth","plotWidth","plotHeight","toPixels","abs","toValue","currentRange","grabbedLeft","grabbedRight","fixedWidth","addMouseEvents","container","eventsToUnbind","onMouseMove","onMouseUp","getPartsEvents","renderTo","concat","modifyNavigatorAxisExtremes","eventName","events","name","navigatorItem","shadesMousedown","navigatorPosition","ext","dragOffset","reversedExtremes","getUnionExtremes","eventArguments","handlesMousedown","baseXAxis","reverse","otherHandlePos","fixedExtreme","pageX","setTimeout","unionExtremes","triggerOp","Object","keys","unbind","removeBaseSeriesEvents","adaptToUpdatedData","updatedDataHandler","modifyBaseAxisExtremes","scrollbarEnabled","Boolean","xAxisIndex","yAxisIndex","baseXaxis","isDirtyBox","breaks","keepOrdinalPadding","zoomEnabled","offsets","alignTicks","data","updateNavigatorSeries","unbindRedraw","value","scrollTrackWidth","valueRange","addBaseSeriesEvents","addChartEvents","returnFalseOnNoBaseSeries","ret","baseAxis","navAxis","navAxisOptions","baseAxisOptions","baseSeriesOptions","s","showInNavigator","navSeriesMixin","enableMouseTracking","linkedTo","padXAxis","showInLegend","stacking","states","inactive","navSeries","base","indexOf","baseOptions","mergedNavSeriesOptions","chartNavigatorSeriesOptions","baseNavigatorOptions","linkedNavSeries","userNavOptions","visible","plotOptions","navigatorSeriesData","hasNavigatorData","slice","initSeries","setSortedData","userSeriesOptions","colors","setVisible","remove","getBaseSeriesMin","currentSeriesMin","reduce","xData","baseExtremes","baseMin","baseMax","baseDataMin","baseDataMax","stickToMin","stickToMax","hasSetExtremes","eventArgs","Number","MAX_VALUE","userMin","userMax","shouldStickToMax","shouldStickToMin","pointStart","setData","xDataMin","marginName","axes","coll","exporting","hover","tooltip","Chart","G","standaloneNavigatorDefaults","StandaloneNavigator","nav","navigators","boundAxes","getOptions","initNavigator","axisOrChart","twoWay","removeEventCallbacks","removeSetExtremesEvent","removeSetRangeEvent","boundAxis","addSeries","keepEvents","removeCallback","callback","splice","newOptions","seriesOptions","setScale","getInitialExtremes","getRange","Series"],"mappings":"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"}