{"version":3,"sources":["<anon>"],"sourcesContent":["/**\n * @license Highstock JS v11.4.0 (2024-03-04)\n *\n * Highcharts Stock as a plugin for Highcharts\n *\n * (c) 2010-2024 Torstein Honsi\n *\n * License: www.highcharts.com/license\n */\n(function (factory) {\n    if (typeof module === 'object' && module.exports) {\n        factory['default'] = factory;\n        module.exports = factory;\n    } else if (typeof define === 'function' && define.amd) {\n        define('highcharts/modules/stock', ['highcharts'], function (Highcharts) {\n            factory(Highcharts);\n            factory.Highcharts = Highcharts;\n            return factory;\n        });\n    } else {\n        factory(typeof Highcharts !== 'undefined' ? Highcharts : undefined);\n    }\n}(function (Highcharts) {\n    'use strict';\n    var _modules = Highcharts ? Highcharts._modules : {};\n    function _registerModule(obj, path, args, fn) {\n        if (!obj.hasOwnProperty(path)) {\n            obj[path] = fn.apply(null, args);\n\n            if (typeof CustomEvent === 'function') {\n                window.dispatchEvent(new CustomEvent(\n                    'HighchartsModuleLoaded',\n                    { detail: { path: path, module: obj[path] } }\n                ));\n            }\n        }\n    }\n    _registerModule(_modules, 'Series/DataModifyComposition.js', [_modules['Core/Axis/Axis.js'], _modules['Core/Series/Point.js'], _modules['Core/Series/Series.js'], _modules['Core/Utilities.js']], function (Axis, Point, Series, U) {\n        /* *\n         *\n         *  (c) 2010-2024 Torstein Honsi\n         *\n         *  License: www.highcharts.com/license\n         *\n         *  !!!!!!! SOURCE GETS TRANSPILED BY TYPESCRIPT. EDIT TS FILE ONLY. !!!!!!!\n         *\n         * */\n        const { tooltipFormatter: pointTooltipFormatter } = Point.prototype;\n        const { addEvent, arrayMax, arrayMin, correctFloat, defined, isArray, isNumber, isString, pick } = U;\n        /* *\n         *\n         *  Composition\n         *\n         * */\n        var DataModifyComposition;\n        (function (DataModifyComposition) {\n            /* *\n             *\n             *  Declarations\n             *\n             * */\n            /* *\n             *\n             *  Functions\n             *\n             * */\n            /**\n             * Extends the series, axis and point classes with\n             * compare and cumulative support.\n             *\n             * @private\n             *\n             * @param SeriesClass\n             * Series class to use.\n             *\n             * @param AxisClass\n             * Axis class to extend.\n             *\n             * @param PointClass\n             * Point class to use.\n             */\n            function compose(SeriesClass, AxisClass, PointClass) {\n                const axisProto = AxisClass.prototype, pointProto = PointClass.prototype, seriesProto = SeriesClass.prototype;\n                if (!seriesProto.setCompare) {\n                    seriesProto.setCompare = seriesSetCompare;\n                    seriesProto.setCumulative = seriesSetCumulative;\n                    addEvent(SeriesClass, 'afterInit', afterInit);\n                    addEvent(SeriesClass, 'afterGetExtremes', afterGetExtremes);\n                    addEvent(SeriesClass, 'afterProcessData', afterProcessData);\n                }\n                if (!axisProto.setCompare) {\n                    axisProto.setCompare = axisSetCompare;\n                    axisProto.setModifier = setModifier;\n                    axisProto.setCumulative = axisSetCumulative;\n                    pointProto.tooltipFormatter = tooltipFormatter;\n                }\n                return SeriesClass;\n            }\n            DataModifyComposition.compose = compose;\n            /* ********************************************************************** *\n             *  Start shared compare and cumulative logic                             *\n             * ********************************************************************** */\n            /**\n             * Shared code for the axis.setCompare() and the axis.setCumulative()\n             * methods. Inits the 'compare' or the 'cumulative' mode.\n             * @private\n             */\n            function setModifier(mode, modeState, redraw) {\n                if (!this.isXAxis) {\n                    this.series.forEach(function (series) {\n                        if (mode === 'compare' &&\n                            typeof modeState !== 'boolean') {\n                            series.setCompare(modeState, false);\n                        }\n                        else if (mode === 'cumulative' &&\n                            !isString(modeState)) {\n                            series.setCumulative(modeState, false);\n                        }\n                    });\n                    if (pick(redraw, true)) {\n                        this.chart.redraw();\n                    }\n                }\n            }\n            /**\n             * Extend the tooltip formatter by adding support for the point.change\n             * variable as well as the changeDecimals option.\n             *\n             * @ignore\n             * @function Highcharts.Point#tooltipFormatter\n             *\n             * @param {string} pointFormat\n             */\n            function tooltipFormatter(pointFormat) {\n                const point = this, { numberFormatter } = point.series.chart, replace = function (value) {\n                    pointFormat = pointFormat.replace('{point.' + value + '}', (point[value] > 0 && value === 'change' ? '+' : '') +\n                        numberFormatter(point[value], pick(point.series.tooltipOptions.changeDecimals, 2)));\n                };\n                if (defined(point.change)) {\n                    replace('change');\n                }\n                if (defined(point.cumulativeSum)) {\n                    replace('cumulativeSum');\n                }\n                return pointTooltipFormatter.apply(this, [pointFormat]);\n            }\n            /**\n             * Extend series.init by adding a methods to modify the y values used\n             * for plotting on the y axis. For compare mode, this method is called both\n             * from the axis when finding dataMin and dataMax,\n             * and from the series.translate method.\n             *\n             * @ignore\n             * @function Highcharts.Series#init\n             */\n            function afterInit() {\n                const compare = this.options.compare;\n                let dataModify;\n                if (compare === 'percent' ||\n                    compare === 'value' ||\n                    this.options.cumulative) {\n                    dataModify = new Additions(this);\n                    if (compare === 'percent' || compare === 'value') {\n                        // Set comparison mode\n                        dataModify.initCompare(compare);\n                    }\n                    else {\n                        // Set Cumulative Sum mode\n                        dataModify.initCumulative();\n                    }\n                }\n                this.dataModify = dataModify;\n            }\n            /**\n             * Adjust the extremes (compare and cumulative modify the data).\n             * @private\n             */\n            function afterGetExtremes(e) {\n                const dataExtremes = e.dataExtremes, activeYData = dataExtremes.activeYData;\n                if (this.dataModify && dataExtremes) {\n                    let extremes;\n                    if (this.options.compare) {\n                        extremes = [\n                            this.dataModify.modifyValue(dataExtremes.dataMin),\n                            this.dataModify.modifyValue(dataExtremes.dataMax)\n                        ];\n                    }\n                    else if (this.options.cumulative &&\n                        isArray(activeYData) &&\n                        // If only one y visible, sum doesn't change\n                        // so no need to change extremes\n                        activeYData.length >= 2) {\n                        extremes = Additions.getCumulativeExtremes(activeYData);\n                    }\n                    if (extremes) {\n                        dataExtremes.dataMin = arrayMin(extremes);\n                        dataExtremes.dataMax = arrayMax(extremes);\n                    }\n                }\n            }\n            /* ********************************************************************** *\n             *  End shared compare and cumulative logic                               *\n             * ********************************************************************** */\n            /* ********************************************************************** *\n             *  Start value compare logic                                             *\n             * ********************************************************************** */\n            /**\n             * Highcharts Stock only. Set the\n             * [compare](https://api.highcharts.com/highstock/plotOptions.series.compare)\n             * mode of the series after render time.\n             * In most cases it is more useful running\n             * {@link Axis#setCompare} on the X axis to update all its series.\n             *\n             * @function Highcharts.Series#setCompare\n             *\n             * @param {string|null} [compare]\n             *        Can be one of `undefined` (default), `null`, `\"percent\"`\n             *        or `\"value\"`.\n             *\n             * @param {boolean} [redraw=true]\n             *        Whether to redraw the chart or to wait for a later call to\n             *        {@link Chart#redraw}.\n             */\n            function seriesSetCompare(compare, redraw) {\n                // Survive to export, #5485 (and for options generally)\n                this.options.compare = this.userOptions.compare = compare;\n                // Fire series.init() that will set or delete series.dataModify\n                this.update({}, pick(redraw, true));\n                if (this.dataModify && (compare === 'value' || compare === 'percent')) {\n                    this.dataModify.initCompare(compare);\n                }\n                else {\n                    // When disabling, clear the points\n                    this.points.forEach((point) => {\n                        delete point.change;\n                    });\n                }\n            }\n            /**\n             * Extend series.processData by finding the first y value in the plot area,\n             * used for comparing the following values\n             *\n             * @ignore\n             * @function Highcharts.Series#processData\n             */\n            function afterProcessData() {\n                const series = this;\n                if (series.xAxis && // not pies\n                    series.processedYData &&\n                    series.dataModify) {\n                    const processedXData = series.processedXData, processedYData = series.processedYData, length = processedYData.length, compareStart = series.options.compareStart === true ? 0 : 1;\n                    let keyIndex = -1, i;\n                    // For series with more than one value (range, OHLC etc), compare\n                    // against close or the pointValKey (#4922, #3112, #9854)\n                    if (series.pointArrayMap) {\n                        keyIndex = series.pointArrayMap.indexOf(series.options.pointValKey || series.pointValKey || 'y');\n                    }\n                    // find the first value for comparison\n                    for (i = 0; i < length - compareStart; i++) {\n                        const compareValue = processedYData[i] && keyIndex > -1 ?\n                            processedYData[i][keyIndex] : processedYData[i];\n                        if (isNumber(compareValue) &&\n                            compareValue !== 0 &&\n                            processedXData[i + compareStart] >= (series.xAxis.min || 0)) {\n                            series.dataModify.compareValue = compareValue;\n                            break;\n                        }\n                    }\n                }\n            }\n            /**\n             * Highcharts Stock only. Set the compare mode on all series\n             * belonging to a Y axis.\n             *\n             * @see [plotOptions.series.compare](https://api.highcharts.com/highstock/plotOptions.series.compare)\n             *\n             * @sample stock/members/axis-setcompare/\n             *         Set compare\n             *\n             * @function Highcharts.Axis#setCompare\n             *\n             * @param {string|null} [compare]\n             *        The compare mode. Can be one of `undefined` (default), `null`,\n             *        `\"value\"` or `\"percent\"`.\n             *\n             * @param {boolean} [redraw=true]\n             *        Whether to redraw the chart or to wait for a later call to\n             *        {@link Chart#redraw}.\n             */\n            function axisSetCompare(compare, redraw) {\n                this.setModifier('compare', compare, redraw);\n            }\n            /* ********************************************************************** *\n             *  End value compare logic                                               *\n             * ********************************************************************** */\n            /* ********************************************************************** *\n             *  Start Cumulative Sum logic, author: Rafal Sebestjanski                *\n             * ********************************************************************** */\n            /**\n             * Highcharts Stock only. Set the\n             * [cumulative](https://api.highcharts.com/highstock/plotOptions.series.cumulative)\n             * mode of the series after render time.\n             * In most cases it is more useful running\n             * {@link Axis#setCumulative} on the Y axis to update all its series.\n             *\n             * @function Highcharts.Series#setCumulative\n             *\n             * @param {boolean} [cumulative=false]\n             *        Either enable or disable Cumulative Sum mode.\n             *        Can be one of `false` (default) or `true`.\n             *\n             * @param {boolean} [redraw=true]\n             *        Whether to redraw the chart or to wait for a later call to\n             *        {@link Chart#redraw}.\n             */\n            function seriesSetCumulative(cumulative, redraw) {\n                // Set default value to false\n                cumulative = pick(cumulative, false);\n                // Survive to export, #5485 (and for options generally)\n                this.options.cumulative = this.userOptions.cumulative = cumulative;\n                // Fire series.init() that will set or delete series.dataModify\n                this.update({}, pick(redraw, true));\n                // If should, turn on the Cumulative Sum mode\n                if (this.dataModify) {\n                    this.dataModify.initCumulative();\n                }\n                else {\n                    // When disabling, clear the points\n                    this.points.forEach((point) => {\n                        delete point.cumulativeSum;\n                    });\n                }\n            }\n            /**\n             * Highcharts Stock only. Set the cumulative mode on all series\n             * belonging to a Y axis.\n             *\n             * @see [plotOptions.series.cumulative](https://api.highcharts.com/highstock/plotOptions.series.cumulative)\n             *\n             * @sample stock/members/axis-setcumulative/\n             *         Set cumulative\n             *\n             * @function Highcharts.Axis#setCumulative\n             *\n             * @param {boolean} [cumulative]\n             *        Whether to disable or enable the cumulative mode.\n             *        Can be one of `undefined` (default, treated as `false`),\n             *        `false` or `true`.\n             *\n             * @param {boolean} [redraw=true]\n             *        Whether to redraw the chart or to wait for a later call to\n             *        {@link Chart#redraw}.\n             */\n            function axisSetCumulative(cumulative, redraw) {\n                this.setModifier('cumulative', cumulative, redraw);\n            }\n            /* *\n             *\n             *  Classes\n             *\n             * */\n            /**\n             * @private\n             */\n            class Additions {\n                /* *\n                 *\n                 *  Constructors\n                 *\n                 * */\n                /**\n                 * @private\n                 */\n                constructor(series) {\n                    this.series = series;\n                }\n                /* *\n                *\n                *  Functions\n                *\n                * */\n                /**\n                 * @private\n                 */\n                modifyValue() {\n                    return 0;\n                }\n                /**\n                 * @ignore\n                 * @function Highcharts.Series#getCumulativeExtremes\n                 *\n                 * @param {Array} [activeYData]\n                 *        An array cointaining all the points' y values\n                 *        in a visible range.\n                 */\n                static getCumulativeExtremes(activeYData) {\n                    let cumulativeDataMin = Infinity, cumulativeDataMax = -Infinity;\n                    activeYData.reduce((prev, cur) => {\n                        const sum = prev + cur;\n                        cumulativeDataMin = Math.min(cumulativeDataMin, sum, prev);\n                        cumulativeDataMax = Math.max(cumulativeDataMax, sum, prev);\n                        return sum;\n                    });\n                    return [cumulativeDataMin, cumulativeDataMax];\n                }\n                /**\n                 * @ignore\n                 * @function Highcharts.Series#initCompare\n                 *\n                 * @param {string} [compare]\n                 *        Can be one of `\"percent\"` or `\"value\"`.\n                 */\n                initCompare(compare) {\n                    // Set the modifyValue method\n                    this.modifyValue = function (value, index) {\n                        if (value === null) {\n                            value = 0;\n                        }\n                        const compareValue = this.compareValue;\n                        if (typeof value !== 'undefined' &&\n                            typeof compareValue !== 'undefined') { // #2601, #5814\n                            // Get the modified value\n                            if (compare === 'value') {\n                                value -= compareValue;\n                                // Compare percent\n                            }\n                            else {\n                                const compareBase = this.series.options.compareBase;\n                                value = 100 * (value / compareValue) -\n                                    (compareBase === 100 ? 0 : 100);\n                            }\n                            // record for tooltip etc.\n                            if (typeof index !== 'undefined') {\n                                const point = this.series.points[index];\n                                if (point) {\n                                    point.change = value;\n                                }\n                            }\n                            return value;\n                        }\n                        return 0;\n                    };\n                }\n                /**\n                 * @ignore\n                 * @function Highcharts.Series#initCumulative\n                 */\n                initCumulative() {\n                    // Set the modifyValue method\n                    this.modifyValue = function (value, index) {\n                        if (value === null) {\n                            value = 0;\n                        }\n                        if (value !== void 0 && index !== void 0) {\n                            const prevPoint = index > 0 ?\n                                this.series.points[index - 1] : null;\n                            // Get the modified value\n                            if (prevPoint && prevPoint.cumulativeSum) {\n                                value = correctFloat(prevPoint.cumulativeSum + value);\n                            }\n                            // Record for tooltip etc.\n                            const point = this.series.points[index];\n                            if (point) {\n                                point.cumulativeSum = value;\n                            }\n                            return value;\n                        }\n                        return 0;\n                    };\n                }\n            }\n            DataModifyComposition.Additions = Additions;\n        })(DataModifyComposition || (DataModifyComposition = {}));\n        /* *\n         *\n         *  Default Export\n         *\n         * */\n        /* *\n         *\n         *  API Options\n         *\n         * */\n        /**\n         * Compare the values of the series against the first non-null, non-\n         * zero value in the visible range. The y axis will show percentage\n         * or absolute change depending on whether `compare` is set to `\"percent\"`\n         * or `\"value\"`. When this is applied to multiple series, it allows\n         * comparing the development of the series against each other. Adds\n         * a `change` field to every point object.\n         *\n         * @see [compareBase](#plotOptions.series.compareBase)\n         * @see [Axis.setCompare()](/class-reference/Highcharts.Axis#setCompare)\n         * @see [Series.setCompare()](/class-reference/Highcharts.Series#setCompare)\n         *\n         * @sample {highstock} stock/plotoptions/series-compare-percent/\n         *         Percent\n         * @sample {highstock} stock/plotoptions/series-compare-value/\n         *         Value\n         *\n         * @type      {string}\n         * @since     1.0.1\n         * @product   highstock\n         * @validvalue [\"percent\", \"value\"]\n         * @apioption plotOptions.series.compare\n         */\n        /**\n         * Defines if comparison should start from the first point within the visible\n         * range or should start from the first point **before** the range.\n         *\n         * In other words, this flag determines if first point within the visible range\n         * will have 0% (`compareStart=true`) or should have been already calculated\n         * according to the previous point (`compareStart=false`).\n         *\n         * @sample {highstock} stock/plotoptions/series-comparestart/\n         *         Calculate compare within visible range\n         *\n         * @type      {boolean}\n         * @default   false\n         * @since     6.0.0\n         * @product   highstock\n         * @apioption plotOptions.series.compareStart\n         */\n        /**\n         * When [compare](#plotOptions.series.compare) is `percent`, this option\n         * dictates whether to use 0 or 100 as the base of comparison.\n         *\n         * @sample {highstock} stock/plotoptions/series-comparebase/\n         *         Compare base is 100\n         *\n         * @type       {number}\n         * @default    0\n         * @since      5.0.6\n         * @product    highstock\n         * @validvalue [0, 100]\n         * @apioption  plotOptions.series.compareBase\n         */\n        /**\n         * Cumulative Sum feature replaces points' values with the following formula:\n         * `sum of all previous points' values + current point's value`.\n         * Works only for points in a visible range.\n         * Adds the `cumulativeSum` field to each point object that can be accessed\n         * e.g. in the [tooltip.pointFormat](https://api.highcharts.com/highstock/tooltip.pointFormat).\n         *\n         * With `dataGrouping` enabled, default grouping approximation is set to `sum`.\n         *\n         * @see [Axis.setCumulative()](/class-reference/Highcharts.Axis#setCumulative)\n         * @see [Series.setCumulative()](/class-reference/Highcharts.Series#setCumulative)\n         *\n         * @sample {highstock} stock/plotoptions/series-cumulative-sum/\n         *         Cumulative Sum\n         *\n         * @type      {boolean}\n         * @default   false\n         * @since 9.3.0\n         * @product   highstock\n         * @apioption plotOptions.series.cumulative\n         */\n        ''; // keeps doclets above in transpiled file\n\n        return DataModifyComposition;\n    });\n    _registerModule(_modules, 'Stock/Navigator/ChartNavigatorComposition.js', [_modules['Core/Globals.js'], _modules['Core/Utilities.js']], function (H, U) {\n        /* *\n         *\n         *  (c) 2010-2024 Torstein Honsi\n         *\n         *  License: www.highcharts.com/license\n         *\n         *  !!!!!!! SOURCE GETS TRANSPILED BY TYPESCRIPT. EDIT TS FILE ONLY. !!!!!!!\n         *\n         * */\n        const { isTouchDevice } = H;\n        const { addEvent, merge, pick } = U;\n        /* *\n         *\n         *  Constants\n         *\n         * */\n        const composedMembers = [];\n        /* *\n         *\n         *  Variables\n         *\n         * */\n        let NavigatorConstructor;\n        /* *\n         *\n         *  Functions\n         *\n         * */\n        /**\n         * @private\n         */\n        function compose(ChartClass, NavigatorClass) {\n            if (U.pushUnique(composedMembers, ChartClass)) {\n                const chartProto = ChartClass.prototype;\n                NavigatorConstructor = NavigatorClass;\n                chartProto.callbacks.push(onChartCallback);\n                addEvent(ChartClass, 'afterAddSeries', onChartAfterAddSeries);\n                addEvent(ChartClass, 'afterSetChartSize', onChartAfterSetChartSize);\n                addEvent(ChartClass, 'afterUpdate', onChartAfterUpdate);\n                addEvent(ChartClass, 'beforeRender', onChartBeforeRender);\n                addEvent(ChartClass, 'beforeShowResetZoom', onChartBeforeShowResetZoom);\n                addEvent(ChartClass, 'update', onChartUpdate);\n            }\n        }\n        /**\n         * Handle adding new series.\n         * @private\n         */\n        function onChartAfterAddSeries() {\n            if (this.navigator) {\n                // Recompute which series should be shown in navigator, and add them\n                this.navigator.setBaseSeries(null, false);\n            }\n        }\n        /**\n         * For stock charts, extend the Chart.setChartSize method so that we can set the\n         * final top position of the navigator once the height of the chart, including\n         * the legend, is determined. #367. We can't use Chart.getMargins, because\n         * labels offsets are not calculated yet.\n         * @private\n         */\n        function onChartAfterSetChartSize() {\n            const legend = this.legend, navigator = this.navigator;\n            let legendOptions, xAxis, yAxis;\n            if (navigator) {\n                legendOptions = legend && legend.options;\n                xAxis = navigator.xAxis;\n                yAxis = navigator.yAxis;\n                const { scrollbarHeight, scrollButtonSize } = navigator;\n                // Compute the top position\n                if (this.inverted) {\n                    navigator.left = navigator.opposite ?\n                        this.chartWidth - scrollbarHeight -\n                            navigator.height :\n                        this.spacing[3] + scrollbarHeight;\n                    navigator.top = this.plotTop + scrollButtonSize;\n                }\n                else {\n                    navigator.left = pick(xAxis.left, this.plotLeft + scrollButtonSize);\n                    navigator.top = navigator.navigatorOptions.top ||\n                        this.chartHeight -\n                            navigator.height -\n                            scrollbarHeight -\n                            (this.scrollbar?.options.margin || 0) -\n                            this.spacing[2] -\n                            (this.rangeSelector && this.extraBottomMargin ?\n                                this.rangeSelector.getHeight() :\n                                0) -\n                            ((legendOptions &&\n                                legendOptions.verticalAlign === 'bottom' &&\n                                legendOptions.layout !== 'proximate' && // #13392\n                                legendOptions.enabled &&\n                                !legendOptions.floating) ?\n                                legend.legendHeight +\n                                    pick(legendOptions.margin, 10) :\n                                0) -\n                            (this.titleOffset ? this.titleOffset[2] : 0);\n                }\n                if (xAxis && yAxis) { // false if navigator is disabled (#904)\n                    if (this.inverted) {\n                        xAxis.options.left = yAxis.options.left = navigator.left;\n                    }\n                    else {\n                        xAxis.options.top = yAxis.options.top = navigator.top;\n                    }\n                    xAxis.setAxisSize();\n                    yAxis.setAxisSize();\n                }\n            }\n        }\n        /**\n         * Initialize navigator, if no scrolling exists yet.\n         * @private\n         */\n        function onChartAfterUpdate(event) {\n            if (!this.navigator && !this.scroller &&\n                (this.options.navigator.enabled ||\n                    this.options.scrollbar.enabled)) {\n                this.scroller = this.navigator = new NavigatorConstructor(this);\n                if (pick(event.redraw, true)) {\n                    this.redraw(event.animation); // #7067\n                }\n            }\n        }\n        /**\n         * Initialize navigator for stock charts\n         * @private\n         */\n        function onChartBeforeRender() {\n            const options = this.options;\n            if (options.navigator.enabled ||\n                options.scrollbar.enabled) {\n                this.scroller = this.navigator = new NavigatorConstructor(this);\n            }\n        }\n        /**\n         * For Stock charts. For x only zooming, do not to create the zoom button\n         * because X axis zooming is already allowed by the Navigator and Range\n         * selector. (#9285)\n         * @private\n         */\n        function onChartBeforeShowResetZoom() {\n            const chartOptions = this.options, navigator = chartOptions.navigator, rangeSelector = chartOptions.rangeSelector;\n            if (((navigator && navigator.enabled) ||\n                (rangeSelector && rangeSelector.enabled)) &&\n                ((!isTouchDevice &&\n                    this.zooming.type === 'x') ||\n                    (isTouchDevice && this.zooming.pinchType === 'x'))) {\n                return false;\n            }\n        }\n        /**\n         * @private\n         */\n        function onChartCallback(chart) {\n            const navigator = chart.navigator;\n            // Initialize the navigator\n            if (navigator && chart.xAxis[0]) {\n                const extremes = chart.xAxis[0].getExtremes();\n                navigator.render(extremes.min, extremes.max);\n            }\n        }\n        /**\n         * Merge options, if no scrolling exists yet\n         * @private\n         */\n        function onChartUpdate(e) {\n            const navigatorOptions = (e.options.navigator || {}), scrollbarOptions = (e.options.scrollbar || {});\n            if (!this.navigator && !this.scroller &&\n                (navigatorOptions.enabled || scrollbarOptions.enabled)) {\n                merge(true, this.options.navigator, navigatorOptions);\n                merge(true, this.options.scrollbar, scrollbarOptions);\n                delete e.options.navigator;\n                delete e.options.scrollbar;\n            }\n        }\n        /* *\n         *\n         *  Default Export\n         *\n         * */\n        const ChartNavigatorComposition = {\n            compose\n        };\n\n        return ChartNavigatorComposition;\n    });\n    _registerModule(_modules, 'Core/Axis/NavigatorAxisComposition.js', [_modules['Core/Globals.js'], _modules['Core/Utilities.js']], function (H, U) {\n        /* *\n         *\n         *  (c) 2010-2024 Torstein Honsi\n         *\n         *  License: www.highcharts.com/license\n         *\n         *  !!!!!!! SOURCE GETS TRANSPILED BY TYPESCRIPT. EDIT TS FILE ONLY. !!!!!!!\n         *\n         * */\n        const { isTouchDevice } = H;\n        const { addEvent, correctFloat, defined, isNumber, pick } = U;\n        /* *\n         *\n         *  Functions\n         *\n         * */\n        /**\n         * @private\n         */\n        function onAxisInit() {\n            const axis = this;\n            if (!axis.navigatorAxis) {\n                axis.navigatorAxis = new NavigatorAxisAdditions(axis);\n            }\n        }\n        /**\n         * For Stock charts, override selection zooming with some special features\n         * because X axis zooming is already allowed by the Navigator and Range\n         * selector.\n         * @private\n         */\n        function onAxisSetExtremes(e) {\n            const axis = this, chart = axis.chart, chartOptions = chart.options, navigator = chartOptions.navigator, navigatorAxis = axis.navigatorAxis, pinchType = chart.zooming.pinchType, rangeSelector = chartOptions.rangeSelector, zoomType = chart.zooming.type;\n            let zoomed;\n            if (axis.isXAxis &&\n                (navigator?.enabled || rangeSelector?.enabled)) {\n                // For y only zooming, ignore the X axis completely\n                if (zoomType === 'y' && e.trigger === 'zoom') {\n                    zoomed = false;\n                    // For xy zooming, record the state of the zoom before zoom selection,\n                    // then when the reset button is pressed, revert to this state. This\n                    // should apply only if the chart is initialized with a range (#6612),\n                    // otherwise zoom all the way out.\n                }\n                else if (((e.trigger === 'zoom' && zoomType === 'xy') ||\n                    (isTouchDevice && pinchType === 'xy')) &&\n                    axis.options.range) {\n                    const previousZoom = navigatorAxis.previousZoom;\n                    // Minimum defined, zooming in\n                    if (defined(e.min)) {\n                        navigatorAxis.previousZoom = [axis.min, axis.max];\n                        // Minimum undefined, resetting zoom\n                    }\n                    else if (previousZoom) {\n                        e.min = previousZoom[0];\n                        e.max = previousZoom[1];\n                        navigatorAxis.previousZoom = void 0;\n                    }\n                }\n            }\n            if (typeof zoomed !== 'undefined') {\n                e.preventDefault();\n            }\n        }\n        /* *\n         *\n         *  Class\n         *\n         * */\n        /**\n         * @private\n         * @class\n         */\n        class NavigatorAxisAdditions {\n            /* *\n             *\n             *  Static Functions\n             *\n             * */\n            /**\n             * @private\n             */\n            static compose(AxisClass) {\n                if (!AxisClass.keepProps.includes('navigatorAxis')) {\n                    AxisClass.keepProps.push('navigatorAxis');\n                    addEvent(AxisClass, 'init', onAxisInit);\n                    addEvent(AxisClass, 'setExtremes', onAxisSetExtremes);\n                }\n            }\n            /* *\n             *\n             *  Constructors\n             *\n             * */\n            constructor(axis) {\n                this.axis = axis;\n            }\n            /* *\n             *\n             *  Functions\n             *\n             * */\n            /**\n             * @private\n             */\n            destroy() {\n                this.axis = void 0;\n            }\n            /**\n             * Add logic to normalize the zoomed range in order to preserve the pressed\n             * state of range selector buttons\n             *\n             * @private\n             * @function Highcharts.Axis#toFixedRange\n             */\n            toFixedRange(pxMin, pxMax, fixedMin, fixedMax) {\n                const axis = this.axis, chart = axis.chart, overscroll = pick(axis.ordinal?.convertOverscroll(axis.options.overscroll), 0);\n                let newMin = pick(fixedMin, axis.translate(pxMin, true, !axis.horiz)), newMax = pick(fixedMax, axis.translate(pxMax, true, !axis.horiz));\n                const fixedRange = chart && chart.fixedRange, halfPointRange = (axis.pointRange || 0) / 2;\n                // Add/remove half point range to/from the extremes (#1172)\n                if (!defined(fixedMin)) {\n                    newMin = correctFloat(newMin + halfPointRange);\n                }\n                if (!defined(fixedMax)) {\n                    newMax = correctFloat(newMax - halfPointRange);\n                }\n                // Make sure panning to the edges does not decrease the zoomed range\n                if (fixedRange && axis.dataMin && axis.dataMax) {\n                    const maxWithOverscroll = axis.dataMax + overscroll;\n                    if (newMax >= maxWithOverscroll) {\n                        newMin = correctFloat(maxWithOverscroll - fixedRange);\n                        newMax = correctFloat(maxWithOverscroll);\n                    }\n                    if (newMin <= axis.dataMin) {\n                        newMax = correctFloat(axis.dataMin + fixedRange);\n                    }\n                }\n                if (!isNumber(newMin) || !isNumber(newMax)) { // #1195, #7411\n                    newMin = newMax = void 0;\n                }\n                return {\n                    min: newMin,\n                    max: newMax\n                };\n            }\n        }\n        /* *\n         *\n         *  Default Export\n         *\n         * */\n\n        return NavigatorAxisAdditions;\n    });\n    _registerModule(_modules, 'Stock/Navigator/NavigatorDefaults.js', [_modules['Core/Color/Color.js'], _modules['Core/Series/SeriesRegistry.js']], function (Color, SeriesRegistry) {\n        /* *\n         *\n         *  (c) 2010-2024 Torstein Honsi\n         *\n         *  License: www.highcharts.com/license\n         *\n         *  !!!!!!! SOURCE GETS TRANSPILED BY TYPESCRIPT. EDIT TS FILE ONLY. !!!!!!!\n         *\n         * */\n        const { parse: color } = Color;\n        const { seriesTypes } = SeriesRegistry;\n        /* *\n         *\n         *  Constants\n         *\n         * */\n        /**\n         * The navigator is a small series below the main series, displaying\n         * a view of the entire data set. It provides tools to zoom in and\n         * out on parts of the data as well as panning across the dataset.\n         *\n         * @product      highstock gantt\n         * @optionparent navigator\n         */\n        const NavigatorDefaults = {\n            /**\n             * Whether the navigator and scrollbar should adapt to updated data\n             * in the base X axis. When loading data async, as in the demo below,\n             * this should be `false`. Otherwise new data will trigger navigator\n             * redraw, which will cause unwanted looping. In the demo below, the\n             * data in the navigator is set only once. On navigating, only the main\n             * chart content is updated.\n             *\n             * @sample {highstock} stock/demo/lazy-loading/\n             *         Set to false with async data loading\n             *\n             * @type      {boolean}\n             * @default   true\n             * @apioption navigator.adaptToUpdatedData\n             */\n            /**\n             * An integer identifying the index to use for the base series, or a\n             * string representing the id of the series.\n             *\n             * **Note**: As of Highcharts 5.0, this is now a deprecated option.\n             * Prefer [series.showInNavigator](#plotOptions.series.showInNavigator).\n             *\n             * @see [series.showInNavigator](#plotOptions.series.showInNavigator)\n             *\n             * @deprecated\n             * @type      {number|string}\n             * @default   0\n             * @apioption navigator.baseSeries\n             */\n            /**\n             * Enable or disable the navigator.\n             *\n             * @sample {highstock} stock/navigator/enabled/\n             *         Disable the navigator\n             *\n             * @type      {boolean}\n             * @default   true\n             * @apioption navigator.enabled\n             */\n            /**\n             * When the chart is inverted, whether to draw the navigator on the\n             * opposite side.\n             *\n             * @type      {boolean}\n             * @default   false\n             * @since     5.0.8\n             * @apioption navigator.opposite\n             */\n            /**\n             * The height of the navigator.\n             *\n             * @sample {highstock} stock/navigator/height/\n             *         A higher navigator\n             */\n            height: 40,\n            /**\n             * The distance from the nearest element, the X axis or X axis labels.\n             *\n             * @sample {highstock} stock/navigator/margin/\n             *         A margin of 2 draws the navigator closer to the X axis labels\n             */\n            margin: 25,\n            /**\n             * Whether the mask should be inside the range marking the zoomed\n             * range, or outside. In Highcharts Stock 1.x it was always `false`.\n             *\n             * @sample {highstock} stock/demo/maskinside-false/\n             *         False, mask outside\n             *\n             * @since   2.0\n             */\n            maskInside: true,\n            /**\n             * Options for the handles for dragging the zoomed area.\n             *\n             * @sample {highstock} stock/navigator/handles/\n             *         Colored handles\n             */\n            handles: {\n                /**\n                 * Width for handles.\n                 *\n                 * @sample {highstock} stock/navigator/styled-handles/\n                 *         Styled handles\n                 *\n                 * @since   6.0.0\n                 */\n                width: 7,\n                /**\n                 * Height for handles.\n                 *\n                 * @sample {highstock} stock/navigator/styled-handles/\n                 *         Styled handles\n                 *\n                 * @since   6.0.0\n                 */\n                height: 15,\n                /**\n                 * Array to define shapes of handles. 0-index for left, 1-index for\n                 * right.\n                 *\n                 * Additionally, the URL to a graphic can be given on this form:\n                 * `url(graphic.png)`. Note that for the image to be applied to\n                 * exported charts, its URL needs to be accessible by the export\n                 * server.\n                 *\n                 * Custom callbacks for symbol path generation can also be added to\n                 * `Highcharts.SVGRenderer.prototype.symbols`. The callback is then\n                 * used by its method name, as shown in the demo.\n                 *\n                 * @sample {highstock} stock/navigator/styled-handles/\n                 *         Styled handles\n                 *\n                 * @type    {Array<string>}\n                 * @default [\"navigator-handle\", \"navigator-handle\"]\n                 * @since   6.0.0\n                 */\n                symbols: ['navigator-handle', 'navigator-handle'],\n                /**\n                 * Allows to enable/disable handles.\n                 *\n                 * @since   6.0.0\n                 */\n                enabled: true,\n                /**\n                 * The width for the handle border and the stripes inside.\n                 *\n                 * @sample {highstock} stock/navigator/styled-handles/\n                 *         Styled handles\n                 *\n                 * @since     6.0.0\n                 * @apioption navigator.handles.lineWidth\n                 */\n                lineWidth: 1,\n                /**\n                 * The fill for the handle.\n                 *\n                 * @type    {Highcharts.ColorString|Highcharts.GradientColorObject|Highcharts.PatternObject}\n                 */\n                backgroundColor: \"#f2f2f2\" /* Palette.neutralColor5 */,\n                /**\n                 * The stroke for the handle border and the stripes inside.\n                 *\n                 * @type    {Highcharts.ColorString|Highcharts.GradientColorObject|Highcharts.PatternObject}\n                 */\n                borderColor: \"#999999\" /* Palette.neutralColor40 */\n            },\n            /**\n             * The color of the mask covering the areas of the navigator series\n             * that are currently not visible in the main series. The default\n             * color is bluish with an opacity of 0.3 to see the series below.\n             *\n             * @see In styled mode, the mask is styled with the\n             *      `.highcharts-navigator-mask` and\n             *      `.highcharts-navigator-mask-inside` classes.\n             *\n             * @sample {highstock} stock/navigator/maskfill/\n             *         Blue, semi transparent mask\n             *\n             * @type    {Highcharts.ColorString|Highcharts.GradientColorObject|Highcharts.PatternObject}\n             * @default rgba(102,133,194,0.3)\n             */\n            maskFill: color(\"#667aff\" /* Palette.highlightColor60 */).setOpacity(0.3).get(),\n            /**\n             * The color of the line marking the currently zoomed area in the\n             * navigator.\n             *\n             * @sample {highstock} stock/navigator/outline/\n             *         2px blue outline\n             *\n             * @type    {Highcharts.ColorString|Highcharts.GradientColorObject|Highcharts.PatternObject}\n             * @default #cccccc\n             */\n            outlineColor: \"#999999\" /* Palette.neutralColor40 */,\n            /**\n             * The width of the line marking the currently zoomed area in the\n             * navigator.\n             *\n             * @see In styled mode, the outline stroke width is set with the\n             *      `.highcharts-navigator-outline` class.\n             *\n             * @sample {highstock} stock/navigator/outline/\n             *         2px blue outline\n             *\n             * @type    {number}\n             */\n            outlineWidth: 1,\n            /**\n             * Options for the navigator series. Available options are the same\n             * as any series, documented at [plotOptions](#plotOptions.series)\n             * and [series](#series).\n             *\n             * Unless data is explicitly defined on navigator.series, the data\n             * is borrowed from the first series in the chart.\n             *\n             * Default series options for the navigator series are:\n             * ```js\n             * series: {\n             *     type: 'areaspline',\n             *     fillOpacity: 0.05,\n             *     dataGrouping: {\n             *         smoothed: true\n             *     },\n             *     lineWidth: 1,\n             *     marker: {\n             *         enabled: false\n             *     }\n             * }\n             * ```\n             *\n             * @see In styled mode, the navigator series is styled with the\n             *      `.highcharts-navigator-series` class.\n             *\n             * @sample {highstock} stock/navigator/series-data/\n             *         Using a separate data set for the navigator\n             * @sample {highstock} stock/navigator/series/\n             *         A green navigator series\n             *\n             * @type {*|Array<*>|Highcharts.SeriesOptionsType|Array<Highcharts.SeriesOptionsType>}\n             */\n            series: {\n                /**\n                 * The type of the navigator series.\n                 *\n                 * Heads up:\n                 * In column-type navigator, zooming is limited to at least one\n                 * point with its `pointRange`.\n                 *\n                 * @sample {highstock} stock/navigator/column/\n                 *         Column type navigator\n                 *\n                 * @type    {string}\n                 * @default {highstock} `areaspline` if defined, otherwise `line`\n                 * @default {gantt} gantt\n                 */\n                type: (typeof seriesTypes.areaspline === 'undefined' ?\n                    'line' :\n                    'areaspline'),\n                /**\n                 * The fill opacity of the navigator series.\n                 */\n                fillOpacity: 0.05,\n                /**\n                 * The pixel line width of the navigator series.\n                 */\n                lineWidth: 1,\n                /**\n                 * @ignore-option\n                 */\n                compare: null,\n                /**\n                 * @ignore-option\n                 */\n                sonification: {\n                    enabled: false\n                },\n                /**\n                 * Unless data is explicitly defined, the data is borrowed from the\n                 * first series in the chart.\n                 *\n                 * @type      {Array<number|Array<number|string|null>|object|null>}\n                 * @product   highstock\n                 * @apioption navigator.series.data\n                 */\n                /**\n                 * Data grouping options for the navigator series.\n                 *\n                 * @extends plotOptions.series.dataGrouping\n                 */\n                dataGrouping: {\n                    approximation: 'average',\n                    enabled: true,\n                    groupPixelWidth: 2,\n                    // Replace smoothed property by anchors, #12455.\n                    firstAnchor: 'firstPoint',\n                    anchor: 'middle',\n                    lastAnchor: 'lastPoint',\n                    // Day and week differs from plotOptions.series.dataGrouping\n                    units: [\n                        ['millisecond', [1, 2, 5, 10, 20, 25, 50, 100, 200, 500]],\n                        ['second', [1, 2, 5, 10, 15, 30]],\n                        ['minute', [1, 2, 5, 10, 15, 30]],\n                        ['hour', [1, 2, 3, 4, 6, 8, 12]],\n                        ['day', [1, 2, 3, 4]],\n                        ['week', [1, 2, 3]],\n                        ['month', [1, 3, 6]],\n                        ['year', null]\n                    ]\n                },\n                /**\n                 * Data label options for the navigator series. Data labels are\n                 * disabled by default on the navigator series.\n                 *\n                 * @extends plotOptions.series.dataLabels\n                 */\n                dataLabels: {\n                    enabled: false,\n                    zIndex: 2 // #1839\n                },\n                id: 'highcharts-navigator-series',\n                className: 'highcharts-navigator-series',\n                /**\n                 * Sets the fill color of the navigator series.\n                 *\n                 * @type      {Highcharts.ColorString|Highcharts.GradientColorObject|Highcharts.PatternObject}\n                 * @apioption navigator.series.color\n                 */\n                /**\n                 * Line color for the navigator series. Allows setting the color\n                 * while disallowing the default candlestick setting.\n                 *\n                 * @type {Highcharts.ColorString|null}\n                 */\n                lineColor: null,\n                marker: {\n                    enabled: false\n                },\n                /**\n                 * Since Highcharts Stock v8, default value is the same as default\n                 * `pointRange` defined for a specific type (e.g. `null` for\n                 * column type).\n                 *\n                 * In Highcharts Stock version < 8, defaults to 0.\n                 *\n                 * @extends plotOptions.series.pointRange\n                 * @type {number|null}\n                 * @apioption navigator.series.pointRange\n                 */\n                /**\n                 * The threshold option. Setting it to 0 will make the default\n                 * navigator area series draw its area from the 0 value and up.\n                 *\n                 * @type {number|null}\n                 */\n                threshold: null\n            },\n            /**\n             * Enable or disable navigator sticking to right, while adding new\n             * points. If `undefined`, the navigator sticks to the axis maximum only\n             * if it was already at the maximum prior to adding points.\n             *\n             * @type      {boolean}\n             * @default   undefined\n             * @since 10.2.1\n             * @sample {highstock} stock/navigator/sticktomax-false/\n             * stickToMax set to false\n             * @apioption navigator.stickToMax\n             */\n            /**\n             * Options for the navigator X axis. Default series options for the\n             * navigator xAxis are:\n             * ```js\n             * xAxis: {\n             *     tickWidth: 0,\n             *     lineWidth: 0,\n             *     gridLineWidth: 1,\n             *     tickPixelInterval: 200,\n             *     labels: {\n             *            align: 'left',\n             *         style: {\n             *             color: '#888'\n             *         },\n             *         x: 3,\n             *         y: -4\n             *     }\n             * }\n             * ```\n             *\n             * @extends   xAxis\n             * @excluding linkedTo, maxZoom, minRange, opposite, range, scrollbar,\n             *            showEmpty, maxRange\n             */\n            xAxis: {\n                /**\n                 * Additional range on the right side of the xAxis. Works similar to\n                 * `xAxis.maxPadding`, but the value is set in terms of axis values,\n                 * percentage or pixels.\n                 *\n                 * If it's a number, it is interpreted as axis values, which in a\n                 * datetime axis equals milliseconds.\n                 *\n                 * If it's a percentage string, is interpreted as percentages of the\n                 * axis length. An overscroll of 50% will make a 100px axis 50px longer.\n                 *\n                 * If it's a pixel string, it is interpreted as a fixed pixel value, but\n                 * limited to 90% of the axis length.\n                 *\n                 * If it's undefined, the value is inherited from `xAxis.overscroll`.\n                 *\n                 * Can be set for both, main xAxis and navigator's xAxis.\n                 *\n                 * @type    {number | string | undefined}\n                 * @since   6.0.0\n                 * @apioption navigator.xAxis.overscroll\n                 */\n                className: 'highcharts-navigator-xaxis',\n                tickLength: 0,\n                lineWidth: 0,\n                gridLineColor: \"#e6e6e6\" /* Palette.neutralColor10 */,\n                gridLineWidth: 1,\n                tickPixelInterval: 200,\n                labels: {\n                    align: 'left',\n                    /**\n                     * @type {Highcharts.CSSObject}\n                     */\n                    style: {\n                        /** @ignore */\n                        color: \"#000000\" /* Palette.neutralColor100 */,\n                        /** @ignore */\n                        fontSize: '0.7em',\n                        /** @ignore */\n                        opacity: 0.6,\n                        /** @ignore */\n                        textOutline: '2px contrast'\n                    },\n                    x: 3,\n                    y: -4\n                },\n                crosshair: false\n            },\n            /**\n             * Options for the navigator Y axis. Default series options for the\n             * navigator yAxis are:\n             * ```js\n             * yAxis: {\n             *     gridLineWidth: 0,\n             *     startOnTick: false,\n             *     endOnTick: false,\n             *     minPadding: 0.1,\n             *     maxPadding: 0.1,\n             *     labels: {\n             *         enabled: false\n             *     },\n             *     title: {\n             *         text: null\n             *     },\n             *     tickWidth: 0\n             * }\n             * ```\n             *\n             * @extends   yAxis\n             * @excluding height, linkedTo, maxZoom, minRange, ordinal, range,\n             *            showEmpty, scrollbar, top, units, maxRange, minLength,\n             *            maxLength, resize\n             */\n            yAxis: {\n                className: 'highcharts-navigator-yaxis',\n                gridLineWidth: 0,\n                startOnTick: false,\n                endOnTick: false,\n                minPadding: 0.1,\n                maxPadding: 0.1,\n                labels: {\n                    enabled: false\n                },\n                crosshair: false,\n                title: {\n                    text: null\n                },\n                tickLength: 0,\n                tickWidth: 0\n            }\n        };\n        /* *\n         *\n         *  Default Export\n         *\n         * */\n        /* *\n         *\n         *  API Options\n         *\n         * */\n        /**\n         * Maximum range which can be set using the navigator's handles.\n         * Opposite of [xAxis.minRange](#xAxis.minRange).\n         *\n         * @sample {highstock} stock/navigator/maxrange/\n         *         Defined max and min range\n         *\n         * @type      {number}\n         * @since     6.0.0\n         * @product   highstock gantt\n         * @apioption xAxis.maxRange\n         */\n        (''); // keeps doclets above in JS file\n\n        return NavigatorDefaults;\n    });\n    _registerModule(_modules, 'Stock/Navigator/NavigatorSymbols.js', [], function () {\n        /* *\n         *\n         *  (c) 2010-2024 Torstein Honsi\n         *\n         *  License: www.highcharts.com/license\n         *\n         *  !!!!!!! SOURCE GETS TRANSPILED BY TYPESCRIPT. EDIT TS FILE ONLY. !!!!!!!\n         *\n         * */\n        /* *\n         *\n         *  Constants\n         *\n         * */\n        /**\n         * Draw one of the handles on the side of the zoomed range in the navigator.\n         * @private\n         */\n        function navigatorHandle(_x, _y, width, height, options = {}) {\n            const halfWidth = options.width ? options.width / 2 : width, markerPosition = Math.round(halfWidth / 3) + 0.5;\n            height = options.height || height;\n            return [\n                ['M', -halfWidth - 1, 0.5],\n                ['L', halfWidth, 0.5],\n                ['L', halfWidth, height + 0.5],\n                ['L', -halfWidth - 1, height + 0.5],\n                ['L', -halfWidth - 1, 0.5],\n                ['M', -markerPosition, 4],\n                ['L', -markerPosition, height - 3],\n                ['M', markerPosition - 1, 4],\n                ['L', markerPosition - 1, height - 3]\n            ];\n        }\n        /* *\n         *\n         *  Default Export\n         *\n         * */\n        const NavigatorSymbols = {\n            'navigator-handle': navigatorHandle\n        };\n\n        return NavigatorSymbols;\n    });\n    _registerModule(_modules, 'Stock/Utilities/StockUtilities.js', [_modules['Core/Utilities.js']], function (U) {\n        /* *\n         *\n         *  (c) 2010-2024 Torstein Honsi\n         *\n         *  License: www.highcharts.com/license\n         *\n         *  !!!!!!! SOURCE GETS TRANSPILED BY TYPESCRIPT. EDIT TS FILE ONLY. !!!!!!!\n         *\n         * */\n        const { defined } = U;\n        /* *\n         *\n         *  Functions\n         *\n         * */\n        /**\n         * Sets the chart.fixedRange to the specified value. If the value is larger\n         * than actual range, sets it to the maximum possible range. (#20327)\n         *\n         * @private\n         * @function Highcharts.StockChart#setFixedRange\n         * @param {number|undefined} range\n         *        Range to set in axis units.\n         */\n        function setFixedRange(range) {\n            const xAxis = this.xAxis[0];\n            if (defined(xAxis.dataMax) &&\n                defined(xAxis.dataMin) &&\n                range) {\n                this.fixedRange = Math.min(range, xAxis.dataMax - xAxis.dataMin);\n            }\n            else {\n                this.fixedRange = range;\n            }\n        }\n        const StockUtilities = {\n            setFixedRange\n        };\n\n        return StockUtilities;\n    });\n    _registerModule(_modules, 'Stock/Navigator/NavigatorComposition.js', [_modules['Core/Defaults.js'], _modules['Core/Globals.js'], _modules['Core/Axis/NavigatorAxisComposition.js'], _modules['Stock/Navigator/NavigatorDefaults.js'], _modules['Stock/Navigator/NavigatorSymbols.js'], _modules['Core/Renderer/RendererRegistry.js'], _modules['Stock/Utilities/StockUtilities.js'], _modules['Core/Utilities.js']], function (D, H, NavigatorAxisAdditions, NavigatorDefaults, NavigatorSymbols, RendererRegistry, StockUtilities, U) {\n        /* *\n         *\n         *  (c) 2010-2024 Torstein Honsi\n         *\n         *  License: www.highcharts.com/license\n         *\n         *  !!!!!!! SOURCE GETS TRANSPILED BY TYPESCRIPT. EDIT TS FILE ONLY. !!!!!!!\n         *\n         * */\n        const { setOptions } = D;\n        const { composed } = H;\n        const { getRendererType } = RendererRegistry;\n        const { setFixedRange } = StockUtilities;\n        const { addEvent, extend, pushUnique } = U;\n        /* *\n         *\n         *  Variables\n         *\n         * */\n        /* *\n         *\n         *  Functions\n         *\n         * */\n        /**\n         * @private\n         */\n        function compose(ChartClass, AxisClass, SeriesClass) {\n            NavigatorAxisAdditions.compose(AxisClass);\n            if (pushUnique(composed, 'Navigator')) {\n                ChartClass.prototype.setFixedRange = setFixedRange;\n                extend(getRendererType().prototype.symbols, NavigatorSymbols);\n                addEvent(SeriesClass, 'afterUpdate', onSeriesAfterUpdate);\n                setOptions({ navigator: NavigatorDefaults });\n            }\n        }\n        /**\n         * Handle updating series\n         * @private\n         */\n        function onSeriesAfterUpdate() {\n            if (this.chart.navigator && !this.options.isInternal) {\n                this.chart.navigator.setBaseSeries(null, false);\n            }\n        }\n        /* *\n         *\n         *  Default Export\n         *\n         * */\n        const NavigatorComposition = {\n            compose\n        };\n\n        return NavigatorComposition;\n    });\n    _registerModule(_modules, 'Core/Axis/ScrollbarAxis.js', [_modules['Core/Globals.js'], _modules['Core/Utilities.js']], function (H, U) {\n        /* *\n         *\n         *  (c) 2010-2024 Torstein Honsi\n         *\n         *  License: www.highcharts.com/license\n         *\n         *  !!!!!!! SOURCE GETS TRANSPILED BY TYPESCRIPT. EDIT TS FILE ONLY. !!!!!!!\n         *\n         * */\n        const { composed } = H;\n        const { addEvent, defined, pick, pushUnique } = U;\n        /* *\n         *\n         *  Composition\n         *\n         * */\n        var ScrollbarAxis;\n        (function (ScrollbarAxis) {\n            /* *\n             *\n             *  Variables\n             *\n             * */\n            let Scrollbar;\n            /* *\n             *\n             *  Functions\n             *\n             * */\n            /**\n             * Attaches to axis events to create scrollbars if enabled.\n             *\n             * @private\n             *\n             * @param {Highcharts.Axis} AxisClass\n             * Axis class to extend.\n             *\n             * @param {Highcharts.Scrollbar} ScrollbarClass\n             * Scrollbar class to use.\n             */\n            function compose(AxisClass, ScrollbarClass) {\n                if (pushUnique(composed, 'Axis.Scrollbar')) {\n                    Scrollbar = ScrollbarClass;\n                    addEvent(AxisClass, 'afterGetOffset', onAxisAfterGetOffset);\n                    addEvent(AxisClass, 'afterInit', onAxisAfterInit);\n                    addEvent(AxisClass, 'afterRender', onAxisAfterRender);\n                }\n            }\n            ScrollbarAxis.compose = compose;\n            /** @private */\n            function getExtremes(axis) {\n                const axisMin = pick(axis.options && axis.options.min, axis.min);\n                const axisMax = pick(axis.options && axis.options.max, axis.max);\n                return {\n                    axisMin,\n                    axisMax,\n                    scrollMin: defined(axis.dataMin) ?\n                        Math.min(axisMin, axis.min, axis.dataMin, pick(axis.threshold, Infinity)) : axisMin,\n                    scrollMax: defined(axis.dataMax) ?\n                        Math.max(axisMax, axis.max, axis.dataMax, pick(axis.threshold, -Infinity)) : axisMax\n                };\n            }\n            /**\n             * Make space for a scrollbar.\n             * @private\n             */\n            function onAxisAfterGetOffset() {\n                const axis = this, scrollbar = axis.scrollbar, opposite = scrollbar && !scrollbar.options.opposite, index = axis.horiz ? 2 : opposite ? 3 : 1;\n                if (scrollbar) {\n                    // Reset scrollbars offsets\n                    axis.chart.scrollbarsOffsets = [0, 0];\n                    axis.chart.axisOffset[index] +=\n                        scrollbar.size + (scrollbar.options.margin || 0);\n                }\n            }\n            /**\n             * Wrap axis initialization and create scrollbar if enabled.\n             * @private\n             */\n            function onAxisAfterInit() {\n                const axis = this;\n                if (axis.options &&\n                    axis.options.scrollbar &&\n                    axis.options.scrollbar.enabled) {\n                    // Predefined options:\n                    axis.options.scrollbar.vertical = !axis.horiz;\n                    axis.options.startOnTick = axis.options.endOnTick = false;\n                    axis.scrollbar = new Scrollbar(axis.chart.renderer, axis.options.scrollbar, axis.chart);\n                    addEvent(axis.scrollbar, 'changed', function (e) {\n                        const { axisMin, axisMax, scrollMin: unitedMin, scrollMax: unitedMax } = getExtremes(axis), range = unitedMax - unitedMin;\n                        let to, from;\n                        // #12834, scroll when show/hide series, wrong extremes\n                        if (!defined(axisMin) || !defined(axisMax)) {\n                            return;\n                        }\n                        if ((axis.horiz && !axis.reversed) ||\n                            (!axis.horiz && axis.reversed)) {\n                            to = unitedMin + range * this.to;\n                            from = unitedMin + range * this.from;\n                        }\n                        else {\n                            // Y-values in browser are reversed, but this also\n                            // applies for reversed horizontal axis:\n                            to = unitedMin + range * (1 - this.from);\n                            from = unitedMin + range * (1 - this.to);\n                        }\n                        if (this.shouldUpdateExtremes(e.DOMType)) {\n                            // #17977, set animation to undefined instead of true\n                            const animate = e.DOMType === 'mousemove' ||\n                                e.DOMType === 'touchmove' ? false : void 0;\n                            axis.setExtremes(from, to, true, animate, e);\n                        }\n                        else {\n                            // When live redraw is disabled, don't change extremes\n                            // Only change the position of the scrollbar thumb\n                            this.setRange(this.from, this.to);\n                        }\n                    });\n                }\n            }\n            /**\n             * Wrap rendering axis, and update scrollbar if one is created.\n             * @private\n             */\n            function onAxisAfterRender() {\n                const axis = this, { scrollMin, scrollMax } = getExtremes(axis), scrollbar = axis.scrollbar, offset = (axis.axisTitleMargin + (axis.titleOffset || 0)), scrollbarsOffsets = axis.chart.scrollbarsOffsets, axisMargin = axis.options.margin || 0;\n                let offsetsIndex, from, to;\n                if (scrollbar && scrollbarsOffsets) {\n                    if (axis.horiz) {\n                        // Reserve space for labels/title\n                        if (!axis.opposite) {\n                            scrollbarsOffsets[1] += offset;\n                        }\n                        scrollbar.position(axis.left, (axis.top +\n                            axis.height +\n                            2 +\n                            scrollbarsOffsets[1] -\n                            (axis.opposite ? axisMargin : 0)), axis.width, axis.height);\n                        // Next scrollbar should reserve space for margin (if set)\n                        if (!axis.opposite) {\n                            scrollbarsOffsets[1] += axisMargin;\n                        }\n                        offsetsIndex = 1;\n                    }\n                    else {\n                        // Reserve space for labels/title\n                        if (axis.opposite) {\n                            scrollbarsOffsets[0] += offset;\n                        }\n                        let xPosition;\n                        if (!scrollbar.options.opposite) {\n                            xPosition = axis.opposite ? 0 : axisMargin;\n                        }\n                        else {\n                            xPosition = axis.left +\n                                axis.width +\n                                2 +\n                                scrollbarsOffsets[0] -\n                                (axis.opposite ? 0 : axisMargin);\n                        }\n                        scrollbar.position(xPosition, axis.top, axis.width, axis.height);\n                        // Next scrollbar should reserve space for margin (if set)\n                        if (axis.opposite) {\n                            scrollbarsOffsets[0] += axisMargin;\n                        }\n                        offsetsIndex = 0;\n                    }\n                    scrollbarsOffsets[offsetsIndex] += scrollbar.size +\n                        (scrollbar.options.margin || 0);\n                    if (isNaN(scrollMin) ||\n                        isNaN(scrollMax) ||\n                        !defined(axis.min) ||\n                        !defined(axis.max) ||\n                        axis.min === axis.max // #10733\n                    ) {\n                        // Default action: when extremes are the same or there is\n                        // not extremes on the axis, but scrollbar exists, make it\n                        // full size\n                        scrollbar.setRange(0, 1);\n                    }\n                    else {\n                        from = ((axis.min - scrollMin) /\n                            (scrollMax - scrollMin));\n                        to = ((axis.max - scrollMin) /\n                            (scrollMax - scrollMin));\n                        if ((axis.horiz && !axis.reversed) ||\n                            (!axis.horiz && axis.reversed)) {\n                            scrollbar.setRange(from, to);\n                        }\n                        else {\n                            // Inverse vertical axis\n                            scrollbar.setRange(1 - to, 1 - from);\n                        }\n                    }\n                }\n            }\n        })(ScrollbarAxis || (ScrollbarAxis = {}));\n        /* *\n         *\n         *  Default Export\n         *\n         * */\n\n        return ScrollbarAxis;\n    });\n    _registerModule(_modules, 'Stock/Scrollbar/ScrollbarDefaults.js', [], function () {\n        /* *\n         *\n         *  (c) 2010-2024 Torstein Honsi\n         *\n         *  License: www.highcharts.com/license\n         *\n         *  !!!!!!! SOURCE GETS TRANSPILED BY TYPESCRIPT. EDIT TS FILE ONLY. !!!!!!!\n         *\n         * */\n        /* *\n         *\n         *  Constant\n         *\n         * */\n        /**\n         *\n         * The scrollbar is a means of panning over the X axis of a stock chart.\n         * Scrollbars can also be applied to other types of axes.\n         *\n         * Another approach to scrollable charts is the [chart.scrollablePlotArea](\n         * https://api.highcharts.com/highcharts/chart.scrollablePlotArea) option that\n         * is especially suitable for simpler cartesian charts on mobile.\n         *\n         * In styled mode, all the presentational options for the\n         * scrollbar are replaced by the classes `.highcharts-scrollbar-thumb`,\n         * `.highcharts-scrollbar-arrow`, `.highcharts-scrollbar-button`,\n         * `.highcharts-scrollbar-rifles` and `.highcharts-scrollbar-track`.\n         *\n         * @sample stock/yaxis/inverted-bar-scrollbar/\n         *         A scrollbar on a simple bar chart\n         *\n         * @product highstock gantt\n         * @optionparent scrollbar\n         *\n         * @private\n         */\n        const ScrollbarDefaults = {\n            /**\n             * The height of the scrollbar. If `buttonsEnabled` is true , the height\n             * also applies to the width of the scroll arrows so that they are always\n             * squares.\n             *\n             * @sample stock/scrollbar/style/\n             *         Non-default height\n             *\n             * @type    {number}\n             */\n            height: 10,\n            /**\n             * The border rounding radius of the bar.\n             *\n             * @sample stock/scrollbar/style/\n             *         Scrollbar styling\n             */\n            barBorderRadius: 5,\n            /**\n             * The corner radius of the scrollbar buttons.\n             *\n             * @sample stock/scrollbar/style/\n             *         Scrollbar styling\n             */\n            buttonBorderRadius: 0,\n            /**\n             * Enable or disable the buttons at the end of the scrollbar.\n             *\n             * @since 11.0.0\n             */\n            buttonsEnabled: false,\n            /**\n             * Enable or disable the scrollbar.\n             *\n             * @sample stock/scrollbar/enabled/\n             *         Disable the scrollbar, only use navigator\n             *\n             * @type      {boolean}\n             * @default   true\n             * @apioption scrollbar.enabled\n             */\n            /**\n             * Whether to redraw the main chart as the scrollbar or the navigator\n             * zoomed window is moved. Defaults to `true` for modern browsers and\n             * `false` for legacy IE browsers as well as mobile devices.\n             *\n             * @sample stock/scrollbar/liveredraw\n             *         Setting live redraw to false\n             *\n             * @type  {boolean}\n             * @since 1.3\n             */\n            liveRedraw: void 0,\n            /**\n             * The margin between the scrollbar and its axis when the scrollbar is\n             * applied directly to an axis, or the navigator in case that is enabled.\n             * Defaults to 10 for axis, 0 for navigator.\n             *\n             * @type {number|undefined}\n             */\n            margin: void 0,\n            /**\n             * The minimum width of the scrollbar.\n             *\n             * @since 1.2.5\n             */\n            minWidth: 6,\n            /** @ignore-option */\n            opposite: true,\n            /**\n             * Whether to show or hide the scrollbar when the scrolled content is\n             * zoomed out to it full extent.\n             *\n             * @type      {boolean}\n             * @default   true\n             * @apioption scrollbar.showFull\n             */\n            step: 0.2,\n            /**\n             * The z index of the scrollbar group.\n             */\n            zIndex: 3,\n            /**\n             * The background color of the scrollbar itself.\n             *\n             * @sample stock/scrollbar/style/\n             *         Scrollbar styling\n             *\n             * @type {Highcharts.ColorString|Highcharts.GradientColorObject|Highcharts.PatternObject}\n             */\n            barBackgroundColor: \"#cccccc\" /* Palette.neutralColor20 */,\n            /**\n             * The width of the bar's border.\n             *\n             * @sample stock/scrollbar/style/\n             *         Scrollbar styling\n             */\n            barBorderWidth: 0,\n            /**\n             * The color of the scrollbar's border.\n             *\n             * @type {Highcharts.ColorString|Highcharts.GradientColorObject|Highcharts.PatternObject}\n             */\n            barBorderColor: \"#cccccc\" /* Palette.neutralColor20 */,\n            /**\n             * The color of the small arrow inside the scrollbar buttons.\n             *\n             * @sample stock/scrollbar/style/\n             *         Scrollbar styling\n             *\n             * @type {Highcharts.ColorString|Highcharts.GradientColorObject|Highcharts.PatternObject}\n             */\n            buttonArrowColor: \"#333333\" /* Palette.neutralColor80 */,\n            /**\n             * The color of scrollbar buttons.\n             *\n             * @sample stock/scrollbar/style/\n             *         Scrollbar styling\n             *\n             * @type {Highcharts.ColorString|Highcharts.GradientColorObject|Highcharts.PatternObject}\n             */\n            buttonBackgroundColor: \"#e6e6e6\" /* Palette.neutralColor10 */,\n            /**\n             * The color of the border of the scrollbar buttons.\n             *\n             * @sample stock/scrollbar/style/\n             *         Scrollbar styling\n             *\n             * @type {Highcharts.ColorString|Highcharts.GradientColorObject|Highcharts.PatternObject}\n             */\n            buttonBorderColor: \"#cccccc\" /* Palette.neutralColor20 */,\n            /**\n             * The border width of the scrollbar buttons.\n             *\n             * @sample stock/scrollbar/style/\n             *         Scrollbar styling\n             */\n            buttonBorderWidth: 1,\n            /**\n             * The color of the small rifles in the middle of the scrollbar.\n             *\n             * @type {Highcharts.ColorString|Highcharts.GradientColorObject|Highcharts.PatternObject}\n             */\n            rifleColor: 'none',\n            /**\n             * The color of the track background.\n             *\n             * @sample stock/scrollbar/style/\n             *         Scrollbar styling\n             *\n             * @type {Highcharts.ColorString|Highcharts.GradientColorObject|Highcharts.PatternObject}\n             */\n            trackBackgroundColor: 'rgba(255, 255, 255, 0.001)',\n            /**\n             * The color of the border of the scrollbar track.\n             *\n             * @sample stock/scrollbar/style/\n             *         Scrollbar styling\n             *\n             * @type {Highcharts.ColorString|Highcharts.GradientColorObject|Highcharts.PatternObject}\n             */\n            trackBorderColor: \"#cccccc\" /* Palette.neutralColor20 */,\n            /**\n             * The corner radius of the border of the scrollbar track.\n             *\n             * @sample stock/scrollbar/style/\n             *         Scrollbar styling\n             */\n            trackBorderRadius: 5,\n            /**\n             * The width of the border of the scrollbar track.\n             *\n             * @sample stock/scrollbar/style/\n             *         Scrollbar styling\n             */\n            trackBorderWidth: 1\n        };\n        /* *\n         *\n         *  Default Export\n         *\n         * */\n\n        return ScrollbarDefaults;\n    });\n    _registerModule(_modules, 'Stock/Scrollbar/Scrollbar.js', [_modules['Core/Defaults.js'], _modules['Core/Globals.js'], _modules['Core/Axis/ScrollbarAxis.js'], _modules['Stock/Scrollbar/ScrollbarDefaults.js'], _modules['Core/Utilities.js']], function (D, H, ScrollbarAxis, ScrollbarDefaults, U) {\n        /* *\n         *\n         *  (c) 2010-2024 Torstein Honsi\n         *\n         *  License: www.highcharts.com/license\n         *\n         *  !!!!!!! SOURCE GETS TRANSPILED BY TYPESCRIPT. EDIT TS FILE ONLY. !!!!!!!\n         *\n         * */\n        const { defaultOptions } = D;\n        const { addEvent, correctFloat, defined, destroyObjectProperties, fireEvent, merge, pick, removeEvent } = U;\n        /* *\n         *\n         *  Constants\n         *\n         * */\n        /* eslint-disable no-invalid-this, valid-jsdoc */\n        /**\n         * A reusable scrollbar, internally used in Highcharts Stock's\n         * navigator and optionally on individual axes.\n         *\n         * @private\n         * @class\n         * @name Highcharts.Scrollbar\n         * @param {Highcharts.SVGRenderer} renderer\n         * @param {Highcharts.ScrollbarOptions} options\n         * @param {Highcharts.Chart} chart\n         */\n        class Scrollbar {\n            /* *\n             *\n             *  Static Functions\n             *\n             * */\n            static compose(AxisClass) {\n                ScrollbarAxis.compose(AxisClass, Scrollbar);\n            }\n            /**\n             * When we have vertical scrollbar, rifles and arrow in buttons should be\n             * rotated. The same method is used in Navigator's handles, to rotate them.\n             *\n             * @function Highcharts.swapXY\n             *\n             * @param {Highcharts.SVGPathArray} path\n             * Path to be rotated.\n             *\n             * @param {boolean} [vertical]\n             * If vertical scrollbar, swap x-y values.\n             *\n             * @return {Highcharts.SVGPathArray}\n             * Rotated path.\n             *\n             * @requires modules/stock\n             */\n            static swapXY(path, vertical) {\n                if (vertical) {\n                    path.forEach((seg) => {\n                        const len = seg.length;\n                        let temp;\n                        for (let i = 0; i < len; i += 2) {\n                            temp = seg[i + 1];\n                            if (typeof temp === 'number') {\n                                seg[i + 1] = seg[i + 2];\n                                seg[i + 2] = temp;\n                            }\n                        }\n                    });\n                }\n                return path;\n            }\n            /* *\n             *\n             *  Constructors\n             *\n             * */\n            constructor(renderer, options, chart) {\n                /* *\n                 *\n                 *  Properties\n                 *\n                 * */\n                this._events = [];\n                this.chartX = 0;\n                this.chartY = 0;\n                this.from = 0;\n                this.scrollbarButtons = [];\n                this.scrollbarLeft = 0;\n                this.scrollbarStrokeWidth = 1;\n                this.scrollbarTop = 0;\n                this.size = 0;\n                this.to = 0;\n                this.trackBorderWidth = 1;\n                this.x = 0;\n                this.y = 0;\n                this.init(renderer, options, chart);\n            }\n            /* *\n             *\n             *  Functions\n             *\n             * */\n            /**\n             * Set up the mouse and touch events for the Scrollbar\n             *\n             * @private\n             * @function Highcharts.Scrollbar#addEvents\n             */\n            addEvents() {\n                const buttonsOrder = this.options.inverted ? [1, 0] : [0, 1], buttons = this.scrollbarButtons, bar = this.scrollbarGroup.element, track = this.track.element, mouseDownHandler = this.mouseDownHandler.bind(this), mouseMoveHandler = this.mouseMoveHandler.bind(this), mouseUpHandler = this.mouseUpHandler.bind(this);\n                const _events = [\n                    // Mouse events\n                    [\n                        buttons[buttonsOrder[0]].element,\n                        'click',\n                        this.buttonToMinClick.bind(this)\n                    ],\n                    [\n                        buttons[buttonsOrder[1]].element,\n                        'click',\n                        this.buttonToMaxClick.bind(this)\n                    ],\n                    [track, 'click', this.trackClick.bind(this)],\n                    [bar, 'mousedown', mouseDownHandler],\n                    [bar.ownerDocument, 'mousemove', mouseMoveHandler],\n                    [bar.ownerDocument, 'mouseup', mouseUpHandler],\n                    // Touch events\n                    [bar, 'touchstart', mouseDownHandler],\n                    [bar.ownerDocument, 'touchmove', mouseMoveHandler],\n                    [bar.ownerDocument, 'touchend', mouseUpHandler]\n                ];\n                // Add them all\n                _events.forEach(function (args) {\n                    addEvent.apply(null, args);\n                });\n                this._events = _events;\n            }\n            buttonToMaxClick(e) {\n                const scroller = this;\n                const range = ((scroller.to - scroller.from) *\n                    pick(scroller.options.step, 0.2));\n                scroller.updatePosition(scroller.from + range, scroller.to + range);\n                fireEvent(scroller, 'changed', {\n                    from: scroller.from,\n                    to: scroller.to,\n                    trigger: 'scrollbar',\n                    DOMEvent: e\n                });\n            }\n            buttonToMinClick(e) {\n                const scroller = this;\n                const range = correctFloat(scroller.to - scroller.from) *\n                    pick(scroller.options.step, 0.2);\n                scroller.updatePosition(correctFloat(scroller.from - range), correctFloat(scroller.to - range));\n                fireEvent(scroller, 'changed', {\n                    from: scroller.from,\n                    to: scroller.to,\n                    trigger: 'scrollbar',\n                    DOMEvent: e\n                });\n            }\n            /**\n             * Get normalized (0-1) cursor position over the scrollbar\n             *\n             * @private\n             * @function Highcharts.Scrollbar#cursorToScrollbarPosition\n             *\n             * @param  {*} normalizedEvent\n             *         normalized event, with chartX and chartY values\n             *\n             * @return {Highcharts.Dictionary<number>}\n             *         Local position {chartX, chartY}\n             */\n            cursorToScrollbarPosition(normalizedEvent) {\n                const scroller = this, options = scroller.options, minWidthDifference = options.minWidth > scroller.calculatedWidth ?\n                    options.minWidth :\n                    0; // minWidth distorts translation\n                return {\n                    chartX: (normalizedEvent.chartX - scroller.x -\n                        scroller.xOffset) /\n                        (scroller.barWidth - minWidthDifference),\n                    chartY: (normalizedEvent.chartY - scroller.y -\n                        scroller.yOffset) /\n                        (scroller.barWidth - minWidthDifference)\n                };\n            }\n            /**\n             * Destroys allocated elements.\n             *\n             * @private\n             * @function Highcharts.Scrollbar#destroy\n             */\n            destroy() {\n                const scroller = this, navigator = scroller.chart.scroller;\n                // Disconnect events added in addEvents\n                scroller.removeEvents();\n                // Destroy properties\n                [\n                    'track',\n                    'scrollbarRifles',\n                    'scrollbar',\n                    'scrollbarGroup',\n                    'group'\n                ].forEach(function (prop) {\n                    if (scroller[prop] && scroller[prop].destroy) {\n                        scroller[prop] = scroller[prop].destroy();\n                    }\n                });\n                // #6421, chart may have more scrollbars\n                if (navigator && scroller === navigator.scrollbar) {\n                    navigator.scrollbar = null;\n                    // Destroy elements in collection\n                    destroyObjectProperties(navigator.scrollbarButtons);\n                }\n            }\n            /**\n             * Draw the scrollbar buttons with arrows\n             *\n             * @private\n             * @function Highcharts.Scrollbar#drawScrollbarButton\n             * @param {number} index\n             *        0 is left, 1 is right\n             */\n            drawScrollbarButton(index) {\n                const scroller = this, renderer = scroller.renderer, scrollbarButtons = scroller.scrollbarButtons, options = scroller.options, size = scroller.size, group = renderer.g().add(scroller.group);\n                scrollbarButtons.push(group);\n                if (options.buttonsEnabled) {\n                    // Create a rectangle for the scrollbar button\n                    const rect = renderer.rect()\n                        .addClass('highcharts-scrollbar-button')\n                        .add(group);\n                    // Presentational attributes\n                    if (!scroller.chart.styledMode) {\n                        rect.attr({\n                            stroke: options.buttonBorderColor,\n                            'stroke-width': options.buttonBorderWidth,\n                            fill: options.buttonBackgroundColor\n                        });\n                    }\n                    // Place the rectangle based on the rendered stroke width\n                    rect.attr(rect.crisp({\n                        x: -0.5,\n                        y: -0.5,\n                        // +1 to compensate for crispifying in rect method\n                        width: size + 1,\n                        height: size + 1,\n                        r: options.buttonBorderRadius\n                    }, rect.strokeWidth()));\n                    // Button arrow\n                    const arrow = renderer\n                        .path(Scrollbar.swapXY([[\n                            'M',\n                            size / 2 + (index ? -1 : 1),\n                            size / 2 - 3\n                        ], [\n                            'L',\n                            size / 2 + (index ? -1 : 1),\n                            size / 2 + 3\n                        ], [\n                            'L',\n                            size / 2 + (index ? 2 : -2),\n                            size / 2\n                        ]], options.vertical))\n                        .addClass('highcharts-scrollbar-arrow')\n                        .add(scrollbarButtons[index]);\n                    if (!scroller.chart.styledMode) {\n                        arrow.attr({\n                            fill: options.buttonArrowColor\n                        });\n                    }\n                }\n            }\n            /**\n             * @private\n             * @function Highcharts.Scrollbar#init\n             * @param {Highcharts.SVGRenderer} renderer\n             * @param {Highcharts.ScrollbarOptions} options\n             * @param {Highcharts.Chart} chart\n             */\n            init(renderer, options, chart) {\n                const scroller = this;\n                scroller.scrollbarButtons = [];\n                scroller.renderer = renderer;\n                scroller.userOptions = options;\n                scroller.options = merge(ScrollbarDefaults, defaultOptions.scrollbar, options);\n                scroller.options.margin = pick(scroller.options.margin, 10);\n                scroller.chart = chart;\n                // backward compatibility\n                scroller.size = pick(scroller.options.size, scroller.options.height);\n                // Init\n                if (options.enabled) {\n                    scroller.render();\n                    scroller.addEvents();\n                }\n            }\n            mouseDownHandler(e) {\n                const scroller = this, normalizedEvent = scroller.chart.pointer?.normalize(e) || e, mousePosition = scroller.cursorToScrollbarPosition(normalizedEvent);\n                scroller.chartX = mousePosition.chartX;\n                scroller.chartY = mousePosition.chartY;\n                scroller.initPositions = [scroller.from, scroller.to];\n                scroller.grabbedCenter = true;\n            }\n            /**\n             * Event handler for the mouse move event.\n             * @private\n             */\n            mouseMoveHandler(e) {\n                const scroller = this, normalizedEvent = scroller.chart.pointer?.normalize(e) || e, options = scroller.options, direction = options.vertical ?\n                    'chartY' : 'chartX', initPositions = scroller.initPositions || [];\n                let scrollPosition, chartPosition, change;\n                // In iOS, a mousemove event with e.pageX === 0 is fired when\n                // holding the finger down in the center of the scrollbar. This\n                // should be ignored.\n                if (scroller.grabbedCenter &&\n                    // #4696, scrollbar failed on Android\n                    (!e.touches || e.touches[0][direction] !== 0)) {\n                    chartPosition = scroller.cursorToScrollbarPosition(normalizedEvent)[direction];\n                    scrollPosition = scroller[direction];\n                    change = chartPosition - scrollPosition;\n                    scroller.hasDragged = true;\n                    scroller.updatePosition(initPositions[0] + change, initPositions[1] + change);\n                    if (scroller.hasDragged) {\n                        fireEvent(scroller, 'changed', {\n                            from: scroller.from,\n                            to: scroller.to,\n                            trigger: 'scrollbar',\n                            DOMType: e.type,\n                            DOMEvent: e\n                        });\n                    }\n                }\n            }\n            /**\n             * Event handler for the mouse up event.\n             * @private\n             */\n            mouseUpHandler(e) {\n                const scroller = this;\n                if (scroller.hasDragged) {\n                    fireEvent(scroller, 'changed', {\n                        from: scroller.from,\n                        to: scroller.to,\n                        trigger: 'scrollbar',\n                        DOMType: e.type,\n                        DOMEvent: e\n                    });\n                }\n                scroller.grabbedCenter =\n                    scroller.hasDragged =\n                        scroller.chartX =\n                            scroller.chartY = null;\n            }\n            /**\n             * Position the scrollbar, method called from a parent with defined\n             * dimensions.\n             *\n             * @private\n             * @function Highcharts.Scrollbar#position\n             * @param {number} x\n             *        x-position on the chart\n             * @param {number} y\n             *        y-position on the chart\n             * @param {number} width\n             *        width of the scrollbar\n             * @param {number} height\n             *        height of the scrollbar\n             */\n            position(x, y, width, height) {\n                const scroller = this, options = scroller.options, { buttonsEnabled, margin = 0, vertical } = options, method = scroller.rendered ? 'animate' : 'attr';\n                let xOffset = height, yOffset = 0;\n                // Make the scrollbar visible when it is repositioned, #15763.\n                scroller.group.show();\n                scroller.x = x;\n                scroller.y = y + this.trackBorderWidth;\n                scroller.width = width; // width with buttons\n                scroller.height = height;\n                scroller.xOffset = xOffset;\n                scroller.yOffset = yOffset;\n                // If Scrollbar is a vertical type, swap options:\n                if (vertical) {\n                    scroller.width = scroller.yOffset = width = yOffset = scroller.size;\n                    scroller.xOffset = xOffset = 0;\n                    scroller.yOffset = yOffset = buttonsEnabled ? scroller.size : 0;\n                    // width without buttons\n                    scroller.barWidth = height - (buttonsEnabled ? width * 2 : 0);\n                    scroller.x = x = x + margin;\n                }\n                else {\n                    scroller.height = height = scroller.size;\n                    scroller.xOffset = xOffset = buttonsEnabled ? scroller.size : 0;\n                    // width without buttons\n                    scroller.barWidth = width - (buttonsEnabled ? height * 2 : 0);\n                    scroller.y = scroller.y + margin;\n                }\n                // Set general position for a group:\n                scroller.group[method]({\n                    translateX: x,\n                    translateY: scroller.y\n                });\n                // Resize background/track:\n                scroller.track[method]({\n                    width: width,\n                    height: height\n                });\n                // Move right/bottom button to its place:\n                scroller.scrollbarButtons[1][method]({\n                    translateX: vertical ? 0 : width - xOffset,\n                    translateY: vertical ? height - yOffset : 0\n                });\n            }\n            /**\n             * Removes the event handlers attached previously with addEvents.\n             *\n             * @private\n             * @function Highcharts.Scrollbar#removeEvents\n             */\n            removeEvents() {\n                this._events.forEach(function (args) {\n                    removeEvent.apply(null, args);\n                });\n                this._events.length = 0;\n            }\n            /**\n             * Render scrollbar with all required items.\n             *\n             * @private\n             * @function Highcharts.Scrollbar#render\n             */\n            render() {\n                const scroller = this, renderer = scroller.renderer, options = scroller.options, size = scroller.size, styledMode = scroller.chart.styledMode, group = renderer.g('scrollbar')\n                    .attr({\n                    zIndex: options.zIndex\n                })\n                    .hide() // initially hide the scrollbar #15863\n                    .add();\n                // Draw the scrollbar group\n                scroller.group = group;\n                // Draw the scrollbar track:\n                scroller.track = renderer.rect()\n                    .addClass('highcharts-scrollbar-track')\n                    .attr({\n                    r: options.trackBorderRadius || 0,\n                    height: size,\n                    width: size\n                }).add(group);\n                if (!styledMode) {\n                    scroller.track.attr({\n                        fill: options.trackBackgroundColor,\n                        stroke: options.trackBorderColor,\n                        'stroke-width': options.trackBorderWidth\n                    });\n                }\n                const trackBorderWidth = scroller.trackBorderWidth =\n                    scroller.track.strokeWidth();\n                scroller.track.attr({\n                    x: -trackBorderWidth % 2 / 2,\n                    y: -trackBorderWidth % 2 / 2\n                });\n                // Draw the scrollbar itself\n                scroller.scrollbarGroup = renderer.g().add(group);\n                scroller.scrollbar = renderer.rect()\n                    .addClass('highcharts-scrollbar-thumb')\n                    .attr({\n                    height: size - trackBorderWidth,\n                    width: size - trackBorderWidth,\n                    r: options.barBorderRadius || 0\n                }).add(scroller.scrollbarGroup);\n                scroller.scrollbarRifles = renderer\n                    .path(Scrollbar.swapXY([\n                    ['M', -3, size / 4],\n                    ['L', -3, 2 * size / 3],\n                    ['M', 0, size / 4],\n                    ['L', 0, 2 * size / 3],\n                    ['M', 3, size / 4],\n                    ['L', 3, 2 * size / 3]\n                ], options.vertical))\n                    .addClass('highcharts-scrollbar-rifles')\n                    .add(scroller.scrollbarGroup);\n                if (!styledMode) {\n                    scroller.scrollbar.attr({\n                        fill: options.barBackgroundColor,\n                        stroke: options.barBorderColor,\n                        'stroke-width': options.barBorderWidth\n                    });\n                    scroller.scrollbarRifles.attr({\n                        stroke: options.rifleColor,\n                        'stroke-width': 1\n                    });\n                }\n                scroller.scrollbarStrokeWidth = scroller.scrollbar.strokeWidth();\n                scroller.scrollbarGroup.translate(-scroller.scrollbarStrokeWidth % 2 / 2, -scroller.scrollbarStrokeWidth % 2 / 2);\n                // Draw the buttons:\n                scroller.drawScrollbarButton(0);\n                scroller.drawScrollbarButton(1);\n            }\n            /**\n             * Set scrollbar size, with a given scale.\n             *\n             * @private\n             * @function Highcharts.Scrollbar#setRange\n             * @param {number} from\n             *        scale (0-1) where bar should start\n             * @param {number} to\n             *        scale (0-1) where bar should end\n             */\n            setRange(from, to) {\n                const scroller = this, options = scroller.options, vertical = options.vertical, minWidth = options.minWidth, fullWidth = scroller.barWidth, method = (this.rendered &&\n                    !this.hasDragged &&\n                    !(this.chart.navigator && this.chart.navigator.hasDragged)) ? 'animate' : 'attr';\n                if (!defined(fullWidth)) {\n                    return;\n                }\n                const toPX = fullWidth * Math.min(to, 1);\n                let fromPX, newSize;\n                from = Math.max(from, 0);\n                fromPX = Math.ceil(fullWidth * from);\n                scroller.calculatedWidth = newSize = correctFloat(toPX - fromPX);\n                // We need to recalculate position, if minWidth is used\n                if (newSize < minWidth) {\n                    fromPX = (fullWidth - minWidth + newSize) * from;\n                    newSize = minWidth;\n                }\n                const newPos = Math.floor(fromPX + scroller.xOffset + scroller.yOffset);\n                const newRiflesPos = newSize / 2 - 0.5; // -0.5 -> rifle line width / 2\n                // Store current position:\n                scroller.from = from;\n                scroller.to = to;\n                if (!vertical) {\n                    scroller.scrollbarGroup[method]({\n                        translateX: newPos\n                    });\n                    scroller.scrollbar[method]({\n                        width: newSize\n                    });\n                    scroller.scrollbarRifles[method]({\n                        translateX: newRiflesPos\n                    });\n                    scroller.scrollbarLeft = newPos;\n                    scroller.scrollbarTop = 0;\n                }\n                else {\n                    scroller.scrollbarGroup[method]({\n                        translateY: newPos\n                    });\n                    scroller.scrollbar[method]({\n                        height: newSize\n                    });\n                    scroller.scrollbarRifles[method]({\n                        translateY: newRiflesPos\n                    });\n                    scroller.scrollbarTop = newPos;\n                    scroller.scrollbarLeft = 0;\n                }\n                if (newSize <= 12) {\n                    scroller.scrollbarRifles.hide();\n                }\n                else {\n                    scroller.scrollbarRifles.show();\n                }\n                // Show or hide the scrollbar based on the showFull setting\n                if (options.showFull === false) {\n                    if (from <= 0 && to >= 1) {\n                        scroller.group.hide();\n                    }\n                    else {\n                        scroller.group.show();\n                    }\n                }\n                scroller.rendered = true;\n            }\n            /**\n             * Checks if the extremes should be updated in response to a scrollbar\n             * change event.\n             *\n             * @private\n             * @function Highcharts.Scrollbar#shouldUpdateExtremes\n             */\n            shouldUpdateExtremes(eventType) {\n                return (pick(this.options.liveRedraw, H.svg &&\n                    !H.isTouchDevice &&\n                    !this.chart.boosted) ||\n                    // Mouseup always should change extremes\n                    eventType === 'mouseup' ||\n                    eventType === 'touchend' ||\n                    // Internal events\n                    !defined(eventType));\n            }\n            trackClick(e) {\n                const scroller = this;\n                const normalizedEvent = scroller.chart.pointer?.normalize(e) || e, range = scroller.to - scroller.from, top = scroller.y + scroller.scrollbarTop, left = scroller.x + scroller.scrollbarLeft;\n                if ((scroller.options.vertical && normalizedEvent.chartY > top) ||\n                    (!scroller.options.vertical && normalizedEvent.chartX > left)) {\n                    // On the top or on the left side of the track:\n                    scroller.updatePosition(scroller.from + range, scroller.to + range);\n                }\n                else {\n                    // On the bottom or the right side of the track:\n                    scroller.updatePosition(scroller.from - range, scroller.to - range);\n                }\n                fireEvent(scroller, 'changed', {\n                    from: scroller.from,\n                    to: scroller.to,\n                    trigger: 'scrollbar',\n                    DOMEvent: e\n                });\n            }\n            /**\n             * Update the scrollbar with new options\n             *\n             * @private\n             * @function Highcharts.Scrollbar#update\n             * @param  {Highcharts.ScrollbarOptions} options\n             */\n            update(options) {\n                this.destroy();\n                this.init(this.chart.renderer, merge(true, this.options, options), this.chart);\n            }\n            /**\n             * Update position option in the Scrollbar, with normalized 0-1 scale\n             *\n             * @private\n             * @function Highcharts.Scrollbar#updatePosition\n             * @param  {number} from\n             * @param  {number} to\n             */\n            updatePosition(from, to) {\n                if (to > 1) {\n                    from = correctFloat(1 - correctFloat(to - from));\n                    to = 1;\n                }\n                if (from < 0) {\n                    to = correctFloat(to - from);\n                    from = 0;\n                }\n                this.from = from;\n                this.to = to;\n            }\n        }\n        /* *\n         *\n         *  Static Properties\n         *\n         * */\n        Scrollbar.defaultOptions = ScrollbarDefaults;\n        /* *\n         *\n         *  Registry\n         *\n         * */\n        defaultOptions.scrollbar = merge(true, Scrollbar.defaultOptions, defaultOptions.scrollbar);\n        /* *\n         *\n         *  Default Export\n         *\n         * */\n\n        return Scrollbar;\n    });\n    _registerModule(_modules, 'Stock/Navigator/Navigator.js', [_modules['Core/Axis/Axis.js'], _modules['Stock/Navigator/ChartNavigatorComposition.js'], _modules['Core/Defaults.js'], _modules['Core/Globals.js'], _modules['Core/Axis/NavigatorAxisComposition.js'], _modules['Stock/Navigator/NavigatorComposition.js'], _modules['Stock/Scrollbar/Scrollbar.js'], _modules['Core/Utilities.js']], function (Axis, ChartNavigatorComposition, D, H, NavigatorAxisAdditions, NavigatorComposition, Scrollbar, U) {\n        /* *\n         *\n         *  (c) 2010-2024 Torstein Honsi\n         *\n         *  License: www.highcharts.com/license\n         *\n         *  !!!!!!! SOURCE GETS TRANSPILED BY TYPESCRIPT. EDIT TS FILE ONLY. !!!!!!!\n         *\n         * */\n        const { defaultOptions } = D;\n        const { isTouchDevice } = H;\n        const { addEvent, clamp, correctFloat, defined, destroyObjectProperties, erase, extend, find, fireEvent, isArray, isNumber, merge, pick, removeEvent, splat } = U;\n        /* *\n         *\n         *  Functions\n         *\n         * */\n        /**\n         * Finding the min or max of a set of variables where we don't know if they are\n         * defined, is a pattern that is repeated several places in Highcharts. Consider\n         * making this a global utility method.\n         * @private\n         */\n        function numExt(extreme, ...args) {\n            const numbers = [].filter.call(args, isNumber);\n            if (numbers.length) {\n                return Math[extreme].apply(0, numbers);\n            }\n        }\n        /* *\n         *\n         *  Class\n         *\n         * */\n        /**\n         * The Navigator class\n         *\n         * @private\n         * @class\n         * @name Highcharts.Navigator\n         *\n         * @param {Highcharts.Chart} chart\n         *        Chart object\n         */\n        class Navigator {\n            /* *\n             *\n             *  Static Properties\n             *\n             * */\n            static compose(ChartClass, AxisClass, SeriesClass) {\n                ChartNavigatorComposition.compose(ChartClass, Navigator);\n                NavigatorComposition.compose(ChartClass, AxisClass, SeriesClass);\n            }\n            /* *\n             *\n             *  Constructor\n             *\n             * */\n            constructor(chart) {\n                this.scrollbarHeight = 0;\n                this.init(chart);\n            }\n            /* *\n             *\n             *  Functions\n             *\n             * */\n            /**\n             * Draw one of the handles on the side of the zoomed range in the navigator.\n             *\n             * @private\n             * @function Highcharts.Navigator#drawHandle\n             *\n             * @param {number} x\n             *        The x center for the handle\n             *\n             * @param {number} index\n             *        0 for left and 1 for right\n             *\n             * @param {boolean|undefined} inverted\n             *        Flag for chart.inverted\n             *\n             * @param {string} verb\n             *        Use 'animate' or 'attr'\n             */\n            drawHandle(x, index, inverted, verb) {\n                const navigator = this, height = navigator.navigatorOptions.handles.height;\n                // Place it\n                navigator.handles[index][verb](inverted ? {\n                    translateX: Math.round(navigator.left + navigator.height / 2),\n                    translateY: Math.round(navigator.top + parseInt(x, 10) + 0.5 - height)\n                } : {\n                    translateX: Math.round(navigator.left + parseInt(x, 10)),\n                    translateY: Math.round(navigator.top + navigator.height / 2 - height / 2 - 1)\n                });\n            }\n            /**\n             * Render outline around the zoomed range\n             *\n             * @private\n             * @function Highcharts.Navigator#drawOutline\n             *\n             * @param {number} zoomedMin\n             *        in pixels position where zoomed range starts\n             *\n             * @param {number} zoomedMax\n             *        in pixels position where zoomed range ends\n             *\n             * @param {boolean|undefined} inverted\n             *        flag if chart is inverted\n             *\n             * @param {string} verb\n             *        use 'animate' or 'attr'\n             */\n            drawOutline(zoomedMin, zoomedMax, inverted, verb) {\n                const navigator = this, maskInside = navigator.navigatorOptions.maskInside, outlineWidth = navigator.outline.strokeWidth(), halfOutline = outlineWidth / 2, outlineCorrection = (outlineWidth % 2) / 2, // #5800\n                scrollButtonSize = navigator.scrollButtonSize, navigatorSize = navigator.size, navigatorTop = navigator.top, height = navigator.height, lineTop = navigatorTop - halfOutline, lineBtm = navigatorTop + height;\n                let left = navigator.left, verticalMin, path;\n                if (inverted) {\n                    verticalMin = navigatorTop + zoomedMax + outlineCorrection;\n                    zoomedMax = navigatorTop + zoomedMin + outlineCorrection;\n                    path = [\n                        [\n                            'M',\n                            left + height,\n                            navigatorTop - scrollButtonSize - outlineCorrection\n                        ],\n                        // top right of zoomed range\n                        ['L', left + height, verticalMin],\n                        ['L', left, verticalMin],\n                        ['M', left, zoomedMax],\n                        ['L', left + height, zoomedMax],\n                        [\n                            'L',\n                            left + height,\n                            navigatorTop + navigatorSize + scrollButtonSize\n                        ]\n                    ];\n                    if (maskInside) {\n                        path.push(\n                        // upper left of zoomed range\n                        ['M', left + height, verticalMin - halfOutline], \n                        // upper right of z.r.\n                        [\n                            'L',\n                            left + height,\n                            zoomedMax + halfOutline\n                        ]);\n                    }\n                }\n                else {\n                    left -= scrollButtonSize;\n                    zoomedMin += left + scrollButtonSize - outlineCorrection;\n                    zoomedMax += left + scrollButtonSize - outlineCorrection;\n                    path = [\n                        // left\n                        ['M', left, lineTop],\n                        // upper left of zoomed range\n                        ['L', zoomedMin, lineTop],\n                        // lower left of z.r.\n                        ['L', zoomedMin, lineBtm],\n                        // lower right of z.r.\n                        ['M', zoomedMax, lineBtm],\n                        // upper right of z.r.\n                        ['L', zoomedMax, lineTop],\n                        // right\n                        [\n                            'L',\n                            left + navigatorSize + scrollButtonSize * 2,\n                            navigatorTop + halfOutline\n                        ]\n                    ];\n                    if (maskInside) {\n                        path.push(\n                        // upper left of zoomed range\n                        ['M', zoomedMin - halfOutline, lineTop], \n                        // upper right of z.r.\n                        ['L', zoomedMax + halfOutline, lineTop]);\n                    }\n                }\n                navigator.outline[verb]({\n                    d: path\n                });\n            }\n            /**\n             * Render outline around the zoomed range\n             *\n             * @private\n             * @function Highcharts.Navigator#drawMasks\n             *\n             * @param {number} zoomedMin\n             *        in pixels position where zoomed range starts\n             *\n             * @param {number} zoomedMax\n             *        in pixels position where zoomed range ends\n             *\n             * @param {boolean|undefined} inverted\n             *        flag if chart is inverted\n             *\n             * @param {string} verb\n             *        use 'animate' or 'attr'\n             */\n            drawMasks(zoomedMin, zoomedMax, inverted, verb) {\n                const navigator = this, left = navigator.left, top = navigator.top, navigatorHeight = navigator.height;\n                let height, width, x, y;\n                // Determine rectangle position & size\n                // According to (non)inverted position:\n                if (inverted) {\n                    x = [left, left, left];\n                    y = [top, top + zoomedMin, top + zoomedMax];\n                    width = [navigatorHeight, navigatorHeight, navigatorHeight];\n                    height = [\n                        zoomedMin,\n                        zoomedMax - zoomedMin,\n                        navigator.size - zoomedMax\n                    ];\n                }\n                else {\n                    x = [left, left + zoomedMin, left + zoomedMax];\n                    y = [top, top, top];\n                    width = [\n                        zoomedMin,\n                        zoomedMax - zoomedMin,\n                        navigator.size - zoomedMax\n                    ];\n                    height = [navigatorHeight, navigatorHeight, navigatorHeight];\n                }\n                navigator.shades.forEach((shade, i) => {\n                    shade[verb]({\n                        x: x[i],\n                        y: y[i],\n                        width: width[i],\n                        height: height[i]\n                    });\n                });\n            }\n            /**\n             * Generate DOM elements for a navigator:\n             *\n             * - main navigator group\n             *\n             * - all shades\n             *\n             * - outline\n             *\n             * - handles\n             *\n             * @private\n             * @function Highcharts.Navigator#renderElements\n             */\n            renderElements() {\n                const navigator = this, navigatorOptions = navigator.navigatorOptions, maskInside = navigatorOptions.maskInside, chart = navigator.chart, inverted = chart.inverted, renderer = chart.renderer, mouseCursor = {\n                    cursor: inverted ? 'ns-resize' : 'ew-resize'\n                }, \n                // Create the main navigator group\n                navigatorGroup = navigator.navigatorGroup = renderer\n                    .g('navigator')\n                    .attr({\n                    zIndex: 8,\n                    visibility: 'hidden'\n                })\n                    .add();\n                // Create masks, each mask will get events and fill:\n                [\n                    !maskInside,\n                    maskInside,\n                    !maskInside\n                ].forEach((hasMask, index) => {\n                    const shade = renderer.rect()\n                        .addClass('highcharts-navigator-mask' +\n                        (index === 1 ? '-inside' : '-outside'))\n                        .add(navigatorGroup);\n                    if (!chart.styledMode) {\n                        shade.attr({\n                            fill: hasMask ?\n                                navigatorOptions.maskFill :\n                                'rgba(0,0,0,0)'\n                        });\n                        if (index === 1) {\n                            shade.css(mouseCursor);\n                        }\n                    }\n                    navigator.shades[index] = shade;\n                });\n                // Create the outline:\n                navigator.outline = renderer.path()\n                    .addClass('highcharts-navigator-outline')\n                    .add(navigatorGroup);\n                if (!chart.styledMode) {\n                    navigator.outline.attr({\n                        'stroke-width': navigatorOptions.outlineWidth,\n                        stroke: navigatorOptions.outlineColor\n                    });\n                }\n                // Create the handlers:\n                if (navigatorOptions.handles && navigatorOptions.handles.enabled) {\n                    const handlesOptions = navigatorOptions.handles, { height, width } = handlesOptions;\n                    [0, 1].forEach((index) => {\n                        navigator.handles[index] = renderer.symbol(handlesOptions.symbols[index], -width / 2 - 1, 0, width, height, handlesOptions);\n                        if (chart.inverted) {\n                            navigator.handles[index].attr({\n                                rotation: 90,\n                                rotationOriginX: Math.floor(-width / 2),\n                                rotationOriginY: (height + width) / 2\n                            });\n                        }\n                        // zIndex = 6 for right handle, 7 for left.\n                        // Can't be 10, because of the tooltip in inverted chart #2908\n                        navigator.handles[index].attr({ zIndex: 7 - index })\n                            .addClass('highcharts-navigator-handle ' +\n                            'highcharts-navigator-handle-' +\n                            ['left', 'right'][index]).add(navigatorGroup);\n                        if (!chart.styledMode) {\n                            navigator.handles[index]\n                                .attr({\n                                fill: handlesOptions.backgroundColor,\n                                stroke: handlesOptions.borderColor,\n                                'stroke-width': handlesOptions.lineWidth\n                            })\n                                .css(mouseCursor);\n                        }\n                    });\n                }\n            }\n            /**\n             * Update navigator\n             *\n             * @private\n             * @function Highcharts.Navigator#update\n             *\n             * @param {Highcharts.NavigatorOptions} options\n             *        Options to merge in when updating navigator\n             */\n            update(options) {\n                // Remove references to old navigator series in base series\n                (this.series || []).forEach((series) => {\n                    if (series.baseSeries) {\n                        delete series.baseSeries.navigatorSeries;\n                    }\n                });\n                // Destroy and rebuild navigator\n                this.destroy();\n                const chartOptions = this.chart.options;\n                merge(true, chartOptions.navigator, options);\n                this.init(this.chart);\n            }\n            /**\n             * Render the navigator\n             *\n             * @private\n             * @function Highcharts.Navigator#render\n             * @param {number} min\n             *        X axis value minimum\n             * @param {number} max\n             *        X axis value maximum\n             * @param {number} [pxMin]\n             *        Pixel value minimum\n             * @param {number} [pxMax]\n             *        Pixel value maximum\n             */\n            render(min, max, pxMin, pxMax) {\n                const navigator = this, chart = navigator.chart, xAxis = navigator.xAxis, pointRange = xAxis.pointRange || 0, scrollbarXAxis = xAxis.navigatorAxis.fake ? chart.xAxis[0] : xAxis, navigatorEnabled = navigator.navigatorEnabled, rendered = navigator.rendered, inverted = chart.inverted, minRange = chart.xAxis[0].minRange, maxRange = chart.xAxis[0].options.maxRange, scrollButtonSize = navigator.scrollButtonSize;\n                let navigatorWidth, scrollbarLeft, scrollbarTop, scrollbarHeight = navigator.scrollbarHeight, navigatorSize, verb;\n                // Don't redraw while moving the handles (#4703).\n                if (this.hasDragged && !defined(pxMin)) {\n                    return;\n                }\n                min = correctFloat(min - pointRange / 2);\n                max = correctFloat(max + pointRange / 2);\n                // Don't render the navigator until we have data (#486, #4202, #5172).\n                if (!isNumber(min) || !isNumber(max)) {\n                    // However, if navigator was already rendered, we may need to resize\n                    // it. For example hidden series, but visible navigator (#6022).\n                    if (rendered) {\n                        pxMin = 0;\n                        pxMax = pick(xAxis.width, scrollbarXAxis.width);\n                    }\n                    else {\n                        return;\n                    }\n                }\n                navigator.left = pick(xAxis.left, \n                // in case of scrollbar only, without navigator\n                chart.plotLeft + scrollButtonSize +\n                    (inverted ? chart.plotWidth : 0));\n                let zoomedMax = navigator.size = navigatorSize = pick(xAxis.len, (inverted ? chart.plotHeight : chart.plotWidth) -\n                    2 * scrollButtonSize);\n                if (inverted) {\n                    navigatorWidth = scrollbarHeight;\n                }\n                else {\n                    navigatorWidth = navigatorSize + 2 * scrollButtonSize;\n                }\n                // Get the pixel position of the handles\n                pxMin = pick(pxMin, xAxis.toPixels(min, true));\n                pxMax = pick(pxMax, xAxis.toPixels(max, true));\n                // Verify (#1851, #2238)\n                if (!isNumber(pxMin) || Math.abs(pxMin) === Infinity) {\n                    pxMin = 0;\n                    pxMax = navigatorWidth;\n                }\n                // Are we below the minRange? (#2618, #6191)\n                const newMin = xAxis.toValue(pxMin, true), newMax = xAxis.toValue(pxMax, true), currentRange = Math.abs(correctFloat(newMax - newMin));\n                if (currentRange < minRange) {\n                    if (this.grabbedLeft) {\n                        pxMin = xAxis.toPixels(newMax - minRange - pointRange, true);\n                    }\n                    else if (this.grabbedRight) {\n                        pxMax = xAxis.toPixels(newMin + minRange + pointRange, true);\n                    }\n                }\n                else if (defined(maxRange) &&\n                    correctFloat(currentRange - pointRange) > maxRange) {\n                    if (this.grabbedLeft) {\n                        pxMin = xAxis.toPixels(newMax - maxRange - pointRange, true);\n                    }\n                    else if (this.grabbedRight) {\n                        pxMax = xAxis.toPixels(newMin + maxRange + pointRange, true);\n                    }\n                }\n                // Handles are allowed to cross, but never exceed the plot area\n                navigator.zoomedMax = clamp(Math.max(pxMin, pxMax), 0, zoomedMax);\n                navigator.zoomedMin = clamp(navigator.fixedWidth ?\n                    navigator.zoomedMax - navigator.fixedWidth :\n                    Math.min(pxMin, pxMax), 0, zoomedMax);\n                navigator.range = navigator.zoomedMax - navigator.zoomedMin;\n                zoomedMax = Math.round(navigator.zoomedMax);\n                const zoomedMin = Math.round(navigator.zoomedMin);\n                if (navigatorEnabled) {\n                    navigator.navigatorGroup.attr({\n                        visibility: 'inherit'\n                    });\n                    // Place elements\n                    verb = rendered && !navigator.hasDragged ? 'animate' : 'attr';\n                    navigator.drawMasks(zoomedMin, zoomedMax, inverted, verb);\n                    navigator.drawOutline(zoomedMin, zoomedMax, inverted, verb);\n                    if (navigator.navigatorOptions.handles.enabled) {\n                        navigator.drawHandle(zoomedMin, 0, inverted, verb);\n                        navigator.drawHandle(zoomedMax, 1, inverted, verb);\n                    }\n                }\n                if (navigator.scrollbar) {\n                    if (inverted) {\n                        scrollbarTop = navigator.top - scrollButtonSize;\n                        scrollbarLeft = navigator.left - scrollbarHeight +\n                            (navigatorEnabled || !scrollbarXAxis.opposite ? 0 :\n                                // Multiple axes has offsets:\n                                (scrollbarXAxis.titleOffset || 0) +\n                                    // Self margin from the axis.title\n                                    scrollbarXAxis.axisTitleMargin);\n                        scrollbarHeight = navigatorSize + 2 * scrollButtonSize;\n                    }\n                    else {\n                        scrollbarTop = navigator.top + (navigatorEnabled ?\n                            navigator.height :\n                            -scrollbarHeight);\n                        scrollbarLeft = navigator.left - scrollButtonSize;\n                    }\n                    // Reposition scrollbar\n                    navigator.scrollbar.position(scrollbarLeft, scrollbarTop, navigatorWidth, scrollbarHeight);\n                    // Keep scale 0-1\n                    navigator.scrollbar.setRange(\n                    // Use real value, not rounded because range can be very small\n                    // (#1716)\n                    navigator.zoomedMin / (navigatorSize || 1), navigator.zoomedMax / (navigatorSize || 1));\n                }\n                navigator.rendered = true;\n                fireEvent(this, 'afterRender');\n            }\n            /**\n             * Set up the mouse and touch events for the navigator\n             *\n             * @private\n             * @function Highcharts.Navigator#addMouseEvents\n             */\n            addMouseEvents() {\n                const navigator = this, chart = navigator.chart, container = chart.container;\n                let eventsToUnbind = [], mouseMoveHandler, mouseUpHandler;\n                /**\n                 * Create mouse events' handlers.\n                 * Make them as separate functions to enable wrapping them:\n                 */\n                navigator.mouseMoveHandler = mouseMoveHandler = function (e) {\n                    navigator.onMouseMove(e);\n                };\n                navigator.mouseUpHandler = mouseUpHandler = function (e) {\n                    navigator.onMouseUp(e);\n                };\n                // Add shades and handles mousedown events\n                eventsToUnbind = navigator.getPartsEvents('mousedown');\n                eventsToUnbind.push(\n                // Add mouse move and mouseup events. These are bind to doc/div,\n                // because Navigator.grabbedSomething flags are stored in mousedown\n                // events\n                addEvent(chart.renderTo, 'mousemove', mouseMoveHandler), addEvent(container.ownerDocument, 'mouseup', mouseUpHandler), \n                // Touch events\n                addEvent(chart.renderTo, 'touchmove', mouseMoveHandler), addEvent(container.ownerDocument, 'touchend', mouseUpHandler));\n                eventsToUnbind.concat(navigator.getPartsEvents('touchstart'));\n                navigator.eventsToUnbind = eventsToUnbind;\n                // Data events\n                if (navigator.series && navigator.series[0]) {\n                    eventsToUnbind.push(addEvent(navigator.series[0].xAxis, 'foundExtremes', function () {\n                        chart.navigator.modifyNavigatorAxisExtremes();\n                    }));\n                }\n            }\n            /**\n             * Generate events for handles and masks\n             *\n             * @private\n             * @function Highcharts.Navigator#getPartsEvents\n             *\n             * @param {string} eventName\n             *        Event name handler, 'mousedown' or 'touchstart'\n             *\n             * @return {Array<Function>}\n             *         An array of functions to remove navigator functions from the\n             *         events again.\n             */\n            getPartsEvents(eventName) {\n                const navigator = this, events = [];\n                ['shades', 'handles'].forEach(function (name) {\n                    navigator[name].forEach(function (navigatorItem, index) {\n                        events.push(addEvent(navigatorItem.element, eventName, function (e) {\n                            navigator[name + 'Mousedown'](e, index);\n                        }));\n                    });\n                });\n                return events;\n            }\n            /**\n             * Mousedown on a shaded mask, either:\n             *\n             * - will be stored for future drag&drop\n             *\n             * - will directly shift to a new range\n             *\n             * @private\n             * @function Highcharts.Navigator#shadesMousedown\n             *\n             * @param {Highcharts.PointerEventObject} e\n             *        Mouse event\n             *\n             * @param {number} index\n             *        Index of a mask in Navigator.shades array\n             */\n            shadesMousedown(e, index) {\n                e = this.chart.pointer?.normalize(e) || e;\n                const navigator = this, chart = navigator.chart, xAxis = navigator.xAxis, zoomedMin = navigator.zoomedMin, navigatorSize = navigator.size, range = navigator.range;\n                let navigatorPosition = navigator.left, chartX = e.chartX, fixedMax, fixedMin, ext, left;\n                // For inverted chart, swap some options:\n                if (chart.inverted) {\n                    chartX = e.chartY;\n                    navigatorPosition = navigator.top;\n                }\n                if (index === 1) {\n                    // Store information for drag&drop\n                    navigator.grabbedCenter = chartX;\n                    navigator.fixedWidth = range;\n                    navigator.dragOffset = chartX - zoomedMin;\n                }\n                else {\n                    // Shift the range by clicking on shaded areas\n                    left = chartX - navigatorPosition - range / 2;\n                    if (index === 0) {\n                        left = Math.max(0, left);\n                    }\n                    else if (index === 2 && left + range >= navigatorSize) {\n                        left = navigatorSize - range;\n                        if (navigator.reversedExtremes) {\n                            // #7713\n                            left -= range;\n                            fixedMin = navigator.getUnionExtremes().dataMin;\n                        }\n                        else {\n                            // #2293, #3543\n                            fixedMax = navigator.getUnionExtremes().dataMax;\n                        }\n                    }\n                    if (left !== zoomedMin) { // it has actually moved\n                        navigator.fixedWidth = range; // #1370\n                        ext = xAxis.navigatorAxis.toFixedRange(left, left + range, fixedMin, fixedMax);\n                        if (defined(ext.min)) { // #7411\n                            fireEvent(this, 'setRange', {\n                                min: Math.min(ext.min, ext.max),\n                                max: Math.max(ext.min, ext.max),\n                                redraw: true,\n                                eventArguments: {\n                                    trigger: 'navigator'\n                                }\n                            });\n                        }\n                    }\n                }\n            }\n            /**\n             * Mousedown on a handle mask.\n             * Will store necessary information for drag&drop.\n             *\n             * @private\n             * @function Highcharts.Navigator#handlesMousedown\n             * @param {Highcharts.PointerEventObject} e\n             *        Mouse event\n             * @param {number} index\n             *        Index of a handle in Navigator.handles array\n             */\n            handlesMousedown(e, index) {\n                e = this.chart.pointer?.normalize(e) || e;\n                const navigator = this, chart = navigator.chart, baseXAxis = chart.xAxis[0], \n                // For reversed axes, min and max are changed,\n                // so the other extreme should be stored\n                reverse = navigator.reversedExtremes;\n                if (index === 0) {\n                    // Grab the left handle\n                    navigator.grabbedLeft = true;\n                    navigator.otherHandlePos = navigator.zoomedMax;\n                    navigator.fixedExtreme = reverse ? baseXAxis.min : baseXAxis.max;\n                }\n                else {\n                    // Grab the right handle\n                    navigator.grabbedRight = true;\n                    navigator.otherHandlePos = navigator.zoomedMin;\n                    navigator.fixedExtreme = reverse ? baseXAxis.max : baseXAxis.min;\n                }\n                chart.setFixedRange(void 0);\n            }\n            /**\n             * Mouse move event based on x/y mouse position.\n             *\n             * @private\n             * @function Highcharts.Navigator#onMouseMove\n             *\n             * @param {Highcharts.PointerEventObject} e\n             *        Mouse event\n             */\n            onMouseMove(e) {\n                const navigator = this, chart = navigator.chart, navigatorSize = navigator.navigatorSize, range = navigator.range, dragOffset = navigator.dragOffset, inverted = chart.inverted;\n                let left = navigator.left, chartX;\n                // In iOS, a mousemove event with e.pageX === 0 is fired when holding\n                // the finger down in the center of the scrollbar. This should be\n                // ignored.\n                if (!e.touches || e.touches[0].pageX !== 0) { // #4696\n                    e = chart.pointer?.normalize(e) || e;\n                    chartX = e.chartX;\n                    // Swap some options for inverted chart\n                    if (inverted) {\n                        left = navigator.top;\n                        chartX = e.chartY;\n                    }\n                    // Drag left handle or top handle\n                    if (navigator.grabbedLeft) {\n                        navigator.hasDragged = true;\n                        navigator.render(0, 0, chartX - left, navigator.otherHandlePos);\n                        // Drag right handle or bottom handle\n                    }\n                    else if (navigator.grabbedRight) {\n                        navigator.hasDragged = true;\n                        navigator.render(0, 0, navigator.otherHandlePos, chartX - left);\n                        // Drag scrollbar or open area in navigator\n                    }\n                    else if (navigator.grabbedCenter) {\n                        navigator.hasDragged = true;\n                        if (chartX < dragOffset) { // outside left\n                            chartX = dragOffset;\n                            // outside right\n                        }\n                        else if (chartX >\n                            navigatorSize + dragOffset - range) {\n                            chartX = navigatorSize + dragOffset - range;\n                        }\n                        navigator.render(0, 0, chartX - dragOffset, chartX - dragOffset + range);\n                    }\n                    if (navigator.hasDragged &&\n                        navigator.scrollbar &&\n                        pick(navigator.scrollbar.options.liveRedraw, \n                        // By default, don't run live redraw on touch\n                        // devices or if the chart is in boost.\n                        !isTouchDevice &&\n                            !this.chart.boosted)) {\n                        e.DOMType = e.type;\n                        setTimeout(function () {\n                            navigator.onMouseUp(e);\n                        }, 0);\n                    }\n                }\n            }\n            /**\n             * Mouse up event based on x/y mouse position.\n             *\n             * @private\n             * @function Highcharts.Navigator#onMouseUp\n             * @param {Highcharts.PointerEventObject} e\n             *        Mouse event\n             */\n            onMouseUp(e) {\n                const navigator = this, chart = navigator.chart, xAxis = navigator.xAxis, scrollbar = navigator.scrollbar, DOMEvent = e.DOMEvent || e, inverted = chart.inverted, verb = navigator.rendered && !navigator.hasDragged ?\n                    'animate' : 'attr';\n                let zoomedMax, zoomedMin, unionExtremes, fixedMin, fixedMax, ext;\n                if (\n                // MouseUp is called for both, navigator and scrollbar (that order),\n                // which causes calling afterSetExtremes twice. Prevent first call\n                // by checking if scrollbar is going to set new extremes (#6334)\n                (navigator.hasDragged && (!scrollbar || !scrollbar.hasDragged)) ||\n                    e.trigger === 'scrollbar') {\n                    unionExtremes = navigator.getUnionExtremes();\n                    // When dragging one handle, make sure the other one doesn't change\n                    if (navigator.zoomedMin === navigator.otherHandlePos) {\n                        fixedMin = navigator.fixedExtreme;\n                    }\n                    else if (navigator.zoomedMax === navigator.otherHandlePos) {\n                        fixedMax = navigator.fixedExtreme;\n                    }\n                    // Snap to right edge (#4076)\n                    if (navigator.zoomedMax === navigator.size) {\n                        fixedMax = navigator.reversedExtremes ?\n                            unionExtremes.dataMin :\n                            unionExtremes.dataMax;\n                    }\n                    // Snap to left edge (#7576)\n                    if (navigator.zoomedMin === 0) {\n                        fixedMin = navigator.reversedExtremes ?\n                            unionExtremes.dataMax :\n                            unionExtremes.dataMin;\n                    }\n                    ext = xAxis.navigatorAxis.toFixedRange(navigator.zoomedMin, navigator.zoomedMax, fixedMin, fixedMax);\n                    if (defined(ext.min)) {\n                        fireEvent(this, 'setRange', {\n                            min: Math.min(ext.min, ext.max),\n                            max: Math.max(ext.min, ext.max),\n                            redraw: true,\n                            animation: navigator.hasDragged ? false : null,\n                            eventArguments: {\n                                trigger: 'navigator',\n                                triggerOp: 'navigator-drag',\n                                DOMEvent: DOMEvent // #1838\n                            }\n                        });\n                    }\n                }\n                if (e.DOMType !== 'mousemove' &&\n                    e.DOMType !== 'touchmove') {\n                    navigator.grabbedLeft = navigator.grabbedRight =\n                        navigator.grabbedCenter = navigator.fixedWidth =\n                            navigator.fixedExtreme = navigator.otherHandlePos =\n                                navigator.hasDragged = navigator.dragOffset = null;\n                }\n                // Update position of navigator shades, outline and handles (#12573)\n                if (navigator.navigatorEnabled &&\n                    isNumber(navigator.zoomedMin) &&\n                    isNumber(navigator.zoomedMax)) {\n                    zoomedMin = Math.round(navigator.zoomedMin);\n                    zoomedMax = Math.round(navigator.zoomedMax);\n                    if (navigator.shades) {\n                        navigator.drawMasks(zoomedMin, zoomedMax, inverted, verb);\n                    }\n                    if (navigator.outline) {\n                        navigator.drawOutline(zoomedMin, zoomedMax, inverted, verb);\n                    }\n                    if (navigator.navigatorOptions.handles.enabled &&\n                        Object.keys(navigator.handles).length ===\n                            navigator.handles.length) {\n                        navigator.drawHandle(zoomedMin, 0, inverted, verb);\n                        navigator.drawHandle(zoomedMax, 1, inverted, verb);\n                    }\n                }\n            }\n            /**\n             * Removes the event handlers attached previously with addEvents.\n             *\n             * @private\n             * @function Highcharts.Navigator#removeEvents\n             */\n            removeEvents() {\n                if (this.eventsToUnbind) {\n                    this.eventsToUnbind.forEach(function (unbind) {\n                        unbind();\n                    });\n                    this.eventsToUnbind = void 0;\n                }\n                this.removeBaseSeriesEvents();\n            }\n            /**\n             * Remove data events.\n             *\n             * @private\n             * @function Highcharts.Navigator#removeBaseSeriesEvents\n             */\n            removeBaseSeriesEvents() {\n                const baseSeries = this.baseSeries || [];\n                if (this.navigatorEnabled && baseSeries[0]) {\n                    if (this.navigatorOptions.adaptToUpdatedData !== false) {\n                        baseSeries.forEach(function (series) {\n                            removeEvent(series, 'updatedData', this.updatedDataHandler);\n                        }, this);\n                    }\n                    // We only listen for extremes-events on the first baseSeries\n                    if (baseSeries[0].xAxis) {\n                        removeEvent(baseSeries[0].xAxis, 'foundExtremes', this.modifyBaseAxisExtremes);\n                    }\n                }\n            }\n            /**\n             * Initialize the Navigator object\n             *\n             * @private\n             * @function Highcharts.Navigator#init\n             */\n            init(chart) {\n                const chartOptions = chart.options, navigatorOptions = chartOptions.navigator || {}, navigatorEnabled = navigatorOptions.enabled, scrollbarOptions = chartOptions.scrollbar || {}, scrollbarEnabled = scrollbarOptions.enabled, height = navigatorEnabled && navigatorOptions.height || 0, scrollbarHeight = scrollbarEnabled && scrollbarOptions.height || 0, scrollButtonSize = scrollbarOptions.buttonsEnabled && scrollbarHeight || 0;\n                this.handles = [];\n                this.shades = [];\n                this.chart = chart;\n                this.setBaseSeries();\n                this.height = height;\n                this.scrollbarHeight = scrollbarHeight;\n                this.scrollButtonSize = scrollButtonSize;\n                this.scrollbarEnabled = scrollbarEnabled;\n                this.navigatorEnabled = navigatorEnabled;\n                this.navigatorOptions = navigatorOptions;\n                this.scrollbarOptions = scrollbarOptions;\n                this.opposite = pick(navigatorOptions.opposite, Boolean(!navigatorEnabled && chart.inverted)); // #6262\n                const navigator = this, baseSeries = navigator.baseSeries, xAxisIndex = chart.xAxis.length, yAxisIndex = chart.yAxis.length, baseXaxis = baseSeries && baseSeries[0] && baseSeries[0].xAxis ||\n                    chart.xAxis[0] || { options: {} };\n                chart.isDirtyBox = true;\n                if (navigator.navigatorEnabled) {\n                    // an x axis is required for scrollbar also\n                    navigator.xAxis = new Axis(chart, merge({\n                        // inherit base xAxis' break, ordinal options and overscroll\n                        breaks: baseXaxis.options.breaks,\n                        ordinal: baseXaxis.options.ordinal,\n                        overscroll: baseXaxis.options.overscroll\n                    }, navigatorOptions.xAxis, {\n                        id: 'navigator-x-axis',\n                        yAxis: 'navigator-y-axis',\n                        type: 'datetime',\n                        index: xAxisIndex,\n                        isInternal: true,\n                        offset: 0,\n                        keepOrdinalPadding: true,\n                        startOnTick: false,\n                        endOnTick: false,\n                        minPadding: 0,\n                        maxPadding: 0,\n                        zoomEnabled: false\n                    }, chart.inverted ? {\n                        offsets: [scrollButtonSize, 0, -scrollButtonSize, 0],\n                        width: height\n                    } : {\n                        offsets: [0, -scrollButtonSize, 0, scrollButtonSize],\n                        height: height\n                    }), 'xAxis');\n                    navigator.yAxis = new Axis(chart, merge(navigatorOptions.yAxis, {\n                        id: 'navigator-y-axis',\n                        alignTicks: false,\n                        offset: 0,\n                        index: yAxisIndex,\n                        isInternal: true,\n                        reversed: pick((navigatorOptions.yAxis &&\n                            navigatorOptions.yAxis.reversed), (chart.yAxis[0] && chart.yAxis[0].reversed), false),\n                        zoomEnabled: false\n                    }, chart.inverted ? {\n                        width: height\n                    } : {\n                        height: height\n                    }), 'yAxis');\n                    // If we have a base series, initialize the navigator series\n                    if (baseSeries || navigatorOptions.series.data) {\n                        navigator.updateNavigatorSeries(false);\n                        // If not, set up an event to listen for added series\n                    }\n                    else if (chart.series.length === 0) {\n                        navigator.unbindRedraw = addEvent(chart, 'beforeRedraw', function () {\n                            // We've got one, now add it as base\n                            if (chart.series.length > 0 && !navigator.series) {\n                                navigator.setBaseSeries();\n                                navigator.unbindRedraw(); // reset\n                            }\n                        });\n                    }\n                    navigator.reversedExtremes = (chart.inverted && !navigator.xAxis.reversed) || (!chart.inverted && navigator.xAxis.reversed);\n                    // Render items, so we can bind events to them:\n                    navigator.renderElements();\n                    // Add mouse events\n                    navigator.addMouseEvents();\n                    // in case of scrollbar only, fake an x axis to get translation\n                }\n                else {\n                    navigator.xAxis = {\n                        chart,\n                        navigatorAxis: {\n                            fake: true\n                        },\n                        translate: function (value, reverse) {\n                            const axis = chart.xAxis[0], ext = axis.getExtremes(), scrollTrackWidth = axis.len - 2 * scrollButtonSize, min = numExt('min', axis.options.min, ext.dataMin), valueRange = numExt('max', axis.options.max, ext.dataMax) - min;\n                            return reverse ?\n                                // from pixel to value\n                                (value * valueRange / scrollTrackWidth) + min :\n                                // from value to pixel\n                                scrollTrackWidth * (value - min) / valueRange;\n                        },\n                        toPixels: function (value) {\n                            return this.translate(value);\n                        },\n                        toValue: function (value) {\n                            return this.translate(value, true);\n                        }\n                    };\n                    navigator.xAxis.navigatorAxis.axis = navigator.xAxis;\n                    navigator.xAxis.navigatorAxis.toFixedRange = (NavigatorAxisAdditions.prototype.toFixedRange.bind(navigator.xAxis.navigatorAxis));\n                }\n                // Initialize the scrollbar\n                if (chart.options.scrollbar.enabled) {\n                    const options = merge(chart.options.scrollbar, { vertical: chart.inverted });\n                    if (!isNumber(options.margin) && navigator.navigatorEnabled) {\n                        options.margin = chart.inverted ? -3 : 3;\n                    }\n                    chart.scrollbar = navigator.scrollbar = new Scrollbar(chart.renderer, options, chart);\n                    addEvent(navigator.scrollbar, 'changed', function (e) {\n                        const range = navigator.size, to = range * this.to, from = range * this.from;\n                        navigator.hasDragged = navigator.scrollbar.hasDragged;\n                        navigator.render(0, 0, from, to);\n                        if (this.shouldUpdateExtremes(e.DOMType)) {\n                            setTimeout(function () {\n                                navigator.onMouseUp(e);\n                            });\n                        }\n                    });\n                }\n                // Add data events\n                navigator.addBaseSeriesEvents();\n                // Add redraw events\n                navigator.addChartEvents();\n            }\n            /**\n             * Get the union data extremes of the chart - the outer data extremes of the\n             * base X axis and the navigator axis.\n             *\n             * @private\n             * @function Highcharts.Navigator#getUnionExtremes\n             */\n            getUnionExtremes(returnFalseOnNoBaseSeries) {\n                const baseAxis = this.chart.xAxis[0], navAxis = this.xAxis, navAxisOptions = navAxis.options, baseAxisOptions = baseAxis.options;\n                let ret;\n                if (!returnFalseOnNoBaseSeries || baseAxis.dataMin !== null) {\n                    ret = {\n                        dataMin: pick(// #4053\n                        navAxisOptions && navAxisOptions.min, numExt('min', baseAxisOptions.min, baseAxis.dataMin, navAxis.dataMin, navAxis.min)),\n                        dataMax: pick(navAxisOptions && navAxisOptions.max, numExt('max', baseAxisOptions.max, baseAxis.dataMax, navAxis.dataMax, navAxis.max))\n                    };\n                }\n                return ret;\n            }\n            /**\n             * Set the base series and update the navigator series from this. With a bit\n             * of modification we should be able to make this an API method to be called\n             * from the outside\n             *\n             * @private\n             * @function Highcharts.Navigator#setBaseSeries\n             * @param {Highcharts.SeriesOptionsType} [baseSeriesOptions]\n             *        Additional series options for a navigator\n             * @param {boolean} [redraw]\n             *        Whether to redraw after update.\n             */\n            setBaseSeries(baseSeriesOptions, redraw) {\n                const chart = this.chart, baseSeries = this.baseSeries = [];\n                baseSeriesOptions = (baseSeriesOptions ||\n                    chart.options && chart.options.navigator.baseSeries ||\n                    (chart.series.length ?\n                        // Find the first non-navigator series (#8430)\n                        find(chart.series, (s) => (!s.options.isInternal)).index :\n                        0));\n                // Iterate through series and add the ones that should be shown in\n                // navigator.\n                (chart.series || []).forEach((series, i) => {\n                    if (\n                    // Don't include existing nav series\n                    !series.options.isInternal &&\n                        (series.options.showInNavigator ||\n                            (i === baseSeriesOptions ||\n                                series.options.id === baseSeriesOptions) &&\n                                series.options.showInNavigator !== false)) {\n                        baseSeries.push(series);\n                    }\n                });\n                // When run after render, this.xAxis already exists\n                if (this.xAxis && !this.xAxis.navigatorAxis.fake) {\n                    this.updateNavigatorSeries(true, redraw);\n                }\n            }\n            /**\n             * Update series in the navigator from baseSeries, adding new if does not\n             * exist.\n             *\n             * @private\n             * @function Highcharts.Navigator.updateNavigatorSeries\n             */\n            updateNavigatorSeries(addEvents, redraw) {\n                const navigator = this, chart = navigator.chart, baseSeries = navigator.baseSeries, navSeriesMixin = {\n                    enableMouseTracking: false,\n                    index: null,\n                    linkedTo: null,\n                    group: 'nav',\n                    padXAxis: false,\n                    xAxis: 'navigator-x-axis',\n                    yAxis: 'navigator-y-axis',\n                    showInLegend: false,\n                    stacking: void 0,\n                    isInternal: true,\n                    states: {\n                        inactive: {\n                            opacity: 1\n                        }\n                    }\n                }, \n                // Remove navigator series that are no longer in the baseSeries\n                navigatorSeries = navigator.series =\n                    (navigator.series || []).filter((navSeries) => {\n                        const base = navSeries.baseSeries;\n                        if (baseSeries.indexOf(base) < 0) { // Not in array\n                            // If there is still a base series connected to this\n                            // series, remove event handler and reference.\n                            if (base) {\n                                removeEvent(base, 'updatedData', navigator.updatedDataHandler);\n                                delete base.navigatorSeries;\n                            }\n                            // Kill the nav series. It may already have been\n                            // destroyed (#8715).\n                            if (navSeries.chart) {\n                                navSeries.destroy();\n                            }\n                            return false;\n                        }\n                        return true;\n                    });\n                let baseOptions, mergedNavSeriesOptions, chartNavigatorSeriesOptions = navigator.navigatorOptions.series, baseNavigatorOptions;\n                // Go through each base series and merge the options to create new\n                // series\n                if (baseSeries && baseSeries.length) {\n                    baseSeries.forEach((base) => {\n                        const linkedNavSeries = base.navigatorSeries, userNavOptions = extend(\n                        // Grab color and visibility from base as default\n                        {\n                            color: base.color,\n                            visible: base.visible\n                        }, !isArray(chartNavigatorSeriesOptions) ?\n                            chartNavigatorSeriesOptions :\n                            defaultOptions.navigator.series);\n                        // Don't update if the series exists in nav and we have disabled\n                        // adaptToUpdatedData.\n                        if (linkedNavSeries &&\n                            navigator.navigatorOptions.adaptToUpdatedData === false) {\n                            return;\n                        }\n                        navSeriesMixin.name = 'Navigator ' + baseSeries.length;\n                        baseOptions = base.options || {};\n                        baseNavigatorOptions = baseOptions.navigatorOptions || {};\n                        // The dataLabels options are not merged correctly\n                        // if the settings are an array, #13847.\n                        userNavOptions.dataLabels = splat(userNavOptions.dataLabels);\n                        mergedNavSeriesOptions = merge(baseOptions, navSeriesMixin, userNavOptions, baseNavigatorOptions);\n                        // Once nav series type is resolved, pick correct pointRange\n                        mergedNavSeriesOptions.pointRange = pick(\n                        // Stricte set pointRange in options\n                        userNavOptions.pointRange, baseNavigatorOptions.pointRange, \n                        // Fallback to default values, e.g. `null` for column\n                        defaultOptions.plotOptions[mergedNavSeriesOptions.type || 'line'].pointRange);\n                        // Merge data separately. Do a slice to avoid mutating the\n                        // navigator options from base series (#4923).\n                        const navigatorSeriesData = baseNavigatorOptions.data || userNavOptions.data;\n                        navigator.hasNavigatorData =\n                            navigator.hasNavigatorData || !!navigatorSeriesData;\n                        mergedNavSeriesOptions.data =\n                            navigatorSeriesData ||\n                                baseOptions.data && baseOptions.data.slice(0);\n                        // Update or add the series\n                        if (linkedNavSeries && linkedNavSeries.options) {\n                            linkedNavSeries.update(mergedNavSeriesOptions, redraw);\n                        }\n                        else {\n                            base.navigatorSeries = chart.initSeries(mergedNavSeriesOptions);\n                            // Set data on initial run with dataSorting enabled (#20318)\n                            chart.setSortedData();\n                            base.navigatorSeries.baseSeries = base; // Store ref\n                            navigatorSeries.push(base.navigatorSeries);\n                        }\n                    });\n                }\n                // If user has defined data (and no base series) or explicitly defined\n                // navigator.series as an array, we create these series on top of any\n                // base series.\n                if (chartNavigatorSeriesOptions.data &&\n                    !(baseSeries && baseSeries.length) ||\n                    isArray(chartNavigatorSeriesOptions)) {\n                    navigator.hasNavigatorData = false;\n                    // Allow navigator.series to be an array\n                    chartNavigatorSeriesOptions =\n                        splat(chartNavigatorSeriesOptions);\n                    chartNavigatorSeriesOptions.forEach((userSeriesOptions, i) => {\n                        navSeriesMixin.name =\n                            'Navigator ' + (navigatorSeries.length + 1);\n                        mergedNavSeriesOptions = merge(defaultOptions.navigator.series, {\n                            // Since we don't have a base series to pull color from,\n                            // try to fake it by using color from series with same\n                            // index. Otherwise pull from the colors array. We need\n                            // an explicit color as otherwise updates will increment\n                            // color counter and we'll get a new color for each\n                            // update of the nav series.\n                            color: chart.series[i] &&\n                                !chart.series[i].options.isInternal &&\n                                chart.series[i].color ||\n                                chart.options.colors[i] ||\n                                chart.options.colors[0]\n                        }, navSeriesMixin, userSeriesOptions);\n                        mergedNavSeriesOptions.data = userSeriesOptions.data;\n                        if (mergedNavSeriesOptions.data) {\n                            navigator.hasNavigatorData = true;\n                            navigatorSeries.push(chart.initSeries(mergedNavSeriesOptions));\n                        }\n                    });\n                }\n                if (addEvents) {\n                    this.addBaseSeriesEvents();\n                }\n            }\n            /**\n             * Add data events.\n             * For example when main series is updated we need to recalculate extremes\n             *\n             * @private\n             * @function Highcharts.Navigator#addBaseSeriesEvent\n             */\n            addBaseSeriesEvents() {\n                const navigator = this, baseSeries = navigator.baseSeries || [];\n                // Bind modified extremes event to first base's xAxis only.\n                // In event of > 1 base-xAxes, the navigator will ignore those.\n                // Adding this multiple times to the same axis is no problem, as\n                // duplicates should be discarded by the browser.\n                if (baseSeries[0] && baseSeries[0].xAxis) {\n                    baseSeries[0].eventsToUnbind.push(addEvent(baseSeries[0].xAxis, 'foundExtremes', this.modifyBaseAxisExtremes));\n                }\n                baseSeries.forEach((base) => {\n                    // Link base series show/hide to navigator series visibility\n                    base.eventsToUnbind.push(addEvent(base, 'show', function () {\n                        if (this.navigatorSeries) {\n                            this.navigatorSeries.setVisible(true, false);\n                        }\n                    }));\n                    base.eventsToUnbind.push(addEvent(base, 'hide', function () {\n                        if (this.navigatorSeries) {\n                            this.navigatorSeries.setVisible(false, false);\n                        }\n                    }));\n                    // Respond to updated data in the base series, unless explicitly\n                    // not adapting to data changes.\n                    if (this.navigatorOptions.adaptToUpdatedData !== false) {\n                        if (base.xAxis) {\n                            base.eventsToUnbind.push(addEvent(base, 'updatedData', this.updatedDataHandler));\n                        }\n                    }\n                    // Handle series removal\n                    base.eventsToUnbind.push(addEvent(base, 'remove', function () {\n                        if (this.navigatorSeries) {\n                            erase(navigator.series, this.navigatorSeries);\n                            if (defined(this.navigatorSeries.options)) {\n                                this.navigatorSeries.remove(false);\n                            }\n                            delete this.navigatorSeries;\n                        }\n                    }));\n                });\n            }\n            /**\n             * Get minimum from all base series connected to the navigator\n             * @private\n             * @param {number} currentSeriesMin\n             *        Minium from the current series\n             * @return {number}\n             *         Minimum from all series\n             */\n            getBaseSeriesMin(currentSeriesMin) {\n                return this.baseSeries.reduce(function (min, series) {\n                    // (#10193)\n                    return Math.min(min, series.xData && series.xData.length ?\n                        series.xData[0] : min);\n                }, currentSeriesMin);\n            }\n            /**\n             * Set the navigator x axis extremes to reflect the total. The navigator\n             * extremes should always be the extremes of the union of all series in the\n             * chart as well as the navigator series.\n             *\n             * @private\n             * @function Highcharts.Navigator#modifyNavigatorAxisExtremes\n             */\n            modifyNavigatorAxisExtremes() {\n                const xAxis = this.xAxis;\n                if (typeof xAxis.getExtremes !== 'undefined') {\n                    const unionExtremes = this.getUnionExtremes(true);\n                    if (unionExtremes &&\n                        (unionExtremes.dataMin !== xAxis.min ||\n                            unionExtremes.dataMax !== xAxis.max)) {\n                        xAxis.min = unionExtremes.dataMin;\n                        xAxis.max = unionExtremes.dataMax;\n                    }\n                }\n            }\n            /**\n             * Hook to modify the base axis extremes with information from the Navigator\n             *\n             * @private\n             * @function Highcharts.Navigator#modifyBaseAxisExtremes\n             */\n            modifyBaseAxisExtremes() {\n                const baseXAxis = this, navigator = baseXAxis.chart.navigator, baseExtremes = baseXAxis.getExtremes(), baseMin = baseExtremes.min, baseMax = baseExtremes.max, baseDataMin = baseExtremes.dataMin, baseDataMax = baseExtremes.dataMax, range = baseMax - baseMin, stickToMin = navigator.stickToMin, stickToMax = navigator.stickToMax, overscroll = pick(baseXAxis.ordinal?.convertOverscroll(baseXAxis.options.overscroll), 0), navigatorSeries = navigator.series && navigator.series[0], hasSetExtremes = !!baseXAxis.setExtremes, \n                // When the extremes have been set by range selector button, don't\n                // stick to min or max. The range selector buttons will handle the\n                // extremes. (#5489)\n                unmutable = baseXAxis.eventArgs &&\n                    baseXAxis.eventArgs.trigger === 'rangeSelectorButton';\n                let newMax, newMin;\n                if (!unmutable) {\n                    // If the zoomed range is already at the min, move it to the right\n                    // as new data comes in\n                    if (stickToMin) {\n                        newMin = baseDataMin;\n                        newMax = newMin + range;\n                    }\n                    // If the zoomed range is already at the max, move it to the right\n                    // as new data comes in\n                    if (stickToMax) {\n                        newMax = baseDataMax + overscroll;\n                        // If stickToMin is true, the new min value is set above\n                        if (!stickToMin) {\n                            newMin = Math.max(baseDataMin, // don't go below data extremes (#13184)\n                            newMax - range, navigator.getBaseSeriesMin(navigatorSeries && navigatorSeries.xData ?\n                                navigatorSeries.xData[0] :\n                                -Number.MAX_VALUE));\n                        }\n                    }\n                    // Update the extremes\n                    if (hasSetExtremes && (stickToMin || stickToMax)) {\n                        if (isNumber(newMin)) {\n                            baseXAxis.min = baseXAxis.userMin = newMin;\n                            baseXAxis.max = baseXAxis.userMax = newMax;\n                        }\n                    }\n                }\n                // Reset\n                navigator.stickToMin =\n                    navigator.stickToMax = null;\n            }\n            /**\n             * Handler for updated data on the base series. When data is modified, the\n             * navigator series must reflect it. This is called from the Chart.redraw\n             * function before axis and series extremes are computed.\n             *\n             * @private\n             * @function Highcharts.Navigator#updateDataHandler\n             */\n            updatedDataHandler() {\n                const navigator = this.chart.navigator, baseSeries = this, navigatorSeries = this.navigatorSeries, shouldStickToMax = navigator.reversedExtremes ?\n                    Math.round(navigator.zoomedMin) === 0 :\n                    Math.round(navigator.zoomedMax) >= Math.round(navigator.size);\n                // If the scrollbar is scrolled all the way to the right, keep right as\n                // new data comes in, unless user set navigator.stickToMax to false.\n                navigator.stickToMax = pick(this.chart.options.navigator &&\n                    this.chart.options.navigator.stickToMax, shouldStickToMax);\n                navigator.stickToMin = navigator.shouldStickToMin(baseSeries, navigator);\n                // Set the navigator series data to the new data of the base series\n                if (navigatorSeries && !navigator.hasNavigatorData) {\n                    navigatorSeries.options.pointStart = baseSeries.xData[0];\n                    navigatorSeries.setData(baseSeries.options.data, false, null, false); // #5414\n                }\n            }\n            /**\n             * Detect if the zoomed area should stick to the minimum, #14742.\n             *\n             * @private\n             * @function Highcharts.Navigator#shouldStickToMin\n             */\n            shouldStickToMin(baseSeries, navigator) {\n                const xDataMin = navigator.getBaseSeriesMin(baseSeries.xData[0]), xAxis = baseSeries.xAxis, max = xAxis.max, min = xAxis.min, range = xAxis.options.range;\n                let stickToMin = true;\n                if (isNumber(max) && isNumber(min)) {\n                    // If range declared, stick to the minimum only if the range\n                    // is smaller than the data set range.\n                    if (range && max - xDataMin > 0) {\n                        stickToMin = max - xDataMin < range;\n                    }\n                    else {\n                        // If the current axis minimum falls outside the new\n                        // updated dataset, we must adjust.\n                        stickToMin = min <= xDataMin;\n                    }\n                }\n                else {\n                    stickToMin = false; // #15864\n                }\n                return stickToMin;\n            }\n            /**\n             * Add chart events, like redrawing navigator, when chart requires that.\n             *\n             * @private\n             * @function Highcharts.Navigator#addChartEvents\n             */\n            addChartEvents() {\n                if (!this.eventsToUnbind) {\n                    this.eventsToUnbind = [];\n                }\n                this.eventsToUnbind.push(\n                // Move the scrollbar after redraw, like after data updata even if\n                // axes don't redraw\n                addEvent(this.chart, 'redraw', function () {\n                    const navigator = this.navigator, xAxis = navigator && (navigator.baseSeries &&\n                        navigator.baseSeries[0] &&\n                        navigator.baseSeries[0].xAxis ||\n                        this.xAxis[0]); // #5709, #13114\n                    if (xAxis) {\n                        navigator.render(xAxis.min, xAxis.max);\n                    }\n                }), \n                // Make room for the navigator, can be placed around the chart:\n                addEvent(this.chart, 'getMargins', function () {\n                    let chart = this, navigator = chart.navigator, marginName = navigator.opposite ?\n                        'plotTop' : 'marginBottom';\n                    if (chart.inverted) {\n                        marginName = navigator.opposite ?\n                            'marginRight' : 'plotLeft';\n                    }\n                    chart[marginName] =\n                        (chart[marginName] || 0) + (navigator.navigatorEnabled || !chart.inverted ?\n                            navigator.height + navigator.scrollbarHeight :\n                            0) + navigator.navigatorOptions.margin;\n                }), addEvent(Navigator, 'setRange', function (e) {\n                    this.chart.xAxis[0].setExtremes(e.min, e.max, e.redraw, e.animation, e.eventArguments);\n                }));\n            }\n            /**\n             * Destroys allocated elements.\n             *\n             * @private\n             * @function Highcharts.Navigator#destroy\n             */\n            destroy() {\n                // Disconnect events added in addEvents\n                this.removeEvents();\n                if (this.xAxis) {\n                    erase(this.chart.xAxis, this.xAxis);\n                    erase(this.chart.axes, this.xAxis);\n                }\n                if (this.yAxis) {\n                    erase(this.chart.yAxis, this.yAxis);\n                    erase(this.chart.axes, this.yAxis);\n                }\n                // Destroy series\n                (this.series || []).forEach((s) => {\n                    if (s.destroy) {\n                        s.destroy();\n                    }\n                });\n                // Destroy properties\n                [\n                    'series', 'xAxis', 'yAxis', 'shades', 'outline', 'scrollbarTrack',\n                    'scrollbarRifles', 'scrollbarGroup', 'scrollbar', 'navigatorGroup',\n                    'rendered'\n                ].forEach((prop) => {\n                    if (this[prop] && this[prop].destroy) {\n                        this[prop].destroy();\n                    }\n                    this[prop] = null;\n                });\n                // Destroy elements in collection\n                [this.handles].forEach((coll) => {\n                    destroyObjectProperties(coll);\n                });\n            }\n        }\n        /* *\n         *\n         *  Default Export\n         *\n         * */\n\n        return Navigator;\n    });\n    _registerModule(_modules, 'Core/Axis/OrdinalAxis.js', [_modules['Core/Axis/Axis.js'], _modules['Core/Globals.js'], _modules['Core/Series/Series.js'], _modules['Core/Utilities.js']], function (Axis, H, Series, U) {\n        /* *\n         *\n         *  (c) 2010-2024 Torstein Honsi\n         *\n         *  License: www.highcharts.com/license\n         *\n         *  !!!!!!! SOURCE GETS TRANSPILED BY TYPESCRIPT. EDIT TS FILE ONLY. !!!!!!!\n         *\n         * */\n        const { addEvent, correctFloat, css, defined, error, isNumber, pick, timeUnits, isString } = U;\n        /* *\n         *\n         *  Composition\n         *\n         * */\n        /**\n         * Extends the axis with ordinal support.\n         * @private\n         */\n        var OrdinalAxis;\n        (function (OrdinalAxis) {\n            /* *\n             *\n             *  Declarations\n             *\n             * */\n            /* *\n             *\n             *  Functions\n             *\n             * */\n            /**\n             * Extends the axis with ordinal support.\n             *\n             * @private\n             *\n             * @param AxisClass\n             * Axis class to extend.\n             *\n             * @param ChartClass\n             * Chart class to use.\n             *\n             * @param SeriesClass\n             * Series class to use.\n             */\n            function compose(AxisClass, SeriesClass, ChartClass) {\n                const axisProto = AxisClass.prototype;\n                if (!axisProto.ordinal2lin) {\n                    axisProto.getTimeTicks = getTimeTicks;\n                    axisProto.index2val = index2val;\n                    axisProto.lin2val = lin2val;\n                    axisProto.val2lin = val2lin;\n                    // Record this to prevent overwriting by broken-axis module (#5979)\n                    axisProto.ordinal2lin = axisProto.val2lin;\n                    addEvent(AxisClass, 'afterInit', onAxisAfterInit);\n                    addEvent(AxisClass, 'foundExtremes', onAxisFoundExtremes);\n                    addEvent(AxisClass, 'afterSetScale', onAxisAfterSetScale);\n                    addEvent(AxisClass, 'initialAxisTranslation', onAxisInitialAxisTranslation);\n                    addEvent(ChartClass, 'pan', onChartPan);\n                    addEvent(SeriesClass, 'updatedData', onSeriesUpdatedData);\n                }\n                return AxisClass;\n            }\n            OrdinalAxis.compose = compose;\n            /**\n             * In an ordinal axis, there might be areas with dense concentrations of\n             * points, then large gaps between some. Creating equally distributed\n             * ticks over this entire range may lead to a huge number of ticks that\n             * will later be removed. So instead, break the positions up in\n             * segments, find the tick positions for each segment then concatenize\n             * them. This method is used from both data grouping logic and X axis\n             * tick position logic.\n             * @private\n             */\n            function getTimeTicks(normalizedInterval, min, max, startOfWeek, positions = [], closestDistance = 0, findHigherRanks) {\n                const higherRanks = {}, tickPixelIntervalOption = this.options.tickPixelInterval, time = this.chart.time, \n                // Record all the start positions of a segment, to use when\n                // deciding what's a gap in the data.\n                segmentStarts = [];\n                let end, segmentPositions, hasCrossedHigherRank, info, outsideMax, start = 0, groupPositions = [], lastGroupPosition = -Number.MAX_VALUE;\n                // The positions are not always defined, for example for ordinal\n                // positions when data has regular interval (#1557, #2090)\n                if ((!this.options.ordinal && !this.options.breaks) ||\n                    !positions ||\n                    positions.length < 3 ||\n                    typeof min === 'undefined') {\n                    return time.getTimeTicks.apply(time, arguments);\n                }\n                // Analyze the positions array to split it into segments on gaps\n                // larger than 5 times the closest distance. The closest distance is\n                // already found at this point, so we reuse that instead of\n                // computing it again.\n                const posLength = positions.length;\n                for (end = 0; end < posLength; end++) {\n                    outsideMax = end && positions[end - 1] > max;\n                    if (positions[end] < min) { // Set the last position before min\n                        start = end;\n                    }\n                    if (end === posLength - 1 ||\n                        positions[end + 1] - positions[end] > closestDistance * 5 ||\n                        outsideMax) {\n                        // For each segment, calculate the tick positions from the\n                        // getTimeTicks utility function. The interval will be the\n                        // same regardless of how long the segment is.\n                        if (positions[end] > lastGroupPosition) { // #1475\n                            segmentPositions = time.getTimeTicks(normalizedInterval, positions[start], positions[end], startOfWeek);\n                            // Prevent duplicate groups, for example for multiple\n                            // segments within one larger time frame (#1475)\n                            while (segmentPositions.length &&\n                                segmentPositions[0] <= lastGroupPosition) {\n                                segmentPositions.shift();\n                            }\n                            if (segmentPositions.length) {\n                                lastGroupPosition =\n                                    segmentPositions[segmentPositions.length - 1];\n                            }\n                            segmentStarts.push(groupPositions.length);\n                            groupPositions = groupPositions.concat(segmentPositions);\n                        }\n                        // Set start of next segment\n                        start = end + 1;\n                    }\n                    if (outsideMax) {\n                        break;\n                    }\n                }\n                // Get the grouping info from the last of the segments. The info is\n                // the same for all segments.\n                if (segmentPositions) {\n                    info = segmentPositions.info;\n                    // Optionally identify ticks with higher rank, for example\n                    // when the ticks have crossed midnight.\n                    if (findHigherRanks && info.unitRange <= timeUnits.hour) {\n                        end = groupPositions.length - 1;\n                        // Compare points two by two\n                        for (start = 1; start < end; start++) {\n                            if (time.dateFormat('%d', groupPositions[start]) !==\n                                time.dateFormat('%d', groupPositions[start - 1])) {\n                                higherRanks[groupPositions[start]] = 'day';\n                                hasCrossedHigherRank = true;\n                            }\n                        }\n                        // If the complete array has crossed midnight, we want\n                        // to mark the first positions also as higher rank\n                        if (hasCrossedHigherRank) {\n                            higherRanks[groupPositions[0]] = 'day';\n                        }\n                        info.higherRanks = higherRanks;\n                    }\n                    // Save the info\n                    info.segmentStarts = segmentStarts;\n                    groupPositions.info = info;\n                }\n                else {\n                    error(12, false, this.chart);\n                }\n                // Don't show ticks within a gap in the ordinal axis, where the\n                // space between two points is greater than a portion of the tick\n                // pixel interval\n                if (findHigherRanks && defined(tickPixelIntervalOption)) {\n                    const length = groupPositions.length, translatedArr = [], distances = [];\n                    let itemToRemove, translated, lastTranslated, medianDistance, distance, i = length;\n                    // Find median pixel distance in order to keep a reasonably even\n                    // distance between ticks (#748)\n                    while (i--) {\n                        translated = this.translate(groupPositions[i]);\n                        if (lastTranslated) {\n                            distances[i] = lastTranslated - translated;\n                        }\n                        translatedArr[i] = lastTranslated = translated;\n                    }\n                    distances.sort();\n                    medianDistance = distances[Math.floor(distances.length / 2)];\n                    if (medianDistance < tickPixelIntervalOption * 0.6) {\n                        medianDistance = null;\n                    }\n                    // Now loop over again and remove ticks where needed\n                    i = groupPositions[length - 1] > max ? length - 1 : length; // #817\n                    lastTranslated = void 0;\n                    while (i--) {\n                        translated = translatedArr[i];\n                        distance = Math.abs(lastTranslated - translated);\n                        // #4175 - when axis is reversed, the distance, is negative but\n                        // tickPixelIntervalOption positive, so we need to compare the\n                        // same values\n                        // Remove ticks that are closer than 0.6 times the pixel\n                        // interval from the one to the right, but not if it is close to\n                        // the median distance (#748).\n                        if (lastTranslated &&\n                            distance < tickPixelIntervalOption * 0.8 &&\n                            (medianDistance === null || distance < medianDistance * 0.8)) {\n                            // Is this a higher ranked position with a normal\n                            // position to the right?\n                            if (higherRanks[groupPositions[i]] &&\n                                !higherRanks[groupPositions[i + 1]]) {\n                                // Yes: remove the lower ranked neighbour to the\n                                // right\n                                itemToRemove = i + 1;\n                                lastTranslated = translated; // #709\n                            }\n                            else {\n                                // No: remove this one\n                                itemToRemove = i;\n                            }\n                            groupPositions.splice(itemToRemove, 1);\n                        }\n                        else {\n                            lastTranslated = translated;\n                        }\n                    }\n                }\n                return groupPositions;\n            }\n            /**\n             * Get axis position of given index of the extended ordinal positions.\n             * Used only when panning an ordinal axis.\n             *\n             * @private\n             * @function Highcharts.Axis#index2val\n             * @param {number} index\n             * The index value of searched point\n             */\n            function index2val(index) {\n                const axis = this, ordinal = axis.ordinal, \n                // Context could be changed to extendedOrdinalPositions.\n                ordinalPositions = ordinal.positions;\n                // The visible range contains only equally spaced values.\n                if (!ordinalPositions) {\n                    return index;\n                }\n                let i = ordinalPositions.length - 1, distance;\n                if (index < 0) { // out of range, in effect panning to the left\n                    index = ordinalPositions[0];\n                }\n                else if (index > i) { // out of range, panning to the right\n                    index = ordinalPositions[i];\n                }\n                else { // split it up\n                    i = Math.floor(index);\n                    distance = index - i; // the decimal\n                }\n                if (typeof distance !== 'undefined' &&\n                    typeof ordinalPositions[i] !== 'undefined') {\n                    return ordinalPositions[i] + (distance ?\n                        distance *\n                            (ordinalPositions[i + 1] - ordinalPositions[i]) :\n                        0);\n                }\n                return index;\n            }\n            /**\n             * Translate from linear (internal) to axis value.\n             *\n             * @private\n             * @function Highcharts.Axis#lin2val\n             * @param {number} val\n             * The linear abstracted value.\n             */\n            function lin2val(val) {\n                const axis = this, ordinal = axis.ordinal, localMin = axis.old ? axis.old.min : axis.min, localA = axis.old ? axis.old.transA : axis.transA;\n                // Always use extendedPositions (#19816)\n                let positions = ordinal.getExtendedPositions();\n                // In some cases (especially in early stages of the chart creation) the\n                // getExtendedPositions might return undefined.\n                if (positions && positions.length) {\n                    // Convert back from modivied value to pixels. // #15970\n                    const pixelVal = correctFloat((val - localMin) * localA +\n                        axis.minPixelPadding), index = correctFloat(ordinal.getIndexOfPoint(pixelVal, positions)), mantissa = correctFloat(index % 1);\n                    // Check if the index is inside position array. If true,\n                    // read/approximate value for that exact index.\n                    if (index >= 0 && index <= positions.length - 1) {\n                        const leftNeighbour = positions[Math.floor(index)], rightNeighbour = positions[Math.ceil(index)], distance = rightNeighbour - leftNeighbour;\n                        return positions[Math.floor(index)] + mantissa * distance;\n                    }\n                }\n                // If the value is outside positions array, return initial value\n                return val; // #16784\n            }\n            /**\n             * Internal function to calculate the precise index in ordinalPositions\n             * array.\n             * @private\n             */\n            function getIndexInArray(ordinalPositions, val) {\n                const index = OrdinalAxis.Additions.findIndexOf(ordinalPositions, val, true);\n                if (ordinalPositions[index] === val) {\n                    return index;\n                }\n                const percent = (val - ordinalPositions[index]) /\n                    (ordinalPositions[index + 1] - ordinalPositions[index]);\n                return index + percent;\n            }\n            /**\n            * @private\n            */\n            function onAxisAfterInit() {\n                const axis = this;\n                if (!axis.ordinal) {\n                    axis.ordinal = new OrdinalAxis.Additions(axis);\n                }\n            }\n            /**\n             * @private\n             */\n            function onAxisFoundExtremes() {\n                const axis = this, { eventArgs, options } = axis;\n                if (axis.isXAxis &&\n                    defined(options.overscroll) &&\n                    options.overscroll !== 0 &&\n                    isNumber(axis.max) &&\n                    isNumber(axis.min)) {\n                    if (axis.options.ordinal && !axis.ordinal.originalOrdinalRange) {\n                        // Calculate the original ordinal range\n                        axis.ordinal.getExtendedPositions(false);\n                    }\n                    if (axis.max === axis.dataMax &&\n                        (\n                        // Panning is an exception. We don't want to apply\n                        // overscroll when panning over the dataMax\n                        eventArgs?.trigger !== 'pan' ||\n                            axis.isInternal) &&\n                        // Scrollbar buttons are the other execption\n                        eventArgs?.trigger !== 'navigator') {\n                        const overscroll = axis.ordinal.convertOverscroll(options.overscroll);\n                        axis.max += overscroll;\n                        // Live data and buttons require translation for the min:\n                        if (!axis.isInternal &&\n                            defined(axis.userMin) &&\n                            eventArgs?.trigger !== 'mousewheel') {\n                            axis.min += overscroll;\n                        }\n                    }\n                }\n            }\n            /**\n             * For ordinal axis, that loads data async, redraw axis after data is\n             * loaded. If we don't do that, axis will have the same extremes as\n             * previously, but ordinal positions won't be calculated. See #10290\n             * @private\n             */\n            function onAxisAfterSetScale() {\n                const axis = this;\n                if (axis.horiz && !axis.isDirty) {\n                    axis.isDirty = axis.isOrdinal &&\n                        axis.chart.navigator &&\n                        !axis.chart.navigator.adaptToUpdatedData;\n                }\n            }\n            /**\n             * @private\n             */\n            function onAxisInitialAxisTranslation() {\n                const axis = this;\n                if (axis.ordinal) {\n                    axis.ordinal.beforeSetTickPositions();\n                    axis.tickInterval = axis.ordinal.postProcessTickInterval(axis.tickInterval);\n                }\n            }\n            /**\n             * Extending the Chart.pan method for ordinal axes\n             * @private\n             */\n            function onChartPan(e) {\n                const chart = this, xAxis = chart.xAxis[0], overscroll = xAxis.ordinal.convertOverscroll(xAxis.options.overscroll), chartX = e.originalEvent.chartX, panning = chart.options.chart.panning;\n                let runBase = false;\n                if (panning &&\n                    panning.type !== 'y' &&\n                    xAxis.options.ordinal &&\n                    xAxis.series.length) {\n                    const mouseDownX = chart.mouseDownX, extremes = xAxis.getExtremes(), dataMax = extremes.dataMax, min = extremes.min, max = extremes.max, hoverPoints = chart.hoverPoints, closestPointRange = (xAxis.closestPointRange ||\n                        (xAxis.ordinal && xAxis.ordinal.overscrollPointsRange)), pointPixelWidth = (xAxis.translationSlope *\n                        (xAxis.ordinal.slope || closestPointRange)), \n                    // how many ordinal units did we move?\n                    movedUnits = Math.round((mouseDownX - chartX) / pointPixelWidth), \n                    // get index of all the chart's points\n                    extendedOrdinalPositions = xAxis.ordinal.getExtendedPositions(), extendedAxis = {\n                        ordinal: {\n                            positions: extendedOrdinalPositions,\n                            extendedOrdinalPositions: extendedOrdinalPositions\n                        }\n                    }, index2val = xAxis.index2val, val2lin = xAxis.val2lin;\n                    let trimmedRange, ordinalPositions;\n                    // we have an ordinal axis, but the data is equally spaced\n                    if (!extendedAxis.ordinal.positions) {\n                        runBase = true;\n                    }\n                    else if (Math.abs(movedUnits) > 1) {\n                        // Remove active points for shared tooltip\n                        if (hoverPoints) {\n                            hoverPoints.forEach(function (point) {\n                                point.setState();\n                            });\n                        }\n                        // In grouped data series, the last ordinal position represents\n                        // the grouped data, which is to the left of the real data max.\n                        // If we don't compensate for this, we will be allowed to pan\n                        // grouped data series passed the right of the plot area.\n                        ordinalPositions = extendedAxis.ordinal.positions;\n                        if (dataMax >\n                            ordinalPositions[ordinalPositions.length - 1]) {\n                            ordinalPositions.push(dataMax);\n                        }\n                        // Get the new min and max values by getting the ordinal index\n                        // for the current extreme, then add the moved units and\n                        // translate back to values. This happens on the extended\n                        // ordinal positions if the new position is out of range, else\n                        // it happens on the current x axis which is smaller and faster.\n                        chart.setFixedRange(max - min);\n                        trimmedRange = xAxis.navigatorAxis\n                            .toFixedRange(void 0, void 0, index2val.apply(extendedAxis, [\n                            val2lin.apply(extendedAxis, [min, true]) +\n                                movedUnits\n                        ]), index2val.apply(extendedAxis, [\n                            val2lin.apply(extendedAxis, [max, true]) +\n                                movedUnits\n                        ]));\n                        // Apply it if it is within the available data range\n                        if (trimmedRange.min >= Math.min(extremes.dataMin, min) &&\n                            trimmedRange.max <= Math.max(dataMax, max) + overscroll) {\n                            xAxis.setExtremes(trimmedRange.min, trimmedRange.max, true, false, { trigger: 'pan' });\n                        }\n                        chart.mouseDownX = chartX; // set new reference for next run\n                        css(chart.container, { cursor: 'move' });\n                    }\n                }\n                else {\n                    runBase = true;\n                }\n                // revert to the linear chart.pan version\n                if (runBase || (panning && /y/.test(panning.type))) {\n                    if (overscroll) {\n                        xAxis.max = xAxis.dataMax + overscroll;\n                    }\n                }\n                else {\n                    e.preventDefault();\n                }\n            }\n            /**\n             * @private\n             */\n            function onSeriesUpdatedData() {\n                const xAxis = this.xAxis;\n                // Destroy the extended ordinal index on updated data\n                // and destroy extendedOrdinalPositions, #16055.\n                if (xAxis && xAxis.options.ordinal) {\n                    delete xAxis.ordinal.index;\n                    delete xAxis.ordinal.originalOrdinalRange;\n                }\n            }\n            /**\n             * Translate from a linear axis value to the corresponding ordinal axis\n             * position. If there are no gaps in the ordinal axis this will be the\n             * same. The translated value is the value that the point would have if\n             * the axis was linear, using the same min and max.\n             *\n             * @private\n             * @function Highcharts.Axis#val2lin\n             * @param {number} val\n             * The axis value.\n             * @param {boolean} [toIndex]\n             * Whether to return the index in the ordinalPositions or the new value.\n             */\n            function val2lin(val, toIndex) {\n                const axis = this, ordinal = axis.ordinal, ordinalPositions = ordinal.positions;\n                let slope = ordinal.slope, extendedOrdinalPositions;\n                if (!ordinalPositions) {\n                    return val;\n                }\n                const ordinalLength = ordinalPositions.length;\n                let ordinalIndex;\n                // If the searched value is inside visible plotArea, ivastigate the\n                // value basing on ordinalPositions.\n                if (ordinalPositions[0] <= val &&\n                    ordinalPositions[ordinalLength - 1] >= val) {\n                    ordinalIndex = getIndexInArray(ordinalPositions, val);\n                    // final return value is based on ordinalIndex\n                }\n                else {\n                    extendedOrdinalPositions =\n                        ordinal.getExtendedPositions &&\n                            ordinal.getExtendedPositions();\n                    if (!(extendedOrdinalPositions && extendedOrdinalPositions.length)) {\n                        return val;\n                    }\n                    const length = extendedOrdinalPositions.length;\n                    if (!slope) {\n                        slope =\n                            (extendedOrdinalPositions[length - 1] -\n                                extendedOrdinalPositions[0]) /\n                                length;\n                    }\n                    // OriginalPointReference is equal to the index of\n                    // first point of ordinalPositions in extendedOrdinalPositions.\n                    const originalPositionsReference = getIndexInArray(extendedOrdinalPositions, ordinalPositions[0]);\n                    // If the searched value is outside the visiblePlotArea,\n                    // check if it is inside extendedOrdinalPositions.\n                    if (val >= extendedOrdinalPositions[0] &&\n                        val <=\n                            extendedOrdinalPositions[length - 1]) {\n                        // Return Value\n                        ordinalIndex = getIndexInArray(extendedOrdinalPositions, val) -\n                            originalPositionsReference;\n                    }\n                    else {\n                        if (!toIndex) {\n                            // If the value is outside positions array,\n                            // return initial value, #16784\n                            return val;\n                        }\n                        // Since ordinal.slope is the average distance between 2\n                        // points on visible plotArea, this can be used to calculate\n                        // the approximate position of the point, which is outside\n                        // the extendedOrdinalPositions.\n                        if (val < extendedOrdinalPositions[0]) {\n                            const diff = extendedOrdinalPositions[0] - val, approximateIndexOffset = diff / slope;\n                            ordinalIndex =\n                                -originalPositionsReference -\n                                    approximateIndexOffset;\n                        }\n                        else {\n                            const diff = val -\n                                extendedOrdinalPositions[length - 1], approximateIndexOffset = diff / slope;\n                            ordinalIndex =\n                                approximateIndexOffset +\n                                    length -\n                                    originalPositionsReference;\n                        }\n                    }\n                }\n                return toIndex ? ordinalIndex : slope * (ordinalIndex || 0) +\n                    ordinal.offset;\n            }\n            /* *\n             *\n             *  Classes\n             *\n             * */\n            /**\n             * @private\n             */\n            class Additions {\n                /* *\n                 *\n                 *  Constructors\n                 *\n                 * */\n                /**\n                 * @private\n                 */\n                constructor(axis) {\n                    this.index = {};\n                    this.axis = axis;\n                }\n                /* *\n                *\n                *  Functions\n                *\n                * */\n                /**\n                 * Calculate the ordinal positions before tick positions are calculated.\n                 * @private\n                 */\n                beforeSetTickPositions() {\n                    const axis = this.axis, ordinal = axis.ordinal, extremes = axis.getExtremes(), min = extremes.min, max = extremes.max, hasBreaks = axis.brokenAxis?.hasBreaks, isOrdinal = axis.options.ordinal;\n                    let len, uniqueOrdinalPositions, dist, minIndex, maxIndex, slope, i, ordinalPositions = [], overscrollPointsRange = Number.MAX_VALUE, useOrdinal = false, adjustOrdinalExtremesPoints = false, isBoosted = false;\n                    // Apply the ordinal logic\n                    if (isOrdinal || hasBreaks) { // #4167 YAxis is never ordinal ?\n                        let distanceBetweenPoint = 0;\n                        axis.series.forEach(function (series, i) {\n                            uniqueOrdinalPositions = [];\n                            // For an axis with multiple series, check if the distance\n                            // between points is identical throughout all series.\n                            if (i > 0 &&\n                                series.options.id !== 'highcharts-navigator-series' &&\n                                series.processedXData.length > 1) {\n                                adjustOrdinalExtremesPoints =\n                                    distanceBetweenPoint !== series.processedXData[1] -\n                                        series.processedXData[0];\n                            }\n                            distanceBetweenPoint =\n                                series.processedXData[1] - series.processedXData[0];\n                            if (series.boosted) {\n                                isBoosted = series.boosted;\n                            }\n                            if (series.reserveSpace() &&\n                                (series\n                                    .takeOrdinalPosition !== false || hasBreaks)) {\n                                // concatenate the processed X data into the existing\n                                // positions, or the empty array\n                                ordinalPositions = ordinalPositions.concat(series.processedXData);\n                                len = ordinalPositions.length;\n                                // remove duplicates (#1588)\n                                ordinalPositions.sort(function (a, b) {\n                                    // without a custom function it is sorted as strings\n                                    return a - b;\n                                });\n                                overscrollPointsRange = Math.min(overscrollPointsRange, pick(\n                                // Check for a single-point series:\n                                series.closestPointRange, overscrollPointsRange));\n                                if (len) {\n                                    i = 0;\n                                    while (i < len - 1) {\n                                        if (ordinalPositions[i] !==\n                                            ordinalPositions[i + 1]) {\n                                            uniqueOrdinalPositions.push(ordinalPositions[i + 1]);\n                                        }\n                                        i++;\n                                    }\n                                    // Check first item:\n                                    if (uniqueOrdinalPositions[0] !==\n                                        ordinalPositions[0]) {\n                                        uniqueOrdinalPositions.unshift(ordinalPositions[0]);\n                                    }\n                                    ordinalPositions = uniqueOrdinalPositions;\n                                }\n                            }\n                        });\n                        if (!axis.ordinal.originalOrdinalRange) {\n                            // Calculate current originalOrdinalRange\n                            axis.ordinal.originalOrdinalRange =\n                                (ordinalPositions.length - 1) * overscrollPointsRange;\n                        }\n                        // If the distance between points is not identical throughout\n                        // all series, remove the first and last ordinal position to\n                        // avoid enabling ordinal logic when it is not needed, #17405.\n                        // Only for boosted series because changes are negligible.\n                        if (adjustOrdinalExtremesPoints && isBoosted) {\n                            ordinalPositions.pop();\n                            ordinalPositions.shift();\n                        }\n                        // cache the length\n                        len = ordinalPositions.length;\n                        // Check if we really need the overhead of mapping axis data\n                        // against the ordinal positions. If the series consist of\n                        // evenly spaced data any way, we don't need any ordinal logic.\n                        if (len > 2) { // two points have equal distance by default\n                            dist = ordinalPositions[1] - ordinalPositions[0];\n                            i = len - 1;\n                            while (i-- && !useOrdinal) {\n                                if (ordinalPositions[i + 1] - ordinalPositions[i] !==\n                                    dist) {\n                                    useOrdinal = true;\n                                }\n                            }\n                            // When zooming in on a week, prevent axis padding for\n                            // weekends even though the data within the week is evenly\n                            // spaced.\n                            if (!axis.options.keepOrdinalPadding &&\n                                (ordinalPositions[0] - min > dist ||\n                                    (max -\n                                        ordinalPositions[ordinalPositions.length - 1]) > dist)) {\n                                useOrdinal = true;\n                            }\n                        }\n                        else if (axis.options.overscroll) {\n                            if (len === 2) {\n                                // Exactly two points, distance for overscroll is fixed:\n                                overscrollPointsRange =\n                                    ordinalPositions[1] - ordinalPositions[0];\n                            }\n                            else if (len === 1) {\n                                // We have just one point, closest distance is unknown.\n                                // Assume then it is last point and overscrolled range:\n                                overscrollPointsRange = axis.ordinal.convertOverscroll(axis.options.overscroll);\n                                ordinalPositions = [\n                                    ordinalPositions[0],\n                                    ordinalPositions[0] + overscrollPointsRange\n                                ];\n                            }\n                            else {\n                                // In case of zooming in on overscrolled range, stick to\n                                // the old range:\n                                overscrollPointsRange = ordinal.overscrollPointsRange;\n                            }\n                        }\n                        // Record the slope and offset to compute the linear values from\n                        // the array index. Since the ordinal positions may exceed the\n                        // current range, get the start and end positions within it\n                        // (#719, #665b)\n                        if (useOrdinal || axis.forceOrdinal) {\n                            if (axis.options.overscroll) {\n                                ordinal.overscrollPointsRange = overscrollPointsRange;\n                                ordinalPositions = ordinalPositions.concat(ordinal.getOverscrollPositions());\n                            }\n                            // Register\n                            ordinal.positions = ordinalPositions;\n                            // This relies on the ordinalPositions being set. Use\n                            // Math.max and Math.min to prevent padding on either sides\n                            // of the data.\n                            minIndex = axis.ordinal2lin(// #5979\n                            Math.max(min, ordinalPositions[0]), true);\n                            maxIndex = Math.max(axis.ordinal2lin(Math.min(max, ordinalPositions[ordinalPositions.length - 1]), true), 1); // #3339\n                            // Set the slope and offset of the values compared to the\n                            // indices in the ordinal positions.\n                            ordinal.slope = slope =\n                                (max - min) / (maxIndex - minIndex);\n                            ordinal.offset = min - (minIndex * slope);\n                        }\n                        else {\n                            ordinal.overscrollPointsRange = pick(axis.closestPointRange, ordinal.overscrollPointsRange);\n                            ordinal.positions = axis.ordinal.slope = ordinal.offset =\n                                void 0;\n                        }\n                    }\n                    axis.isOrdinal = isOrdinal && useOrdinal; // #3818, #4196, #4926\n                    ordinal.groupIntervalFactor = null; // reset for next run\n                }\n                /**\n                 * Faster way of using the Array.indexOf method.\n                 * Works for sorted arrays only with unique values.\n                 *\n                 * @param {Array} sortedArray\n                 *        The sorted array inside which we are looking for.\n                 * @param {number} key\n                 *        The key to being found.\n                 * @param {boolean} indirectSearch\n                 *        In case of lack of the point in the array, should return\n                 *        value be equal to -1 or the closest smaller index.\n                 *  @private\n                 */\n                static findIndexOf(sortedArray, key, indirectSearch) {\n                    let start = 0, end = sortedArray.length - 1, middle;\n                    while (start < end) {\n                        middle = Math.ceil((start + end) / 2);\n                        // Key found as the middle element.\n                        if (sortedArray[middle] <= key) {\n                            // Continue searching to the right.\n                            start = middle;\n                        }\n                        else {\n                            // Continue searching to the left.\n                            end = middle - 1;\n                        }\n                    }\n                    if (sortedArray[start] === key) {\n                        return start;\n                    }\n                    // Key could not be found.\n                    return !indirectSearch ? -1 : start;\n                }\n                /**\n                 * Get the ordinal positions for the entire data set. This is necessary\n                 * in chart panning because we need to find out what points or data\n                 * groups are available outside the visible range. When a panning\n                 * operation starts, if an index for the given grouping does not exists,\n                 * it is created and cached. This index is deleted on updated data, so\n                 * it will be regenerated the next time a panning operation starts.\n                 * @private\n                 */\n                getExtendedPositions(withOverscroll = true) {\n                    const ordinal = this, axis = ordinal.axis, axisProto = axis.constructor.prototype, chart = axis.chart, grouping = axis.series[0]?.currentDataGrouping, key = grouping ?\n                        grouping.count + grouping.unitName :\n                        'raw', overscroll = withOverscroll ?\n                        axis.ordinal.convertOverscroll(axis.options.overscroll) : 0, extremes = axis.getExtremes();\n                    let fakeAxis, fakeSeries = void 0, ordinalIndex = ordinal.index;\n                    // If this is the first time, or the ordinal index is deleted by\n                    // updatedData,\n                    // create it.\n                    if (!ordinalIndex) {\n                        ordinalIndex = ordinal.index = {};\n                    }\n                    if (!ordinalIndex[key]) {\n                        // Create a fake axis object where the extended ordinal\n                        // positions are emulated\n                        fakeAxis = {\n                            series: [],\n                            chart: chart,\n                            forceOrdinal: false,\n                            getExtremes: function () {\n                                return {\n                                    min: extremes.dataMin,\n                                    max: extremes.dataMax + overscroll\n                                };\n                            },\n                            applyGrouping: axisProto.applyGrouping,\n                            getGroupPixelWidth: axisProto.getGroupPixelWidth,\n                            getTimeTicks: axisProto.getTimeTicks,\n                            options: {\n                                ordinal: true\n                            },\n                            ordinal: {\n                                getGroupIntervalFactor: this.getGroupIntervalFactor\n                            },\n                            ordinal2lin: axisProto.ordinal2lin,\n                            getIndexOfPoint: axisProto.getIndexOfPoint,\n                            val2lin: axisProto.val2lin // #2590\n                        };\n                        fakeAxis.ordinal.axis = fakeAxis;\n                        // Add the fake series to hold the full data, then apply\n                        // processData to it\n                        axis.series.forEach(function (series) {\n                            fakeSeries = {\n                                xAxis: fakeAxis,\n                                xData: series.xData.slice(),\n                                chart: chart,\n                                groupPixelWidth: series.groupPixelWidth,\n                                destroyGroupedData: H.noop,\n                                getProcessedData: Series.prototype.getProcessedData,\n                                applyGrouping: Series.prototype.applyGrouping,\n                                reserveSpace: Series.prototype.reserveSpace,\n                                visible: series.visible\n                            };\n                            if (withOverscroll) {\n                                fakeSeries.xData = fakeSeries.xData.concat(ordinal.getOverscrollPositions());\n                            }\n                            fakeSeries.options = {\n                                dataGrouping: grouping ? {\n                                    firstAnchor: 'firstPoint',\n                                    anchor: 'middle',\n                                    lastAnchor: 'lastPoint',\n                                    enabled: true,\n                                    forced: true,\n                                    // doesn't matter which, use the fastest\n                                    approximation: 'open',\n                                    units: [[\n                                            grouping.unitName,\n                                            [grouping.count]\n                                        ]]\n                                } : {\n                                    enabled: false\n                                }\n                            };\n                            fakeAxis.series.push(fakeSeries);\n                            series.processData.apply(fakeSeries);\n                        });\n                        fakeAxis.applyGrouping({ hasExtremesChanged: true });\n                        // Force to use the ordinal when points are evenly spaced (e.g.\n                        // weeks), #3825.\n                        if ((fakeSeries?.closestPointRange !==\n                            fakeSeries?.basePointRange) &&\n                            fakeSeries.currentDataGrouping) {\n                            fakeAxis.forceOrdinal = true;\n                        }\n                        // Run beforeSetTickPositions to compute the ordinalPositions\n                        axis.ordinal.beforeSetTickPositions.apply({ axis: fakeAxis });\n                        if (!axis.ordinal.originalOrdinalRange &&\n                            fakeAxis.ordinal.originalOrdinalRange) {\n                            axis.ordinal.originalOrdinalRange =\n                                fakeAxis.ordinal.originalOrdinalRange;\n                        }\n                        // Cache it\n                        ordinalIndex[key] = fakeAxis.ordinal.positions;\n                    }\n                    return ordinalIndex[key];\n                }\n                /**\n                 * Find the factor to estimate how wide the plot area would have been if\n                 * ordinal gaps were included. This value is used to compute an imagined\n                 * plot width in order to establish the data grouping interval.\n                 *\n                 * A real world case is the intraday-candlestick example. Without this\n                 * logic, it would show the correct data grouping when viewing a range\n                 * within each day, but once moving the range to include the gap between\n                 * two days, the interval would include the cut-away night hours and the\n                 * data grouping would be wrong. So the below method tries to compensate\n                 * by identifying the most common point interval, in this case days.\n                 *\n                 * An opposite case is presented in issue #718. We have a long array of\n                 * daily data, then one point is appended one hour after the last point.\n                 * We expect the data grouping not to change.\n                 *\n                 * In the future, if we find cases where this estimation doesn't work\n                 * optimally, we might need to add a second pass to the data grouping\n                 * logic, where we do another run with a greater interval if the number\n                 * of data groups is more than a certain fraction of the desired group\n                 * count.\n                 * @private\n                 */\n                getGroupIntervalFactor(xMin, xMax, series) {\n                    const ordinal = this, processedXData = series.processedXData, len = processedXData.length, distances = [];\n                    let median, i, groupIntervalFactor = ordinal.groupIntervalFactor;\n                    // Only do this computation for the first series, let the other\n                    // inherit it (#2416)\n                    if (!groupIntervalFactor) {\n                        // Register all the distances in an array\n                        for (i = 0; i < len - 1; i++) {\n                            distances[i] = (processedXData[i + 1] -\n                                processedXData[i]);\n                        }\n                        // Sort them and find the median\n                        distances.sort(function (a, b) {\n                            return a - b;\n                        });\n                        median = distances[Math.floor(len / 2)];\n                        // Compensate for series that don't extend through the entire\n                        // axis extent. #1675.\n                        xMin = Math.max(xMin, processedXData[0]);\n                        xMax = Math.min(xMax, processedXData[len - 1]);\n                        ordinal.groupIntervalFactor = groupIntervalFactor =\n                            (len * median) / (xMax - xMin);\n                    }\n                    // Return the factor needed for data grouping\n                    return groupIntervalFactor;\n                }\n                /**\n                 * Get index of point inside the ordinal positions array.\n                 *\n                 * @private\n                 * @param {number} val\n                 * The pixel value of a point.\n                 *\n                 * @param {Array<number>} [ordinalArray]\n                 * An array of all points available on the axis for the given data set.\n                 * Either ordinalPositions if the value is inside the plotArea or\n                 * extendedOrdinalPositions if not.\n                 */\n                getIndexOfPoint(val, ordinalArray) {\n                    const ordinal = this, axis = ordinal.axis;\n                    let firstPointVal = 0;\n                    // Check whether the series has at least one point inside the chart\n                    const hasPointsInside = function (series) {\n                        const { min, max } = axis;\n                        if (defined(min) && defined(max)) {\n                            return series.points.some((point) => point.x >= min && point.x <= max);\n                        }\n                        return false;\n                    };\n                    let firstPointX;\n                    // When more series assign to axis, find the smallest one, #15987.\n                    axis.series.forEach((series) => {\n                        const firstPoint = series.points?.[0];\n                        if (defined(firstPoint?.plotX) &&\n                            (firstPoint.plotX < firstPointX ||\n                                !defined(firstPointX)) &&\n                            hasPointsInside(series)) {\n                            firstPointX = firstPoint.plotX;\n                            firstPointVal = firstPoint.x;\n                        }\n                    });\n                    // If undefined, give a default value\n                    firstPointX ?? (firstPointX = axis.minPixelPadding);\n                    // Distance in pixels between two points on the ordinal axis in the\n                    // current zoom.\n                    const ordinalPointPixelInterval = axis.translationSlope * (ordinal.slope ||\n                        axis.closestPointRange ||\n                        ordinal.overscrollPointsRange), \n                    // toValue for the first point.\n                    shiftIndex = correctFloat((val - firstPointX) / ordinalPointPixelInterval);\n                    return Additions.findIndexOf(ordinalArray, firstPointVal, true) + shiftIndex;\n                }\n                /**\n                 * Get ticks for an ordinal axis within a range where points don't\n                 * exist. It is required when overscroll is enabled. We can't base on\n                 * points, because we may not have any, so we use approximated\n                 * pointRange and generate these ticks between Axis.dataMax,\n                 * Axis.dataMax + Axis.overscroll evenly spaced. Used in panning and\n                 * navigator scrolling.\n                 * @private\n                 */\n                getOverscrollPositions() {\n                    const ordinal = this, axis = ordinal.axis, extraRange = ordinal.convertOverscroll(axis.options.overscroll), distance = ordinal.overscrollPointsRange, positions = [];\n                    let max = axis.dataMax;\n                    if (defined(distance)) {\n                        // Max + pointRange because we need to scroll to the last\n                        while (max <= axis.dataMax + extraRange) {\n                            max += distance;\n                            positions.push(max);\n                        }\n                    }\n                    return positions;\n                }\n                /**\n                 * Make the tick intervals closer because the ordinal gaps make the\n                 * ticks spread out or cluster.\n                 * @private\n                 */\n                postProcessTickInterval(tickInterval) {\n                    // Problem: https://jsfiddle.net/highcharts/FQm4E/1/. This is a case\n                    // where this algorithm doesn't work optimally. In this case, the\n                    // tick labels are spread out per week, but all the gaps reside\n                    // within weeks. So we have a situation where the labels are courser\n                    // than the ordinal gaps, and thus the tick interval should not be\n                    // altered.\n                    const ordinal = this, axis = ordinal.axis, ordinalSlope = ordinal.slope;\n                    let ret;\n                    if (ordinalSlope) {\n                        if (!axis.options.breaks) {\n                            ret = (tickInterval /\n                                (ordinalSlope / axis.closestPointRange));\n                        }\n                        else {\n                            ret = axis.closestPointRange || tickInterval; // #7275\n                        }\n                    }\n                    else {\n                        ret = tickInterval;\n                    }\n                    return ret;\n                }\n                /**\n                 * If overscroll is pixel or pecentage value, convert it to axis range.\n                 *\n                 * @private\n                 * @param {number | string} overscroll\n                 * Overscroll value in axis range, pixels or percentage value.\n                 * @return {number}\n                 * Overscroll value in axis range.\n                 */\n                convertOverscroll(overscroll = 0) {\n                    const ordinal = this, axis = ordinal.axis, calculateOverscroll = function (overscrollPercentage) {\n                        return pick(ordinal.originalOrdinalRange, defined(axis.dataMax) && defined(axis.dataMin) ?\n                            axis.dataMax - axis.dataMin : 0) * overscrollPercentage;\n                    };\n                    if (isString(overscroll)) {\n                        const overscrollValue = parseInt(overscroll, 10);\n                        if (/%$/.test(overscroll)) {\n                            // If overscroll is percentage\n                            return calculateOverscroll(overscrollValue / 100);\n                        }\n                        if (/px/.test(overscroll)) {\n                            // If overscroll is pixels, it is limited to 90% of the axis\n                            // length to prevent division by zero\n                            const limitedOverscrollValue = Math.min(overscrollValue, axis.len * 0.9), pixelToPercent = limitedOverscrollValue / axis.len;\n                            return calculateOverscroll(pixelToPercent / (1 - pixelToPercent));\n                        }\n                        // If overscroll is a string but not pixels or percentage,\n                        // return 0 as no overscroll\n                        return 0;\n                    }\n                    return overscroll;\n                }\n            }\n            OrdinalAxis.Additions = Additions;\n        })(OrdinalAxis || (OrdinalAxis = {}));\n        /* *\n         *\n         *  Default Export\n         *\n         * */\n\n        return OrdinalAxis;\n    });\n    _registerModule(_modules, 'Stock/RangeSelector/RangeSelectorDefaults.js', [], function () {\n        /* *\n         *\n         *  (c) 2010-2024 Torstein Honsi\n         *\n         *  License: www.highcharts.com/license\n         *\n         *  !!!!!!! SOURCE GETS TRANSPILED BY TYPESCRIPT. EDIT TS FILE ONLY. !!!!!!!\n         *\n         * */\n        /* *\n         *\n         *  Declarations\n         *\n         * */\n        /**\n         * Language object. The language object is global and it can't be set\n         * on each chart initialization. Instead, use `Highcharts.setOptions` to\n         * set it before any chart is initialized.\n         *\n         * ```js\n         * Highcharts.setOptions({\n         *     lang: {\n         *         months: [\n         *             'Janvier', 'Février', 'Mars', 'Avril',\n         *             'Mai', 'Juin', 'Juillet', 'Août',\n         *             'Septembre', 'Octobre', 'Novembre', 'Décembre'\n         *         ],\n         *         weekdays: [\n         *             'Dimanche', 'Lundi', 'Mardi', 'Mercredi',\n         *             'Jeudi', 'Vendredi', 'Samedi'\n         *         ]\n         *     }\n         * });\n         * ```\n         *\n         * @optionparent lang\n         */\n        const lang = {\n            /**\n             * The text for the label for the range selector buttons.\n             *\n             * @product highstock gantt\n             */\n            rangeSelectorZoom: 'Zoom',\n            /**\n             * The text for the label for the \"from\" input box in the range\n             * selector. Since v9.0, this string is empty as the label is not\n             * rendered by default.\n             *\n             * @product highstock gantt\n             */\n            rangeSelectorFrom: '',\n            /**\n             * The text for the label for the \"to\" input box in the range selector.\n             *\n             * @product highstock gantt\n             */\n            rangeSelectorTo: '→'\n        };\n        /**\n         * The range selector is a tool for selecting ranges to display within\n         * the chart. It provides buttons to select preconfigured ranges in\n         * the chart, like 1 day, 1 week, 1 month etc. It also provides input\n         * boxes where min and max dates can be manually input.\n         *\n         * @product      highstock gantt\n         * @optionparent rangeSelector\n         */\n        const rangeSelector = {\n            /**\n             * Whether to enable all buttons from the start. By default buttons are\n             * only enabled if the corresponding time range exists on the X axis,\n             * but enabling all buttons allows for dynamically loading different\n             * time ranges.\n             *\n             * @sample {highstock} stock/rangeselector/allbuttonsenabled-true/\n             *         All buttons enabled\n             *\n             * @since     2.0.3\n             */\n            allButtonsEnabled: false,\n            /**\n             * An array of configuration objects for the buttons.\n             *\n             * Defaults to:\n             * ```js\n             * buttons: [{\n             *     type: 'month',\n             *     count: 1,\n             *     text: '1m',\n             *     title: 'View 1 month'\n             * }, {\n             *     type: 'month',\n             *     count: 3,\n             *     text: '3m',\n             *     title: 'View 3 months'\n             * }, {\n             *     type: 'month',\n             *     count: 6,\n             *     text: '6m',\n             *     title: 'View 6 months'\n             * }, {\n             *     type: 'ytd',\n             *     text: 'YTD',\n             *     title: 'View year to date'\n             * }, {\n             *     type: 'year',\n             *     count: 1,\n             *     text: '1y',\n             *     title: 'View 1 year'\n             * }, {\n             *     type: 'all',\n             *     text: 'All',\n             *     title: 'View all'\n             * }]\n             * ```\n             *\n             * @sample {highstock} stock/demo/rangeselector-datagrouping/\n             *         Data grouping by buttons\n             *\n             * @type      {Array<*>}\n             */\n            buttons: void 0,\n            /**\n             * How many units of the defined type the button should span. If `type`\n             * is \"month\" and `count` is 3, the button spans three months.\n             *\n             * @type      {number}\n             * @default   1\n             * @apioption rangeSelector.buttons.count\n             */\n            /**\n             * Fires when clicking on the rangeSelector button. One parameter,\n             * event, is passed to the function, containing common event\n             * information.\n             *\n             * ```js\n             * click: function(e) {\n             *   console.log(this);\n             * }\n             * ```\n             *\n             * Return false to stop default button's click action.\n             *\n             * @sample {highstock} stock/rangeselector/button-click/\n             *         Click event on the button\n             *\n             * @type      {Highcharts.RangeSelectorClickCallbackFunction}\n             * @apioption rangeSelector.buttons.events.click\n             */\n            /**\n             * Additional range (in milliseconds) added to the end of the calculated\n             * time span.\n             *\n             * @sample {highstock} stock/rangeselector/min-max-offsets/\n             *         Button offsets\n             *\n             * @type      {number}\n             * @default   0\n             * @since     6.0.0\n             * @apioption rangeSelector.buttons.offsetMax\n             */\n            /**\n             * Additional range (in milliseconds) added to the start of the\n             * calculated time span.\n             *\n             * @sample {highstock} stock/rangeselector/min-max-offsets/\n             *         Button offsets\n             *\n             * @type      {number}\n             * @default   0\n             * @since     6.0.0\n             * @apioption rangeSelector.buttons.offsetMin\n             */\n            /**\n             * When buttons apply dataGrouping on a series, by default zooming\n             * in/out will deselect buttons and unset dataGrouping. Enable this\n             * option to keep buttons selected when extremes change.\n             *\n             * @sample {highstock} stock/rangeselector/preserve-datagrouping/\n             *         Different preserveDataGrouping settings\n             *\n             * @type      {boolean}\n             * @default   false\n             * @since     6.1.2\n             * @apioption rangeSelector.buttons.preserveDataGrouping\n             */\n            /**\n             * A custom data grouping object for each button.\n             *\n             * @see [series.dataGrouping](#plotOptions.series.dataGrouping)\n             *\n             * @sample {highstock} stock/demo/rangeselector-datagrouping/\n             *         Data grouping by range selector buttons\n             *\n             * @type      {*}\n             * @extends   plotOptions.series.dataGrouping\n             * @apioption rangeSelector.buttons.dataGrouping\n             */\n            /**\n             * The text for the button itself.\n             *\n             * @type      {string}\n             * @apioption rangeSelector.buttons.text\n             */\n            /**\n             * Explanation for the button, shown as a tooltip on hover, and used by\n             * assistive technology.\n             *\n             * @type      {string}\n             * @apioption rangeSelector.buttons.title\n             */\n            /**\n             * Defined the time span for the button. Can be one of `millisecond`,\n             * `second`, `minute`, `hour`, `day`, `week`, `month`, `year`, `ytd`,\n             * and `all`.\n             *\n             * @type       {Highcharts.RangeSelectorButtonTypeValue}\n             * @apioption  rangeSelector.buttons.type\n             */\n            /**\n             * The space in pixels between the buttons in the range selector.\n             */\n            buttonSpacing: 5,\n            /**\n             * Whether to collapse the range selector buttons into a dropdown when\n             * there is not enough room to show everything in a single row, instead\n             * of dividing the range selector into multiple rows.\n             * Can be one of the following:\n             *  - `always`: Always collapse\n             *  - `responsive`: Only collapse when there is not enough room\n             *  - `never`: Never collapse\n             *\n             * @sample {highstock} stock/rangeselector/dropdown/\n             *         Dropdown option\n             *\n             * @validvalue [\"always\", \"responsive\", \"never\"]\n             * @since 9.0.0\n             */\n            dropdown: 'responsive',\n            /**\n             * Enable or disable the range selector. Default to `true` for stock\n             * charts, using the `stockChart` factory.\n             *\n             * @sample {highstock} stock/rangeselector/enabled/\n             *         Disable the range selector\n             *\n             * @type {boolean|undefined}\n             * @default {highstock} true\n             */\n            enabled: void 0,\n            /**\n             * The vertical alignment of the rangeselector box. Allowed properties\n             * are `top`, `middle`, `bottom`.\n             *\n             * @sample {highstock} stock/rangeselector/vertical-align-middle/\n             *         Middle\n             * @sample {highstock} stock/rangeselector/vertical-align-bottom/\n             *         Bottom\n             *\n             * @type  {Highcharts.VerticalAlignValue}\n             * @since 6.0.0\n             */\n            verticalAlign: 'top',\n            /**\n             * A collection of attributes for the buttons. The object takes SVG\n             * attributes like `fill`, `stroke`, `stroke-width`, as well as `style`,\n             * a collection of CSS properties for the text.\n             *\n             * The object can also be extended with states, so you can set\n             * presentational options for `hover`, `select` or `disabled` button\n             * states.\n             *\n             * CSS styles for the text label.\n             *\n             * In styled mode, the buttons are styled by the\n             * `.highcharts-range-selector-buttons .highcharts-button` rule with its\n             * different states.\n             *\n             * @sample {highstock} stock/rangeselector/styling/\n             *         Styling the buttons and inputs\n             *\n             * @type {Highcharts.SVGAttributes}\n             */\n            buttonTheme: {\n                /** @ignore */\n                width: 28,\n                /** @ignore */\n                height: 18,\n                /** @ignore */\n                padding: 2,\n                /** @ignore */\n                zIndex: 7 // #484, #852\n            },\n            /**\n             * When the rangeselector is floating, the plot area does not reserve\n             * space for it. This opens for positioning anywhere on the chart.\n             *\n             * @sample {highstock} stock/rangeselector/floating/\n             *         Placing the range selector between the plot area and the\n             *         navigator\n             *\n             * @since 6.0.0\n             */\n            floating: false,\n            /**\n             * The x offset of the range selector relative to its horizontal\n             * alignment within `chart.spacingLeft` and `chart.spacingRight`.\n             *\n             * @since 6.0.0\n             */\n            x: 0,\n            /**\n             * The y offset of the range selector relative to its horizontal\n             * alignment within `chart.spacingLeft` and `chart.spacingRight`.\n             *\n             * @since 6.0.0\n             */\n            y: 0,\n            /**\n             * Deprecated. The height of the range selector. Currently it is\n             * calculated dynamically.\n             *\n             * @deprecated\n             * @type  {number|undefined}\n             * @since 2.1.9\n             */\n            height: void 0,\n            /**\n             * The border color of the date input boxes.\n             *\n             * @sample {highstock} stock/rangeselector/styling/\n             *         Styling the buttons and inputs\n             *\n             * @type      {Highcharts.ColorString}\n             * @since     1.3.7\n             */\n            inputBoxBorderColor: 'none',\n            /**\n             * The pixel height of the date input boxes.\n             *\n             * @sample {highstock} stock/rangeselector/styling/\n             *         Styling the buttons and inputs\n             *\n             * @since     1.3.7\n             */\n            inputBoxHeight: 17,\n            /**\n             * The pixel width of the date input boxes. When `undefined`, the width\n             * is fitted to the rendered content.\n             *\n             * @sample {highstock} stock/rangeselector/styling/\n             *         Styling the buttons and inputs\n             *\n             * @type   {number|undefined}\n             * @since  1.3.7\n             */\n            inputBoxWidth: void 0,\n            /**\n             * The date format in the input boxes when not selected for editing.\n             * Defaults to `%e %b %Y`.\n             *\n             * This is used to determine which type of input to show,\n             * `datetime-local`, `date` or `time` and falling back to `text` when\n             * the browser does not support the input type or the format contains\n             * milliseconds.\n             *\n             * @sample {highstock} stock/rangeselector/input-type/\n             *         Input types\n             * @sample {highstock} stock/rangeselector/input-format/\n             *         Milliseconds in the range selector\n             *\n             */\n            inputDateFormat: '%e %b %Y',\n            /**\n             * A custom callback function to parse values entered in the input boxes\n             * and return a valid JavaScript time as milliseconds since 1970.\n             * The first argument passed is a value to parse,\n             * second is a boolean indicating use of the UTC time.\n             *\n             * This will only get called for inputs of type `text`. Since v8.2.3,\n             * the input type is dynamically determined based on the granularity\n             * of the `inputDateFormat` and the browser support.\n             *\n             * @sample {highstock} stock/rangeselector/input-format/\n             *         Milliseconds in the range selector\n             *\n             * @type      {Highcharts.RangeSelectorParseCallbackFunction}\n             * @since     1.3.3\n             */\n            inputDateParser: void 0,\n            /**\n             * The date format in the input boxes when they are selected for\n             * editing. This must be a format that is recognized by JavaScript\n             * Date.parse.\n             *\n             * This will only be used for inputs of type `text`. Since v8.2.3,\n             * the input type is dynamically determined based on the granularity\n             * of the `inputDateFormat` and the browser support.\n             *\n             * @sample {highstock} stock/rangeselector/input-format/\n             *         Milliseconds in the range selector\n             *\n             */\n            inputEditDateFormat: '%Y-%m-%d',\n            /**\n             * Enable or disable the date input boxes.\n             */\n            inputEnabled: true,\n            /**\n             * Positioning for the input boxes. Allowed properties are `align`,\n             *  `x` and `y`.\n             *\n             * @since 1.2.4\n             */\n            inputPosition: {\n                /**\n                 * The alignment of the input box. Allowed properties are `left`,\n                 * `center`, `right`.\n                 *\n                 * @sample {highstock} stock/rangeselector/input-button-position/\n                 *         Alignment\n                 *\n                 * @type  {Highcharts.AlignValue}\n                 * @since 6.0.0\n                 */\n                align: 'right',\n                /**\n                 * X offset of the input row.\n                 */\n                x: 0,\n                /**\n                 * Y offset of the input row.\n                 */\n                y: 0\n            },\n            /**\n             * The space in pixels between the labels and the date input boxes in\n             * the range selector.\n             *\n             * @since 9.0.0\n             */\n            inputSpacing: 5,\n            /**\n             * The index of the button to appear pre-selected. If the selected range\n             * exceeds the total data range and the 'all' option is available,\n             * the 'all' option, showing the full range, is automatically selected.\n             *\n             * @type      {number}\n             */\n            selected: void 0,\n            /**\n             * Positioning for the button row.\n             *\n             * @since 1.2.4\n             */\n            buttonPosition: {\n                /**\n                 * The alignment of the input box. Allowed properties are `left`,\n                 * `center`, `right`.\n                 *\n                 * @sample {highstock} stock/rangeselector/input-button-position/\n                 *         Alignment\n                 *\n                 * @type  {Highcharts.AlignValue}\n                 * @since 6.0.0\n                 */\n                align: 'left',\n                /**\n                 * X offset of the button row.\n                 */\n                x: 0,\n                /**\n                 * Y offset of the button row.\n                 */\n                y: 0\n            },\n            /**\n             * CSS for the HTML inputs in the range selector.\n             *\n             * In styled mode, the inputs are styled by the\n             * `.highcharts-range-input text` rule in SVG mode, and\n             * `input.highcharts-range-selector` when active.\n             *\n             * @sample {highstock} stock/rangeselector/styling/\n             *         Styling the buttons and inputs\n             *\n             * @type      {Highcharts.CSSObject}\n             * @apioption rangeSelector.inputStyle\n             */\n            inputStyle: {\n                /** @ignore */\n                color: \"#334eff\" /* Palette.highlightColor80 */,\n                /** @ignore */\n                cursor: 'pointer',\n                /** @ignore */\n                fontSize: '0.8em'\n            },\n            /**\n             * CSS styles for the labels - the Zoom, From and To texts.\n             *\n             * In styled mode, the labels are styled by the\n             * `.highcharts-range-label` class.\n             *\n             * @sample {highstock} stock/rangeselector/styling/\n             *         Styling the buttons and inputs\n             *\n             * @type {Highcharts.CSSObject}\n             */\n            labelStyle: {\n                /** @ignore */\n                color: \"#666666\" /* Palette.neutralColor60 */,\n                /** @ignore */\n                fontSize: '0.8em'\n            }\n        };\n        /* *\n         *\n         *  Default Export\n         *\n         * */\n        const RangeSelectorDefaults = {\n            lang,\n            rangeSelector\n        };\n\n        return RangeSelectorDefaults;\n    });\n    _registerModule(_modules, 'Stock/RangeSelector/RangeSelectorComposition.js', [_modules['Core/Defaults.js'], _modules['Core/Globals.js'], _modules['Stock/RangeSelector/RangeSelectorDefaults.js'], _modules['Core/Utilities.js']], function (D, H, RangeSelectorDefaults, U) {\n        /* *\n         *\n         *  (c) 2010-2024 Torstein Honsi\n         *\n         *  License: www.highcharts.com/license\n         *\n         *  !!!!!!! SOURCE GETS TRANSPILED BY TYPESCRIPT. EDIT TS FILE ONLY. !!!!!!!\n         *\n         * */\n        const { defaultOptions } = D;\n        const { composed } = H;\n        const { addEvent, defined, extend, find, isNumber, merge, pick, pushUnique } = U;\n        /* *\n         *\n         *  Constants\n         *\n         * */\n        const chartDestroyEvents = [];\n        /* *\n         *\n         *  Variables\n         *\n         * */\n        let RangeSelectorConstructor;\n        /* *\n         *\n         *  Functions\n         *\n         * */\n        /**\n         * Get the axis min value based on the range option and the current max. For\n         * stock charts this is extended via the {@link RangeSelector} so that if the\n         * selected range is a multiple of months or years, it is compensated for\n         * various month lengths.\n         *\n         * @private\n         * @function Highcharts.Axis#minFromRange\n         * @return {number|undefined}\n         *         The new minimum value.\n         */\n        function axisMinFromRange() {\n            const rangeOptions = this.range, type = rangeOptions.type, max = this.max, time = this.chart.time, \n            // Get the true range from a start date\n            getTrueRange = function (base, count) {\n                const timeName = type === 'year' ?\n                    'FullYear' : 'Month';\n                const date = new time.Date(base);\n                const basePeriod = time.get(timeName, date);\n                time.set(timeName, date, basePeriod + count);\n                if (basePeriod === time.get(timeName, date)) {\n                    time.set('Date', date, 0); // #6537\n                }\n                return date.getTime() - base;\n            };\n            let min, range;\n            if (isNumber(rangeOptions)) {\n                min = max - rangeOptions;\n                range = rangeOptions;\n            }\n            else if (rangeOptions) {\n                min = max + getTrueRange(max, -(rangeOptions.count || 1));\n                // Let the fixedRange reflect initial settings (#5930)\n                if (this.chart) {\n                    this.chart.setFixedRange(max - min);\n                }\n            }\n            const dataMin = pick(this.dataMin, Number.MIN_VALUE);\n            if (!isNumber(min)) {\n                min = dataMin;\n            }\n            if (min <= dataMin) {\n                min = dataMin;\n                if (typeof range === 'undefined') { // #4501\n                    range = getTrueRange(min, rangeOptions.count);\n                }\n                this.newMax = Math.min(min + range, pick(this.dataMax, Number.MAX_VALUE));\n            }\n            if (!isNumber(max)) {\n                min = void 0;\n            }\n            else if (!isNumber(rangeOptions) &&\n                rangeOptions &&\n                rangeOptions._offsetMin) {\n                min += rangeOptions._offsetMin;\n            }\n            return min;\n        }\n        /**\n         * @private\n         */\n        function compose(AxisClass, ChartClass, RangeSelectorClass) {\n            RangeSelectorConstructor = RangeSelectorClass;\n            if (pushUnique(composed, 'RangeSelector')) {\n                const chartProto = ChartClass.prototype;\n                AxisClass.prototype.minFromRange = axisMinFromRange;\n                addEvent(ChartClass, 'afterGetContainer', onChartAfterGetContainer);\n                addEvent(ChartClass, 'beforeRender', onChartBeforeRender);\n                addEvent(ChartClass, 'destroy', onChartDestroy);\n                addEvent(ChartClass, 'getMargins', onChartGetMargins);\n                addEvent(ChartClass, 'render', onChartRender);\n                addEvent(ChartClass, 'update', onChartUpdate);\n                chartProto.callbacks.push(onChartCallback);\n                extend(defaultOptions, { rangeSelector: RangeSelectorDefaults.rangeSelector });\n                extend(defaultOptions.lang, RangeSelectorDefaults.lang);\n            }\n        }\n        /**\n         * Initialize rangeselector for stock charts\n         * @private\n         */\n        function onChartAfterGetContainer() {\n            if (this.options.rangeSelector &&\n                this.options.rangeSelector.enabled) {\n                this.rangeSelector = new RangeSelectorConstructor(this);\n            }\n        }\n        /**\n         * @private\n         */\n        function onChartBeforeRender() {\n            const chart = this, axes = chart.axes, rangeSelector = chart.rangeSelector;\n            if (rangeSelector) {\n                if (isNumber(rangeSelector.deferredYTDClick)) {\n                    rangeSelector.clickButton(rangeSelector.deferredYTDClick);\n                    delete rangeSelector.deferredYTDClick;\n                }\n                axes.forEach((axis) => {\n                    axis.updateNames();\n                    axis.setScale();\n                });\n                chart.getAxisMargins();\n                rangeSelector.render();\n                const verticalAlign = rangeSelector.options.verticalAlign;\n                if (!rangeSelector.options.floating) {\n                    if (verticalAlign === 'bottom') {\n                        this.extraBottomMargin = true;\n                    }\n                    else if (verticalAlign !== 'middle') {\n                        this.extraTopMargin = true;\n                    }\n                }\n            }\n        }\n        /**\n         * @private\n         */\n        function onChartCallback(chart) {\n            let extremes, legend, alignTo, verticalAlign;\n            const rangeSelector = chart.rangeSelector, redraw = () => {\n                if (rangeSelector) {\n                    extremes = chart.xAxis[0].getExtremes();\n                    legend = chart.legend;\n                    verticalAlign = (rangeSelector &&\n                        rangeSelector.options.verticalAlign);\n                    if (isNumber(extremes.min)) {\n                        rangeSelector.render(extremes.min, extremes.max);\n                    }\n                    // Re-align the legend so that it's below the rangeselector\n                    if (legend.display &&\n                        verticalAlign === 'top' &&\n                        verticalAlign === legend.options.verticalAlign) {\n                        // Create a new alignment box for the legend.\n                        alignTo = merge(chart.spacingBox);\n                        if (legend.options.layout === 'vertical') {\n                            alignTo.y = chart.plotTop;\n                        }\n                        else {\n                            alignTo.y += rangeSelector.getHeight();\n                        }\n                        legend.group.placed = false; // Don't animate the alignment.\n                        legend.align(alignTo);\n                    }\n                }\n            };\n            if (rangeSelector) {\n                const events = find(chartDestroyEvents, (e) => e[0] === chart);\n                if (!events) {\n                    chartDestroyEvents.push([chart, [\n                            // redraw the scroller on setExtremes\n                            addEvent(chart.xAxis[0], 'afterSetExtremes', function (e) {\n                                if (rangeSelector) {\n                                    rangeSelector.render(e.min, e.max);\n                                }\n                            }),\n                            // redraw the scroller chart resize\n                            addEvent(chart, 'redraw', redraw)\n                        ]]);\n                }\n                // do it now\n                redraw();\n            }\n        }\n        /**\n         * Remove resize/afterSetExtremes at chart destroy.\n         * @private\n         */\n        function onChartDestroy() {\n            for (let i = 0, iEnd = chartDestroyEvents.length; i < iEnd; ++i) {\n                const events = chartDestroyEvents[i];\n                if (events[0] === this) {\n                    events[1].forEach((unbind) => unbind());\n                    chartDestroyEvents.splice(i, 1);\n                    return;\n                }\n            }\n        }\n        function onChartGetMargins() {\n            const rangeSelector = this.rangeSelector;\n            if (rangeSelector) {\n                const rangeSelectorHeight = rangeSelector.getHeight();\n                if (this.extraTopMargin) {\n                    this.plotTop += rangeSelectorHeight;\n                }\n                if (this.extraBottomMargin) {\n                    this.marginBottom += rangeSelectorHeight;\n                }\n            }\n        }\n        /**\n         * @private\n         */\n        function onChartRender() {\n            const chart = this, rangeSelector = chart.rangeSelector;\n            if (rangeSelector && !rangeSelector.options.floating) {\n                rangeSelector.render();\n                const verticalAlign = rangeSelector.options.verticalAlign;\n                if (verticalAlign === 'bottom') {\n                    this.extraBottomMargin = true;\n                }\n                else if (verticalAlign !== 'middle') {\n                    this.extraTopMargin = true;\n                }\n            }\n        }\n        /**\n         * @private\n         */\n        function onChartUpdate(e) {\n            const chart = this, options = e.options, optionsRangeSelector = options.rangeSelector, extraBottomMarginWas = this.extraBottomMargin, extraTopMarginWas = this.extraTopMargin;\n            let rangeSelector = chart.rangeSelector;\n            if (optionsRangeSelector &&\n                optionsRangeSelector.enabled &&\n                !defined(rangeSelector) &&\n                this.options.rangeSelector) {\n                this.options.rangeSelector.enabled = true;\n                this.rangeSelector = rangeSelector = new RangeSelectorConstructor(this);\n            }\n            this.extraBottomMargin = false;\n            this.extraTopMargin = false;\n            if (rangeSelector) {\n                onChartCallback(this);\n                const verticalAlign = (optionsRangeSelector &&\n                    optionsRangeSelector.verticalAlign) || (rangeSelector.options && rangeSelector.options.verticalAlign);\n                if (!rangeSelector.options.floating) {\n                    if (verticalAlign === 'bottom') {\n                        this.extraBottomMargin = true;\n                    }\n                    else if (verticalAlign !== 'middle') {\n                        this.extraTopMargin = true;\n                    }\n                }\n                if (this.extraBottomMargin !== extraBottomMarginWas ||\n                    this.extraTopMargin !== extraTopMarginWas) {\n                    this.isDirtyBox = true;\n                }\n            }\n        }\n        /* *\n         *\n         *  Default Export\n         *\n         * */\n        const RangeSelectorComposition = {\n            compose\n        };\n\n        return RangeSelectorComposition;\n    });\n    _registerModule(_modules, 'Stock/RangeSelector/RangeSelector.js', [_modules['Core/Axis/Axis.js'], _modules['Core/Defaults.js'], _modules['Core/Globals.js'], _modules['Stock/RangeSelector/RangeSelectorComposition.js'], _modules['Core/Renderer/SVG/SVGElement.js'], _modules['Core/Utilities.js']], function (Axis, D, H, RangeSelectorComposition, SVGElement, U) {\n        /* *\n         *\n         *  (c) 2010-2024 Torstein Honsi\n         *\n         *  License: www.highcharts.com/license\n         *\n         *  !!!!!!! SOURCE GETS TRANSPILED BY TYPESCRIPT. EDIT TS FILE ONLY. !!!!!!!\n         *\n         * */\n        const { defaultOptions } = D;\n        const { addEvent, createElement, css, defined, destroyObjectProperties, discardElement, extend, fireEvent, isNumber, merge, objectEach, pad, pick, pInt, splat } = U;\n        /* *\n         *\n         *  Functions\n         *\n         * */\n        /**\n         * Get the preferred input type based on a date format string.\n         *\n         * @private\n         * @function preferredInputType\n         */\n        function preferredInputType(format) {\n            const ms = format.indexOf('%L') !== -1;\n            if (ms) {\n                return 'text';\n            }\n            const date = ['a', 'A', 'd', 'e', 'w', 'b', 'B', 'm', 'o', 'y', 'Y']\n                .some((char) => format.indexOf('%' + char) !== -1);\n            const time = ['H', 'k', 'I', 'l', 'M', 'S']\n                .some((char) => format.indexOf('%' + char) !== -1);\n            if (date && time) {\n                return 'datetime-local';\n            }\n            if (date) {\n                return 'date';\n            }\n            if (time) {\n                return 'time';\n            }\n            return 'text';\n        }\n        /* *\n         *\n         *  Class\n         *\n         * */\n        /**\n         * The range selector.\n         *\n         * @private\n         * @class\n         * @name Highcharts.RangeSelector\n         * @param {Highcharts.Chart} chart\n         */\n        class RangeSelector {\n            /* *\n             *\n             *  Static Functions\n             *\n             * */\n            /**\n             * @private\n             */\n            static compose(AxisClass, ChartClass) {\n                RangeSelectorComposition.compose(AxisClass, ChartClass, RangeSelector);\n            }\n            /* *\n             *\n             *  Constructor\n             *\n             * */\n            constructor(chart) {\n                this.buttonOptions = RangeSelector.prototype.defaultButtons;\n                this.initialButtonGroupWidth = 0;\n                this.chart = chart;\n                this.init(chart);\n            }\n            /* *\n             *\n             *  Functions\n             *\n             * */\n            /**\n             * The method to run when one of the buttons in the range selectors is\n             * clicked\n             *\n             * @private\n             * @function Highcharts.RangeSelector#clickButton\n             * @param {number} i\n             *        The index of the button\n             * @param {boolean} [redraw]\n             */\n            clickButton(i, redraw) {\n                const rangeSelector = this, chart = rangeSelector.chart, rangeOptions = rangeSelector.buttonOptions[i], baseAxis = chart.xAxis[0], unionExtremes = (chart.scroller && chart.scroller.getUnionExtremes()) || baseAxis || {}, type = rangeOptions.type, dataGrouping = rangeOptions.dataGrouping;\n                let dataMin = unionExtremes.dataMin, dataMax = unionExtremes.dataMax, newMin, newMax = baseAxis && Math.round(Math.min(baseAxis.max, pick(dataMax, baseAxis.max))), // #1568\n                baseXAxisOptions, range = rangeOptions._range, rangeMin, minSetting, rangeSetting, ctx, ytdExtremes, addOffsetMin = true;\n                // chart has no data, base series is removed\n                if (dataMin === null || dataMax === null) {\n                    return;\n                }\n                rangeSelector.setSelected(i);\n                // Apply dataGrouping associated to button\n                if (dataGrouping) {\n                    this.forcedDataGrouping = true;\n                    Axis.prototype.setDataGrouping.call(baseAxis || { chart: this.chart }, dataGrouping, false);\n                    this.frozenStates = rangeOptions.preserveDataGrouping;\n                }\n                // Apply range\n                if (type === 'month' || type === 'year') {\n                    if (!baseAxis) {\n                        // This is set to the user options and picked up later when the\n                        // axis is instantiated so that we know the min and max.\n                        range = rangeOptions;\n                    }\n                    else {\n                        ctx = {\n                            range: rangeOptions,\n                            max: newMax,\n                            chart: chart,\n                            dataMin: dataMin,\n                            dataMax: dataMax\n                        };\n                        newMin = baseAxis.minFromRange.call(ctx);\n                        if (isNumber(ctx.newMax)) {\n                            newMax = ctx.newMax;\n                        }\n                        // #15799: offsetMin is added in minFromRange so that it works\n                        // with pre-selected buttons as well\n                        addOffsetMin = false;\n                    }\n                    // Fixed times like minutes, hours, days\n                }\n                else if (range) {\n                    newMin = Math.max(newMax - range, dataMin);\n                    newMax = Math.min(newMin + range, dataMax);\n                    addOffsetMin = false;\n                }\n                else if (type === 'ytd') {\n                    // On user clicks on the buttons, or a delayed action running from\n                    // the beforeRender event (below), the baseAxis is defined.\n                    if (baseAxis) {\n                        // When \"ytd\" is the pre-selected button for the initial view,\n                        // its calculation is delayed and rerun in the beforeRender\n                        // event (below). When the series are initialized, but before\n                        // the chart is rendered, we have access to the xData array\n                        // (#942).\n                        if (typeof dataMax === 'undefined' ||\n                            typeof dataMin === 'undefined') {\n                            dataMin = Number.MAX_VALUE;\n                            dataMax = Number.MIN_VALUE;\n                            chart.series.forEach((series) => {\n                                // reassign it to the last item\n                                const xData = series.xData;\n                                if (xData) {\n                                    dataMin = Math.min(xData[0], dataMin);\n                                    dataMax = Math.max(xData[xData.length - 1], dataMax);\n                                }\n                            });\n                            redraw = false;\n                        }\n                        ytdExtremes = rangeSelector.getYTDExtremes(dataMax, dataMin, chart.time.useUTC);\n                        newMin = rangeMin = ytdExtremes.min;\n                        newMax = ytdExtremes.max;\n                        // \"ytd\" is pre-selected. We don't yet have access to processed\n                        // point and extremes data (things like pointStart and pointInterval\n                        // are missing), so we delay the process (#942)\n                    }\n                    else {\n                        rangeSelector.deferredYTDClick = i;\n                        return;\n                    }\n                }\n                else if (type === 'all' && baseAxis) {\n                    // If the navigator exist and the axis range is declared reset that\n                    // range and from now on only use the range set by a user, #14742.\n                    if (chart.navigator && chart.navigator.baseSeries[0]) {\n                        chart.navigator.baseSeries[0].xAxis.options.range = void 0;\n                    }\n                    newMin = dataMin;\n                    newMax = dataMax;\n                }\n                if (addOffsetMin && rangeOptions._offsetMin && defined(newMin)) {\n                    newMin += rangeOptions._offsetMin;\n                }\n                if (rangeOptions._offsetMax && defined(newMax)) {\n                    newMax += rangeOptions._offsetMax;\n                }\n                if (this.dropdown) {\n                    this.dropdown.selectedIndex = i + 1;\n                }\n                // Update the chart\n                if (!baseAxis) {\n                    // Axis not yet instantiated. Temporarily set min and range\n                    // options and remove them on chart load (#4317).\n                    baseXAxisOptions = splat(chart.options.xAxis)[0];\n                    rangeSetting = baseXAxisOptions.range;\n                    baseXAxisOptions.range = range;\n                    minSetting = baseXAxisOptions.min;\n                    baseXAxisOptions.min = rangeMin;\n                    addEvent(chart, 'load', function resetMinAndRange() {\n                        chart.setFixedRange(rangeOptions._range);\n                        baseXAxisOptions.range = rangeSetting;\n                        baseXAxisOptions.min = minSetting;\n                    });\n                }\n                else {\n                    // Existing axis object. Set extremes after render time.\n                    baseAxis.setExtremes(newMin, newMax, pick(redraw, true), void 0, // auto animation\n                    {\n                        trigger: 'rangeSelectorButton',\n                        rangeSelectorButton: rangeOptions\n                    });\n                    chart.setFixedRange(rangeOptions._range);\n                }\n                fireEvent(this, 'afterBtnClick');\n            }\n            /**\n             * Set the selected option. This method only sets the internal flag, it\n             * doesn't update the buttons or the actual zoomed range.\n             *\n             * @private\n             * @function Highcharts.RangeSelector#setSelected\n             * @param {number} [selected]\n             */\n            setSelected(selected) {\n                this.selected = this.options.selected = selected;\n            }\n            /**\n             * Initialize the range selector\n             *\n             * @private\n             * @function Highcharts.RangeSelector#init\n             * @param {Highcharts.Chart} chart\n             */\n            init(chart) {\n                const rangeSelector = this, options = chart.options.rangeSelector, buttonOptions = (options.buttons || rangeSelector.defaultButtons.slice()), selectedOption = options.selected, blurInputs = function () {\n                    const minInput = rangeSelector.minInput, maxInput = rangeSelector.maxInput;\n                    // #3274 in some case blur is not defined\n                    if (minInput && !!minInput.blur) {\n                        fireEvent(minInput, 'blur');\n                    }\n                    if (maxInput && !!maxInput.blur) {\n                        fireEvent(maxInput, 'blur');\n                    }\n                };\n                rangeSelector.chart = chart;\n                rangeSelector.options = options;\n                rangeSelector.buttons = [];\n                rangeSelector.buttonOptions = buttonOptions;\n                this.eventsToUnbind = [];\n                this.eventsToUnbind.push(addEvent(chart.container, 'mousedown', blurInputs));\n                this.eventsToUnbind.push(addEvent(chart, 'resize', blurInputs));\n                // Extend the buttonOptions with actual range\n                buttonOptions.forEach(rangeSelector.computeButtonRange);\n                // Zoomed range based on a pre-selected button index\n                if (typeof selectedOption !== 'undefined' &&\n                    buttonOptions[selectedOption]) {\n                    this.clickButton(selectedOption, false);\n                }\n                this.eventsToUnbind.push(addEvent(chart, 'load', function () {\n                    // If a data grouping is applied to the current button, release it\n                    // when extremes change\n                    if (chart.xAxis && chart.xAxis[0]) {\n                        addEvent(chart.xAxis[0], 'setExtremes', function (e) {\n                            if (isNumber(this.max) &&\n                                isNumber(this.min) &&\n                                this.max - this.min !== chart.fixedRange &&\n                                e.trigger !== 'rangeSelectorButton' &&\n                                e.trigger !== 'updatedData' &&\n                                rangeSelector.forcedDataGrouping &&\n                                !rangeSelector.frozenStates) {\n                                this.setDataGrouping(false, false);\n                            }\n                        });\n                    }\n                }));\n            }\n            /**\n             * Dynamically update the range selector buttons after a new range has been\n             * set\n             *\n             * @private\n             * @function Highcharts.RangeSelector#updateButtonStates\n             */\n            updateButtonStates() {\n                const rangeSelector = this, chart = this.chart, dropdown = this.dropdown, baseAxis = chart.xAxis[0], actualRange = Math.round(baseAxis.max - baseAxis.min), hasNoData = !baseAxis.hasVisibleSeries, day = 24 * 36e5, // A single day in milliseconds\n                unionExtremes = (chart.scroller &&\n                    chart.scroller.getUnionExtremes()) || baseAxis, dataMin = unionExtremes.dataMin, dataMax = unionExtremes.dataMax, ytdExtremes = rangeSelector.getYTDExtremes(dataMax, dataMin, chart.time.useUTC), ytdMin = ytdExtremes.min, ytdMax = ytdExtremes.max, selected = rangeSelector.selected, allButtonsEnabled = rangeSelector.options.allButtonsEnabled, buttons = rangeSelector.buttons;\n                let selectedExists = isNumber(selected), isSelectedTooGreat = false;\n                rangeSelector.buttonOptions.forEach((rangeOptions, i) => {\n                    const range = rangeOptions._range, type = rangeOptions.type, count = rangeOptions.count || 1, button = buttons[i], offsetRange = rangeOptions._offsetMax -\n                        rangeOptions._offsetMin, isSelected = i === selected, \n                    // Disable buttons where the range exceeds what is allowed in\n                    // the current view\n                    isTooGreatRange = range >\n                        dataMax - dataMin, \n                    // Disable buttons where the range is smaller than the minimum\n                    // range\n                    isTooSmallRange = range < baseAxis.minRange;\n                    let state = 0, \n                    // Do not select the YTD button if not explicitly told so\n                    isYTDButNotSelected = false, \n                    // Disable the All button if we're already showing all\n                    isAllButAlreadyShowingAll = false, isSameRange = range === actualRange;\n                    if (isSelected && isTooGreatRange) {\n                        isSelectedTooGreat = true;\n                    }\n                    if (baseAxis.isOrdinal &&\n                        baseAxis.ordinal?.positions &&\n                        range &&\n                        actualRange < range) {\n                        // Handle ordinal ranges\n                        const positions = baseAxis.ordinal.positions;\n                        if (positions[positions.length - 1] - positions[0] > range) {\n                            isSameRange = true;\n                        }\n                    }\n                    else if (\n                    // Months and years have variable range so we check the extremes\n                    (type === 'month' || type === 'year') &&\n                        (actualRange + 36e5 >=\n                            { month: 28, year: 365 }[type] * day * count - offsetRange) &&\n                        (actualRange - 36e5 <=\n                            { month: 31, year: 366 }[type] * day * count + offsetRange)) {\n                        isSameRange = true;\n                    }\n                    else if (type === 'ytd') {\n                        isSameRange = (ytdMax - ytdMin + offsetRange) === actualRange;\n                        isYTDButNotSelected = !isSelected;\n                    }\n                    else if (type === 'all') {\n                        isSameRange = (baseAxis.max - baseAxis.min >=\n                            dataMax - dataMin);\n                        isAllButAlreadyShowingAll = (!isSelected &&\n                            selectedExists &&\n                            isSameRange);\n                    }\n                    // The new zoom area happens to match the range for a button - mark\n                    // it selected. This happens when scrolling across an ordinal gap.\n                    // It can be seen in the intraday demos when selecting 1h and scroll\n                    // across the night gap.\n                    const disable = (!allButtonsEnabled &&\n                        !(isSelectedTooGreat && type === 'all') &&\n                        (isTooGreatRange ||\n                            isTooSmallRange ||\n                            isAllButAlreadyShowingAll ||\n                            hasNoData));\n                    const select = ((isSelectedTooGreat && type === 'all') ||\n                        (isSelected && isSameRange) ||\n                        (isSameRange && !selectedExists && !isYTDButNotSelected) ||\n                        (isSelected && rangeSelector.frozenStates));\n                    if (disable) {\n                        state = 3;\n                    }\n                    else if (select) {\n                        selectedExists = true; // Only one button can be selected\n                        state = 2;\n                    }\n                    // If state has changed, update the button\n                    if (button.state !== state) {\n                        button.setState(state);\n                        if (dropdown) {\n                            dropdown.options[i + 1].disabled = disable;\n                            if (state === 2) {\n                                dropdown.selectedIndex = i + 1;\n                            }\n                        }\n                        // Reset (#9209)\n                        if (state === 0 && selected === i) {\n                            rangeSelector.setSelected();\n                        }\n                        else if ((state === 2 && !defined(selected)) ||\n                            isSelectedTooGreat) {\n                            rangeSelector.setSelected(i);\n                        }\n                    }\n                });\n            }\n            /**\n             * Compute and cache the range for an individual button\n             *\n             * @private\n             * @function Highcharts.RangeSelector#computeButtonRange\n             * @param {Highcharts.RangeSelectorButtonsOptions} rangeOptions\n             */\n            computeButtonRange(rangeOptions) {\n                const type = rangeOptions.type, count = rangeOptions.count || 1, \n                // these time intervals have a fixed number of milliseconds, as\n                // opposed to month, ytd and year\n                fixedTimes = {\n                    millisecond: 1,\n                    second: 1000,\n                    minute: 60 * 1000,\n                    hour: 3600 * 1000,\n                    day: 24 * 3600 * 1000,\n                    week: 7 * 24 * 3600 * 1000\n                };\n                // Store the range on the button object\n                if (fixedTimes[type]) {\n                    rangeOptions._range = fixedTimes[type] * count;\n                }\n                else if (type === 'month' || type === 'year') {\n                    rangeOptions._range = {\n                        month: 30,\n                        year: 365\n                    }[type] * 24 * 36e5 * count;\n                }\n                rangeOptions._offsetMin = pick(rangeOptions.offsetMin, 0);\n                rangeOptions._offsetMax = pick(rangeOptions.offsetMax, 0);\n                rangeOptions._range +=\n                    rangeOptions._offsetMax - rangeOptions._offsetMin;\n            }\n            /**\n             * Get the unix timestamp of a HTML input for the dates\n             *\n             * @private\n             * @function Highcharts.RangeSelector#getInputValue\n             */\n            getInputValue(name) {\n                const input = name === 'min' ? this.minInput : this.maxInput;\n                const options = this.chart.options\n                    .rangeSelector;\n                const time = this.chart.time;\n                if (input) {\n                    return ((input.type === 'text' && options.inputDateParser) ||\n                        this.defaultInputDateParser)(input.value, time.useUTC, time);\n                }\n                return 0;\n            }\n            /**\n             * Set the internal and displayed value of a HTML input for the dates\n             *\n             * @private\n             * @function Highcharts.RangeSelector#setInputValue\n             */\n            setInputValue(name, inputTime) {\n                const options = this.options, time = this.chart.time, input = name === 'min' ? this.minInput : this.maxInput, dateBox = name === 'min' ? this.minDateBox : this.maxDateBox;\n                if (input) {\n                    const hcTimeAttr = input.getAttribute('data-hc-time');\n                    let updatedTime = defined(hcTimeAttr) ? Number(hcTimeAttr) : void 0;\n                    if (defined(inputTime)) {\n                        const previousTime = updatedTime;\n                        if (defined(previousTime)) {\n                            input.setAttribute('data-hc-time-previous', previousTime);\n                        }\n                        input.setAttribute('data-hc-time', inputTime);\n                        updatedTime = inputTime;\n                    }\n                    input.value = time.dateFormat((this.inputTypeFormats[input.type] ||\n                        options.inputEditDateFormat), updatedTime);\n                    if (dateBox) {\n                        dateBox.attr({\n                            text: time.dateFormat(options.inputDateFormat, updatedTime)\n                        });\n                    }\n                }\n            }\n            /**\n             * Set the min and max value of a HTML input for the dates\n             *\n             * @private\n             * @function Highcharts.RangeSelector#setInputExtremes\n             */\n            setInputExtremes(name, min, max) {\n                const input = name === 'min' ? this.minInput : this.maxInput;\n                if (input) {\n                    const format = this.inputTypeFormats[input.type];\n                    const time = this.chart.time;\n                    if (format) {\n                        const newMin = time.dateFormat(format, min);\n                        if (input.min !== newMin) {\n                            input.min = newMin;\n                        }\n                        const newMax = time.dateFormat(format, max);\n                        if (input.max !== newMax) {\n                            input.max = newMax;\n                        }\n                    }\n                }\n            }\n            /**\n             * @private\n             * @function Highcharts.RangeSelector#showInput\n             * @param {string} name\n             */\n            showInput(name) {\n                const dateBox = name === 'min' ? this.minDateBox : this.maxDateBox, input = name === 'min' ? this.minInput : this.maxInput;\n                if (input && dateBox && this.inputGroup) {\n                    const isTextInput = input.type === 'text', { translateX = 0, translateY = 0 } = this.inputGroup, { x = 0, width = 0, height = 0 } = dateBox, { inputBoxWidth } = this.options;\n                    css(input, {\n                        width: isTextInput ?\n                            ((width + (inputBoxWidth ? -2 : 20)) + 'px') :\n                            'auto',\n                        height: (height - 2) + 'px',\n                        border: '2px solid silver'\n                    });\n                    if (isTextInput && inputBoxWidth) {\n                        css(input, {\n                            left: (translateX + x) + 'px',\n                            top: translateY + 'px'\n                        });\n                        // Inputs of types date, time or datetime-local should be centered\n                        // on top of the dateBox\n                    }\n                    else {\n                        css(input, {\n                            left: Math.min(Math.round(x +\n                                translateX -\n                                (input.offsetWidth - width) / 2), this.chart.chartWidth - input.offsetWidth) + 'px',\n                            top: (translateY - (input.offsetHeight - height) / 2) + 'px'\n                        });\n                    }\n                }\n            }\n            /**\n             * @private\n             * @function Highcharts.RangeSelector#hideInput\n             * @param {string} name\n             */\n            hideInput(name) {\n                const input = name === 'min' ? this.minInput : this.maxInput;\n                if (input) {\n                    css(input, {\n                        top: '-9999em',\n                        border: 0,\n                        width: '1px',\n                        height: '1px'\n                    });\n                }\n            }\n            /**\n             * @private\n             * @function Highcharts.RangeSelector#defaultInputDateParser\n             */\n            defaultInputDateParser(inputDate, useUTC, time) {\n                const hasTimezone = (str) => str.length > 6 &&\n                    (str.lastIndexOf('-') === str.length - 6 ||\n                        str.lastIndexOf('+') === str.length - 6);\n                let input = inputDate.split('/').join('-').split(' ').join('T');\n                if (input.indexOf('T') === -1) {\n                    input += 'T00:00';\n                }\n                if (useUTC) {\n                    input += 'Z';\n                }\n                else if (H.isSafari && !hasTimezone(input)) {\n                    const offset = new Date(input).getTimezoneOffset() / 60;\n                    input += offset <= 0 ? `+${pad(-offset)}:00` : `-${pad(offset)}:00`;\n                }\n                let date = Date.parse(input);\n                // If the value isn't parsed directly to a value by the\n                // browser's Date.parse method, try\n                // parsing it a different way\n                if (!isNumber(date)) {\n                    const parts = inputDate.split('-');\n                    date = Date.UTC(pInt(parts[0]), pInt(parts[1]) - 1, pInt(parts[2]));\n                }\n                if (time && useUTC && isNumber(date)) {\n                    date += time.getTimezoneOffset(date);\n                }\n                return date;\n            }\n            /**\n             * Draw either the 'from' or the 'to' HTML input box of the range selector\n             *\n             * @private\n             * @function Highcharts.RangeSelector#drawInput\n             */\n            drawInput(name) {\n                const { chart, div, inputGroup } = this;\n                const rangeSelector = this, chartStyle = chart.renderer.style || {}, renderer = chart.renderer, options = chart.options.rangeSelector, lang = defaultOptions.lang, isMin = name === 'min';\n                /**\n                 * @private\n                 */\n                function updateExtremes() {\n                    const { maxInput, minInput } = rangeSelector, chartAxis = chart.xAxis[0], unionExtremes = (chart.scroller && chart.scroller.getUnionExtremes()) || chartAxis, dataMin = unionExtremes.dataMin, dataMax = unionExtremes.dataMax;\n                    let value = rangeSelector.getInputValue(name);\n                    if (value !== Number(input.getAttribute('data-hc-time-previous')) &&\n                        isNumber(value)) {\n                        input.setAttribute('data-hc-time-previous', value);\n                        // Validate the extremes. If it goes beyond the data min or\n                        // max, use the actual data extreme (#2438).\n                        if (isMin && maxInput && isNumber(dataMin)) {\n                            if (value > Number(maxInput.getAttribute('data-hc-time'))) {\n                                value = void 0;\n                            }\n                            else if (value < dataMin) {\n                                value = dataMin;\n                            }\n                        }\n                        else if (minInput && isNumber(dataMax)) {\n                            if (value < Number(minInput.getAttribute('data-hc-time'))) {\n                                value = void 0;\n                            }\n                            else if (value > dataMax) {\n                                value = dataMax;\n                            }\n                        }\n                        // Set the extremes\n                        if (typeof value !== 'undefined') { // @todo typeof undefined\n                            chartAxis.setExtremes(isMin ? value : chartAxis.min, isMin ? chartAxis.max : value, void 0, void 0, { trigger: 'rangeSelectorInput' });\n                        }\n                    }\n                }\n                // Create the text label\n                const text = lang[isMin ? 'rangeSelectorFrom' : 'rangeSelectorTo'] || '';\n                const label = renderer\n                    .label(text, 0)\n                    .addClass('highcharts-range-label')\n                    .attr({\n                    padding: text ? 2 : 0,\n                    height: text ? options.inputBoxHeight : 0\n                })\n                    .add(inputGroup);\n                // Create an SVG label that shows updated date ranges and records click\n                // events that bring in the HTML input.\n                const dateBox = renderer\n                    .label('', 0)\n                    .addClass('highcharts-range-input')\n                    .attr({\n                    padding: 2,\n                    width: options.inputBoxWidth,\n                    height: options.inputBoxHeight,\n                    'text-align': 'center'\n                })\n                    .on('click', function () {\n                    // If it is already focused, the onfocus event doesn't fire\n                    // (#3713)\n                    rangeSelector.showInput(name);\n                    rangeSelector[name + 'Input'].focus();\n                });\n                if (!chart.styledMode) {\n                    dateBox.attr({\n                        stroke: options.inputBoxBorderColor,\n                        'stroke-width': 1\n                    });\n                }\n                dateBox.add(inputGroup);\n                // Create the HTML input element. This is rendered as 1x1 pixel then set\n                // to the right size when focused.\n                const input = createElement('input', {\n                    name: name,\n                    className: 'highcharts-range-selector'\n                }, void 0, div);\n                // #14788: Setting input.type to an unsupported type throws in IE, so\n                // we need to use setAttribute instead\n                input.setAttribute('type', preferredInputType(options.inputDateFormat || '%e %b %Y'));\n                if (!chart.styledMode) {\n                    // Styles\n                    label.css(merge(chartStyle, options.labelStyle));\n                    dateBox.css(merge({\n                        color: \"#333333\" /* Palette.neutralColor80 */\n                    }, chartStyle, options.inputStyle));\n                    css(input, extend({\n                        position: 'absolute',\n                        border: 0,\n                        boxShadow: '0 0 15px rgba(0,0,0,0.3)',\n                        width: '1px',\n                        height: '1px',\n                        padding: 0,\n                        textAlign: 'center',\n                        fontSize: chartStyle.fontSize,\n                        fontFamily: chartStyle.fontFamily,\n                        top: '-9999em' // #4798\n                    }, options.inputStyle));\n                }\n                // Blow up the input box\n                input.onfocus = () => {\n                    rangeSelector.showInput(name);\n                };\n                // Hide away the input box\n                input.onblur = () => {\n                    // update extremes only when inputs are active\n                    if (input === H.doc.activeElement) { // Only when focused\n                        // Update also when no `change` event is triggered, like when\n                        // clicking inside the SVG (#4710)\n                        updateExtremes();\n                    }\n                    // #10404 - move hide and blur outside focus\n                    rangeSelector.hideInput(name);\n                    rangeSelector.setInputValue(name);\n                    input.blur(); // #4606\n                };\n                let keyDown = false;\n                // handle changes in the input boxes\n                input.onchange = () => {\n                    // Update extremes and blur input when clicking date input calendar\n                    if (!keyDown) {\n                        updateExtremes();\n                        rangeSelector.hideInput(name);\n                        input.blur();\n                    }\n                };\n                input.onkeypress = (event) => {\n                    // IE does not fire onchange on enter\n                    if (event.keyCode === 13) {\n                        updateExtremes();\n                    }\n                };\n                input.onkeydown = (event) => {\n                    keyDown = true;\n                    // Arrow keys\n                    if (event.keyCode === 38 || event.keyCode === 40) {\n                        updateExtremes();\n                    }\n                };\n                input.onkeyup = () => {\n                    keyDown = false;\n                };\n                return { dateBox, input, label };\n            }\n            /**\n             * Get the position of the range selector buttons and inputs. This can be\n             * overridden from outside for custom positioning.\n             *\n             * @private\n             * @function Highcharts.RangeSelector#getPosition\n             */\n            getPosition() {\n                const chart = this.chart, options = chart.options.rangeSelector, top = options.verticalAlign === 'top' ?\n                    chart.plotTop - chart.axisOffset[0] :\n                    0; // set offset only for verticalAlign top\n                return {\n                    buttonTop: top + options.buttonPosition.y,\n                    inputTop: top + options.inputPosition.y - 10\n                };\n            }\n            /**\n             * Get the extremes of YTD. Will choose dataMax if its value is lower than\n             * the current timestamp. Will choose dataMin if its value is higher than\n             * the timestamp for the start of current year.\n             *\n             * @private\n             * @function Highcharts.RangeSelector#getYTDExtremes\n             * @return {*}\n             * Returns min and max for the YTD\n             */\n            getYTDExtremes(dataMax, dataMin, useUTC) {\n                const time = this.chart.time, now = new time.Date(dataMax), year = time.get('FullYear', now), startOfYear = useUTC ?\n                    time.Date.UTC(year, 0, 1) : // eslint-disable-line new-cap\n                    +new time.Date(year, 0, 1), min = Math.max(dataMin, startOfYear), ts = now.getTime();\n                return {\n                    max: Math.min(dataMax || ts, ts),\n                    min\n                };\n            }\n            /**\n             * Render the range selector including the buttons and the inputs. The first\n             * time render is called, the elements are created and positioned. On\n             * subsequent calls, they are moved and updated.\n             *\n             * @private\n             * @function Highcharts.RangeSelector#render\n             * @param {number} [min]\n             *        X axis minimum\n             * @param {number} [max]\n             *        X axis maximum\n             */\n            render(min, max) {\n                const chart = this.chart, renderer = chart.renderer, container = chart.container, chartOptions = chart.options, options = chartOptions.rangeSelector, \n                // Place inputs above the container\n                inputsZIndex = pick(chartOptions.chart.style &&\n                    chartOptions.chart.style.zIndex, 0) + 1, inputEnabled = options.inputEnabled, rendered = this.rendered;\n                if (options.enabled === false) {\n                    return;\n                }\n                // create the elements\n                if (!rendered) {\n                    this.group = renderer.g('range-selector-group')\n                        .attr({\n                        zIndex: 7\n                    })\n                        .add();\n                    this.div = createElement('div', void 0, {\n                        position: 'relative',\n                        height: 0,\n                        zIndex: inputsZIndex\n                    });\n                    if (this.buttonOptions.length) {\n                        this.renderButtons();\n                    }\n                    // First create a wrapper outside the container in order to make\n                    // the inputs work and make export correct\n                    if (container.parentNode) {\n                        container.parentNode.insertBefore(this.div, container);\n                    }\n                    if (inputEnabled) {\n                        // Create the group to keep the inputs\n                        this.inputGroup = renderer.g('input-group').add(this.group);\n                        const minElems = this.drawInput('min');\n                        this.minDateBox = minElems.dateBox;\n                        this.minLabel = minElems.label;\n                        this.minInput = minElems.input;\n                        const maxElems = this.drawInput('max');\n                        this.maxDateBox = maxElems.dateBox;\n                        this.maxLabel = maxElems.label;\n                        this.maxInput = maxElems.input;\n                    }\n                }\n                if (inputEnabled) {\n                    // Set or reset the input values\n                    this.setInputValue('min', min);\n                    this.setInputValue('max', max);\n                    const unionExtremes = (chart.scroller && chart.scroller.getUnionExtremes()) || chart.xAxis[0] || {};\n                    if (defined(unionExtremes.dataMin) &&\n                        defined(unionExtremes.dataMax)) {\n                        const minRange = chart.xAxis[0].minRange || 0;\n                        this.setInputExtremes('min', unionExtremes.dataMin, Math.min(unionExtremes.dataMax, this.getInputValue('max')) - minRange);\n                        this.setInputExtremes('max', Math.max(unionExtremes.dataMin, this.getInputValue('min')) + minRange, unionExtremes.dataMax);\n                    }\n                    // Reflow\n                    if (this.inputGroup) {\n                        let x = 0;\n                        [\n                            this.minLabel,\n                            this.minDateBox,\n                            this.maxLabel,\n                            this.maxDateBox\n                        ].forEach((label) => {\n                            if (label) {\n                                const { width } = label.getBBox();\n                                if (width) {\n                                    label.attr({ x });\n                                    x += width + options.inputSpacing;\n                                }\n                            }\n                        });\n                    }\n                }\n                this.alignElements();\n                this.rendered = true;\n            }\n            /**\n             * Render the range buttons. This only runs the first time, later the\n             * positioning is laid out in alignElements.\n             *\n             * @private\n             * @function Highcharts.RangeSelector#renderButtons\n             */\n            renderButtons() {\n                const { buttons, chart, options } = this;\n                const lang = defaultOptions.lang;\n                const renderer = chart.renderer;\n                const buttonTheme = merge(options.buttonTheme);\n                const states = buttonTheme && buttonTheme.states;\n                // Prevent the button from resetting the width when the button state\n                // changes since we need more control over the width when collapsing\n                // the buttons\n                const width = buttonTheme.width || 28;\n                delete buttonTheme.width;\n                delete buttonTheme.states;\n                this.buttonGroup = renderer.g('range-selector-buttons').add(this.group);\n                const dropdown = this.dropdown = createElement('select', void 0, {\n                    position: 'absolute',\n                    width: '1px',\n                    height: '1px',\n                    padding: 0,\n                    border: 0,\n                    top: '-9999em',\n                    cursor: 'pointer',\n                    opacity: 0.0001\n                }, this.div);\n                // Prevent page zoom on iPhone\n                addEvent(dropdown, 'touchstart', () => {\n                    dropdown.style.fontSize = '16px';\n                });\n                // Forward events from select to button\n                [\n                    [H.isMS ? 'mouseover' : 'mouseenter'],\n                    [H.isMS ? 'mouseout' : 'mouseleave'],\n                    ['change', 'click']\n                ].forEach(([from, to]) => {\n                    addEvent(dropdown, from, () => {\n                        const button = buttons[this.currentButtonIndex()];\n                        if (button) {\n                            fireEvent(button.element, to || from);\n                        }\n                    });\n                });\n                this.zoomText = renderer\n                    .label((lang && lang.rangeSelectorZoom) || '', 0)\n                    .attr({\n                    padding: options.buttonTheme.padding,\n                    height: options.buttonTheme.height,\n                    paddingLeft: 0,\n                    paddingRight: 0\n                })\n                    .add(this.buttonGroup);\n                if (!this.chart.styledMode) {\n                    this.zoomText.css(options.labelStyle);\n                    buttonTheme['stroke-width'] = pick(buttonTheme['stroke-width'], 0);\n                }\n                createElement('option', {\n                    textContent: this.zoomText.textStr,\n                    disabled: true\n                }, void 0, dropdown);\n                this.buttonOptions.forEach((rangeOptions, i) => {\n                    createElement('option', {\n                        textContent: rangeOptions.title || rangeOptions.text\n                    }, void 0, dropdown);\n                    buttons[i] = renderer\n                        .button(rangeOptions.text, 0, 0, (e) => {\n                        // extract events from button object and call\n                        const buttonEvents = (rangeOptions.events && rangeOptions.events.click);\n                        let callDefaultEvent;\n                        if (buttonEvents) {\n                            callDefaultEvent =\n                                buttonEvents.call(rangeOptions, e);\n                        }\n                        if (callDefaultEvent !== false) {\n                            this.clickButton(i);\n                        }\n                        this.isActive = true;\n                    }, buttonTheme, states && states.hover, states && states.select, states && states.disabled)\n                        .attr({\n                        'text-align': 'center',\n                        width\n                    })\n                        .add(this.buttonGroup);\n                    if (rangeOptions.title) {\n                        buttons[i].attr('title', rangeOptions.title);\n                    }\n                });\n            }\n            /**\n             * Align the elements horizontally and vertically.\n             *\n             * @private\n             * @function Highcharts.RangeSelector#alignElements\n             */\n            alignElements() {\n                const { buttonGroup, buttons, chart, group, inputGroup, options, zoomText } = this;\n                const chartOptions = chart.options;\n                const navButtonOptions = (chartOptions.exporting &&\n                    chartOptions.exporting.enabled !== false &&\n                    chartOptions.navigation &&\n                    chartOptions.navigation.buttonOptions);\n                const { buttonPosition, inputPosition, verticalAlign } = options;\n                // Get the X offset required to avoid overlapping with the exporting\n                // button. This is used both by the buttonGroup and the inputGroup.\n                const getXOffsetForExportButton = (group, position) => {\n                    if (navButtonOptions &&\n                        this.titleCollision(chart) &&\n                        verticalAlign === 'top' &&\n                        position.align === 'right' && ((position.y -\n                        group.getBBox().height - 12) <\n                        ((navButtonOptions.y || 0) +\n                            (navButtonOptions.height || 0) +\n                            chart.spacing[0]))) {\n                        return -40;\n                    }\n                    return 0;\n                };\n                let plotLeft = chart.plotLeft;\n                if (group && buttonPosition && inputPosition) {\n                    let translateX = buttonPosition.x - chart.spacing[3];\n                    if (buttonGroup) {\n                        this.positionButtons();\n                        if (!this.initialButtonGroupWidth) {\n                            let width = 0;\n                            if (zoomText) {\n                                width += zoomText.getBBox().width + 5;\n                            }\n                            buttons.forEach((button, i) => {\n                                width += button.width || 0;\n                                if (i !== buttons.length - 1) {\n                                    width += options.buttonSpacing;\n                                }\n                            });\n                            this.initialButtonGroupWidth = width;\n                        }\n                        plotLeft -= chart.spacing[3];\n                        this.updateButtonStates();\n                        // Detect collision between button group and exporting\n                        const xOffsetForExportButton = getXOffsetForExportButton(buttonGroup, buttonPosition);\n                        this.alignButtonGroup(xOffsetForExportButton);\n                        // Skip animation\n                        group.placed = buttonGroup.placed = chart.hasLoaded;\n                    }\n                    let xOffsetForExportButton = 0;\n                    if (inputGroup) {\n                        // Detect collision between the input group and exporting button\n                        xOffsetForExportButton = getXOffsetForExportButton(inputGroup, inputPosition);\n                        if (inputPosition.align === 'left') {\n                            translateX = plotLeft;\n                        }\n                        else if (inputPosition.align === 'right') {\n                            translateX = -Math.max(chart.axisOffset[1], -xOffsetForExportButton);\n                        }\n                        // Update the alignment to the updated spacing box\n                        inputGroup.align({\n                            y: inputPosition.y,\n                            width: inputGroup.getBBox().width,\n                            align: inputPosition.align,\n                            // fix wrong getBBox() value on right align\n                            x: inputPosition.x + translateX - 2\n                        }, true, chart.spacingBox);\n                        // Skip animation\n                        inputGroup.placed = chart.hasLoaded;\n                    }\n                    this.handleCollision(xOffsetForExportButton);\n                    // Vertical align\n                    group.align({\n                        verticalAlign\n                    }, true, chart.spacingBox);\n                    const alignTranslateY = group.alignAttr.translateY;\n                    // Set position\n                    let groupHeight = group.getBBox().height + 20; // # 20 padding\n                    let translateY = 0;\n                    // Calculate bottom position\n                    if (verticalAlign === 'bottom') {\n                        const legendOptions = chart.legend && chart.legend.options;\n                        const legendHeight = (legendOptions &&\n                            legendOptions.verticalAlign === 'bottom' &&\n                            legendOptions.enabled &&\n                            !legendOptions.floating ?\n                            (chart.legend.legendHeight +\n                                pick(legendOptions.margin, 10)) :\n                            0);\n                        groupHeight = groupHeight + legendHeight - 20;\n                        translateY = (alignTranslateY -\n                            groupHeight -\n                            (options.floating ? 0 : options.y) -\n                            (chart.titleOffset ? chart.titleOffset[2] : 0) -\n                            10 // 10 spacing\n                        );\n                    }\n                    if (verticalAlign === 'top') {\n                        if (options.floating) {\n                            translateY = 0;\n                        }\n                        if (chart.titleOffset && chart.titleOffset[0]) {\n                            translateY = chart.titleOffset[0];\n                        }\n                        translateY += ((chart.margin[0] - chart.spacing[0]) || 0);\n                    }\n                    else if (verticalAlign === 'middle') {\n                        if (inputPosition.y === buttonPosition.y) {\n                            translateY = alignTranslateY;\n                        }\n                        else if (inputPosition.y || buttonPosition.y) {\n                            if (inputPosition.y < 0 ||\n                                buttonPosition.y < 0) {\n                                translateY -= Math.min(inputPosition.y, buttonPosition.y);\n                            }\n                            else {\n                                translateY = alignTranslateY - groupHeight;\n                            }\n                        }\n                    }\n                    group.translate(options.x, options.y + Math.floor(translateY));\n                    // Translate HTML inputs\n                    const { minInput, maxInput, dropdown } = this;\n                    if (options.inputEnabled && minInput && maxInput) {\n                        minInput.style.marginTop = group.translateY + 'px';\n                        maxInput.style.marginTop = group.translateY + 'px';\n                    }\n                    if (dropdown) {\n                        dropdown.style.marginTop = group.translateY + 'px';\n                    }\n                }\n            }\n            /**\n             * Align the button group horizontally and vertically.\n             *\n             * @private\n             * @function Highcharts.RangeSelector#alignButtonGroup\n             * @param {number} xOffsetForExportButton\n             * @param {number} [width]\n             */\n            alignButtonGroup(xOffsetForExportButton, width) {\n                const { chart, options, buttonGroup } = this;\n                const { buttonPosition } = options;\n                const plotLeft = chart.plotLeft - chart.spacing[3];\n                let translateX = buttonPosition.x - chart.spacing[3];\n                if (buttonPosition.align === 'right') {\n                    translateX += xOffsetForExportButton - plotLeft; // #13014\n                }\n                else if (buttonPosition.align === 'center') {\n                    translateX -= plotLeft / 2;\n                }\n                if (buttonGroup) {\n                    // Align button group\n                    buttonGroup.align({\n                        y: buttonPosition.y,\n                        width: pick(width, this.initialButtonGroupWidth),\n                        align: buttonPosition.align,\n                        x: translateX\n                    }, true, chart.spacingBox);\n                }\n            }\n            /**\n             * @private\n             * @function Highcharts.RangeSelector#positionButtons\n             */\n            positionButtons() {\n                const { buttons, chart, options, zoomText } = this;\n                const verb = chart.hasLoaded ? 'animate' : 'attr';\n                const { buttonPosition } = options;\n                const plotLeft = chart.plotLeft;\n                let buttonLeft = plotLeft;\n                if (zoomText && zoomText.visibility !== 'hidden') {\n                    // #8769, allow dynamically updating margins\n                    zoomText[verb]({\n                        x: pick(plotLeft + buttonPosition.x, plotLeft)\n                    });\n                    // Button start position\n                    buttonLeft += buttonPosition.x +\n                        zoomText.getBBox().width + 5;\n                }\n                for (let i = 0, iEnd = this.buttonOptions.length; i < iEnd; ++i) {\n                    if (buttons[i].visibility !== 'hidden') {\n                        buttons[i][verb]({ x: buttonLeft });\n                        // Increase the button position for the next button\n                        buttonLeft += (buttons[i].width || 0) + options.buttonSpacing;\n                    }\n                    else {\n                        buttons[i][verb]({ x: plotLeft });\n                    }\n                }\n            }\n            /**\n             * Handle collision between the button group and the input group\n             *\n             * @private\n             * @function Highcharts.RangeSelector#handleCollision\n             *\n             * @param  {number} xOffsetForExportButton\n             *                  The X offset of the group required to make room for the\n             *                  exporting button\n             */\n            handleCollision(xOffsetForExportButton) {\n                const { chart, buttonGroup, inputGroup } = this;\n                const { buttonPosition, dropdown, inputPosition } = this.options;\n                const maxButtonWidth = () => {\n                    let buttonWidth = 0;\n                    this.buttons.forEach((button) => {\n                        const bBox = button.getBBox();\n                        if (bBox.width > buttonWidth) {\n                            buttonWidth = bBox.width;\n                        }\n                    });\n                    return buttonWidth;\n                };\n                const groupsOverlap = (buttonGroupWidth) => {\n                    if (inputGroup && buttonGroup) {\n                        const inputGroupX = (inputGroup.alignAttr.translateX +\n                            inputGroup.alignOptions.x -\n                            xOffsetForExportButton +\n                            // getBBox for detecing left margin\n                            inputGroup.getBBox().x +\n                            // 2px padding to not overlap input and label\n                            2);\n                        const inputGroupWidth = inputGroup.alignOptions.width;\n                        const buttonGroupX = buttonGroup.alignAttr.translateX +\n                            buttonGroup.getBBox().x;\n                        return (buttonGroupX + buttonGroupWidth > inputGroupX) &&\n                            (inputGroupX + inputGroupWidth > buttonGroupX) &&\n                            (buttonPosition.y <\n                                (inputPosition.y +\n                                    inputGroup.getBBox().height));\n                    }\n                    return false;\n                };\n                const moveInputsDown = () => {\n                    if (inputGroup && buttonGroup) {\n                        inputGroup.attr({\n                            translateX: inputGroup.alignAttr.translateX + (chart.axisOffset[1] >= -xOffsetForExportButton ?\n                                0 :\n                                -xOffsetForExportButton),\n                            translateY: inputGroup.alignAttr.translateY +\n                                buttonGroup.getBBox().height + 10\n                        });\n                    }\n                };\n                if (buttonGroup) {\n                    if (dropdown === 'always') {\n                        this.collapseButtons(xOffsetForExportButton);\n                        if (groupsOverlap(maxButtonWidth())) {\n                            // Move the inputs down if there is still a collision\n                            // after collapsing the buttons\n                            moveInputsDown();\n                        }\n                        return;\n                    }\n                    if (dropdown === 'never') {\n                        this.expandButtons();\n                    }\n                }\n                // Detect collision\n                if (inputGroup && buttonGroup) {\n                    if ((inputPosition.align === buttonPosition.align) ||\n                        // 20 is minimal spacing between elements\n                        groupsOverlap(this.initialButtonGroupWidth + 20)) {\n                        if (dropdown === 'responsive') {\n                            this.collapseButtons(xOffsetForExportButton);\n                            if (groupsOverlap(maxButtonWidth())) {\n                                moveInputsDown();\n                            }\n                        }\n                        else {\n                            moveInputsDown();\n                        }\n                    }\n                    else if (dropdown === 'responsive') {\n                        this.expandButtons();\n                    }\n                }\n                else if (buttonGroup && dropdown === 'responsive') {\n                    if (this.initialButtonGroupWidth > chart.plotWidth) {\n                        this.collapseButtons(xOffsetForExportButton);\n                    }\n                    else {\n                        this.expandButtons();\n                    }\n                }\n            }\n            /**\n             * Collapse the buttons and put the select element on top.\n             *\n             * @private\n             * @function Highcharts.RangeSelector#collapseButtons\n             * @param {number} xOffsetForExportButton\n             */\n            collapseButtons(xOffsetForExportButton) {\n                const { buttons, buttonOptions, chart, dropdown, options, zoomText } = this;\n                // If the buttons are already collapsed do nothing.\n                if (this.isCollapsed === true) {\n                    return;\n                }\n                this.isCollapsed = true;\n                const userButtonTheme = (chart.userOptions.rangeSelector &&\n                    chart.userOptions.rangeSelector.buttonTheme) || {};\n                const getAttribs = (text) => ({\n                    text: text ? `${text} ▾` : '▾',\n                    width: 'auto',\n                    paddingLeft: pick(options.buttonTheme.paddingLeft, userButtonTheme.padding, 8),\n                    paddingRight: pick(options.buttonTheme.paddingRight, userButtonTheme.padding, 8)\n                });\n                if (zoomText) {\n                    zoomText.hide();\n                }\n                let hasActiveButton = false;\n                buttonOptions.forEach((rangeOptions, i) => {\n                    const button = buttons[i];\n                    if (button.state !== 2) {\n                        button.hide();\n                    }\n                    else {\n                        button.show();\n                        button.attr(getAttribs(rangeOptions.text));\n                        hasActiveButton = true;\n                    }\n                });\n                if (!hasActiveButton) {\n                    if (dropdown) {\n                        dropdown.selectedIndex = 0;\n                    }\n                    buttons[0].show();\n                    buttons[0].attr(getAttribs(this.zoomText && this.zoomText.textStr));\n                }\n                const { align } = options.buttonPosition;\n                this.positionButtons();\n                if (align === 'right' || align === 'center') {\n                    this.alignButtonGroup(xOffsetForExportButton, buttons[this.currentButtonIndex()].getBBox().width);\n                }\n                this.showDropdown();\n            }\n            /**\n             * Show all the buttons and hide the select element.\n             *\n             * @private\n             * @function Highcharts.RangeSelector#expandButtons\n             */\n            expandButtons() {\n                const { buttons, buttonOptions, options, zoomText } = this;\n                this.hideDropdown();\n                // If buttons are already not collapsed, do nothing.\n                if (this.isCollapsed === false) {\n                    return;\n                }\n                this.isCollapsed = false;\n                if (zoomText) {\n                    zoomText.show();\n                }\n                buttonOptions.forEach((rangeOptions, i) => {\n                    const button = buttons[i];\n                    button.show();\n                    button.attr({\n                        text: rangeOptions.text,\n                        width: options.buttonTheme.width || 28,\n                        paddingLeft: pick(options.buttonTheme.paddingLeft, 'unset'),\n                        paddingRight: pick(options.buttonTheme.paddingRight, 'unset')\n                    });\n                    if (button.state < 2) {\n                        button.setState(0);\n                    }\n                });\n                this.positionButtons();\n            }\n            /**\n             * Get the index of the visible button when the buttons are collapsed.\n             *\n             * @private\n             * @function Highcharts.RangeSelector#currentButtonIndex\n             */\n            currentButtonIndex() {\n                const { dropdown } = this;\n                if (dropdown && dropdown.selectedIndex > 0) {\n                    return dropdown.selectedIndex - 1;\n                }\n                return 0;\n            }\n            /**\n             * Position the select element on top of the button.\n             *\n             * @private\n             * @function Highcharts.RangeSelector#showDropdown\n             */\n            showDropdown() {\n                const { buttonGroup, buttons, chart, dropdown } = this;\n                if (buttonGroup && dropdown) {\n                    const { translateX = 0, translateY = 0 } = buttonGroup, bBox = buttons[this.currentButtonIndex()].getBBox();\n                    css(dropdown, {\n                        left: (chart.plotLeft + translateX) + 'px',\n                        top: (translateY + 0.5) + 'px',\n                        width: bBox.width + 'px',\n                        height: bBox.height + 'px'\n                    });\n                    this.hasVisibleDropdown = true;\n                }\n            }\n            /**\n             * @private\n             * @function Highcharts.RangeSelector#hideDropdown\n             */\n            hideDropdown() {\n                const { dropdown } = this;\n                if (dropdown) {\n                    css(dropdown, {\n                        top: '-9999em',\n                        width: '1px',\n                        height: '1px'\n                    });\n                    this.hasVisibleDropdown = false;\n                }\n            }\n            /**\n             * Extracts height of range selector\n             *\n             * @private\n             * @function Highcharts.RangeSelector#getHeight\n             * @return {number}\n             * Returns rangeSelector height\n             */\n            getHeight() {\n                const rangeSelector = this, options = rangeSelector.options, rangeSelectorGroup = rangeSelector.group, inputPosition = options.inputPosition, buttonPosition = options.buttonPosition, yPosition = options.y, buttonPositionY = buttonPosition.y, inputPositionY = inputPosition.y;\n                let rangeSelectorHeight = 0;\n                if (options.height) {\n                    return options.height;\n                }\n                // Align the elements before we read the height in case we're switching\n                // between wrapped and non-wrapped layout\n                this.alignElements();\n                rangeSelectorHeight = rangeSelectorGroup ?\n                    // 13px to keep back compatibility\n                    (rangeSelectorGroup.getBBox(true).height) + 13 +\n                        yPosition :\n                    0;\n                const minPosition = Math.min(inputPositionY, buttonPositionY);\n                if ((inputPositionY < 0 && buttonPositionY < 0) ||\n                    (inputPositionY > 0 && buttonPositionY > 0)) {\n                    rangeSelectorHeight += Math.abs(minPosition);\n                }\n                return rangeSelectorHeight;\n            }\n            /**\n             * Detect collision with title or subtitle\n             *\n             * @private\n             * @function Highcharts.RangeSelector#titleCollision\n             * @return {boolean}\n             * Returns collision status\n             */\n            titleCollision(chart) {\n                return !(chart.options.title.text ||\n                    chart.options.subtitle.text);\n            }\n            /**\n             * Update the range selector with new options\n             *\n             * @private\n             * @function Highcharts.RangeSelector#update\n             * @param {Highcharts.RangeSelectorOptions} options\n             */\n            update(options) {\n                const chart = this.chart;\n                merge(true, chart.options.rangeSelector, options);\n                this.destroy();\n                this.init(chart);\n                this.render();\n            }\n            /**\n             * Destroys allocated elements.\n             *\n             * @private\n             * @function Highcharts.RangeSelector#destroy\n             */\n            destroy() {\n                const rSelector = this, minInput = rSelector.minInput, maxInput = rSelector.maxInput;\n                if (rSelector.eventsToUnbind) {\n                    rSelector.eventsToUnbind.forEach((unbind) => unbind());\n                    rSelector.eventsToUnbind = void 0;\n                }\n                // Destroy elements in collections\n                destroyObjectProperties(rSelector.buttons);\n                // Clear input element events\n                if (minInput) {\n                    minInput.onfocus = minInput.onblur = minInput.onchange = null;\n                }\n                if (maxInput) {\n                    maxInput.onfocus = maxInput.onblur = maxInput.onchange = null;\n                }\n                // Destroy HTML and SVG elements\n                objectEach(rSelector, function (val, key) {\n                    if (val && key !== 'chart') {\n                        if (val instanceof SVGElement) {\n                            // SVGElement\n                            val.destroy();\n                        }\n                        else if (val instanceof window.HTMLElement) {\n                            // HTML element\n                            discardElement(val);\n                        }\n                    }\n                    if (val !== RangeSelector.prototype[key]) {\n                        rSelector[key] = null;\n                    }\n                }, this);\n            }\n        }\n        extend(RangeSelector.prototype, {\n            /**\n             * The default buttons for pre-selecting time frames.\n             * @private\n             */\n            defaultButtons: [{\n                    type: 'month',\n                    count: 1,\n                    text: '1m',\n                    title: 'View 1 month'\n                }, {\n                    type: 'month',\n                    count: 3,\n                    text: '3m',\n                    title: 'View 3 months'\n                }, {\n                    type: 'month',\n                    count: 6,\n                    text: '6m',\n                    title: 'View 6 months'\n                }, {\n                    type: 'ytd',\n                    text: 'YTD',\n                    title: 'View year to date'\n                }, {\n                    type: 'year',\n                    count: 1,\n                    text: '1y',\n                    title: 'View 1 year'\n                }, {\n                    type: 'all',\n                    text: 'All',\n                    title: 'View all'\n                }],\n            /**\n             * The date formats to use when setting min, max and value on date inputs.\n             * @private\n             */\n            inputTypeFormats: {\n                'datetime-local': '%Y-%m-%dT%H:%M:%S',\n                'date': '%Y-%m-%d',\n                'time': '%H:%M:%S'\n            }\n        });\n        /* *\n         *\n         *  Default Export\n         *\n         * */\n        /* *\n         *\n         *  API Options\n         *\n         * */\n        /**\n         * Define the time span for the button\n         *\n         * @typedef {\"all\"|\"day\"|\"hour\"|\"millisecond\"|\"minute\"|\"month\"|\"second\"|\"week\"|\"year\"|\"ytd\"} Highcharts.RangeSelectorButtonTypeValue\n         */\n        /**\n         * Callback function to react on button clicks.\n         *\n         * @callback Highcharts.RangeSelectorClickCallbackFunction\n         *\n         * @param {global.Event} e\n         *        Event arguments.\n         *\n         * @param {boolean|undefined}\n         *        Return false to cancel the default button event.\n         */\n        /**\n         * Callback function to parse values entered in the input boxes and return a\n         * valid JavaScript time as milliseconds since 1970.\n         *\n         * @callback Highcharts.RangeSelectorParseCallbackFunction\n         *\n         * @param {string} value\n         *        Input value to parse.\n         *\n         * @return {number}\n         *         Parsed JavaScript time value.\n         */\n        (''); // keeps doclets above in JS file\n\n        return RangeSelector;\n    });\n    _registerModule(_modules, 'Core/Chart/StockChart.js', [_modules['Core/Chart/Chart.js'], _modules['Core/Templating.js'], _modules['Core/Defaults.js'], _modules['Stock/Navigator/NavigatorDefaults.js'], _modules['Stock/RangeSelector/RangeSelectorDefaults.js'], _modules['Stock/Scrollbar/ScrollbarDefaults.js'], _modules['Stock/Utilities/StockUtilities.js'], _modules['Core/Utilities.js']], function (Chart, F, D, NavigatorDefaults, RangeSelectorDefaults, ScrollbarDefaults, StockUtilities, U) {\n        /* *\n         *\n         *  (c) 2010-2024 Torstein Honsi\n         *\n         *  License: www.highcharts.com/license\n         *\n         *  !!!!!!! SOURCE GETS TRANSPILED BY TYPESCRIPT. EDIT TS FILE ONLY. !!!!!!!\n         *\n         * */\n        const { format } = F;\n        const { getOptions } = D;\n        const { setFixedRange } = StockUtilities;\n        const { addEvent, clamp, defined, extend, find, isNumber, isString, merge, pick, splat } = U;\n        /* *\n         *\n         *  Functions\n         *\n         * */\n        /**\n         * Get stock-specific default axis options.\n         *\n         * @private\n         * @function getDefaultAxisOptions\n         */\n        function getDefaultAxisOptions(coll, options, defaultOptions) {\n            if (coll === 'xAxis') {\n                return {\n                    minPadding: 0,\n                    maxPadding: 0,\n                    overscroll: 0,\n                    ordinal: true\n                };\n            }\n            if (coll === 'yAxis') {\n                return {\n                    labels: {\n                        y: -2\n                    },\n                    opposite: defaultOptions.opposite ?? options.opposite ?? true,\n                    showLastLabel: !!(\n                    // #6104, show last label by default for category axes\n                    options.categories ||\n                        options.type === 'category'),\n                    title: {\n                        text: defaultOptions.title?.text !== 'Values' ?\n                            defaultOptions.title?.text :\n                            null\n                    }\n                };\n            }\n            return {};\n        }\n        /**\n         * Get stock-specific forced axis options.\n         *\n         * @private\n         * @function getForcedAxisOptions\n         */\n        function getForcedAxisOptions(type, chartOptions) {\n            if (type === 'xAxis') {\n                // Always disable startOnTick:true on the main axis when the navigator\n                // is enabled (#1090)\n                const navigatorEnabled = pick(chartOptions.navigator && chartOptions.navigator.enabled, NavigatorDefaults.enabled, true);\n                const axisOptions = {\n                    type: 'datetime',\n                    categories: void 0\n                };\n                if (navigatorEnabled) {\n                    axisOptions.startOnTick = false;\n                    axisOptions.endOnTick = false;\n                }\n                return axisOptions;\n            }\n            return {};\n        }\n        /* *\n         *\n         *  Class\n         *\n         * */\n        /**\n         * Stock-optimized chart. Use {@link Highcharts.Chart|Chart} for common charts.\n         *\n         * @requires modules/stock\n         *\n         * @class\n         * @name Highcharts.StockChart\n         * @extends Highcharts.Chart\n         */\n        class StockChart extends Chart {\n            /* *\n             *\n             *  Functions\n             *\n             * */\n            /**\n             * Initializes the chart. The constructor's arguments are passed on\n             * directly.\n             *\n             * @function Highcharts.StockChart#init\n             *\n             * @param {Highcharts.Options} userOptions\n             *        Custom options.\n             *\n             * @param {Function} [callback]\n             *        Function to run when the chart has loaded and all external\n             *        images are loaded.\n             *\n             *\n             * @emits Highcharts.StockChart#event:init\n             * @emits Highcharts.StockChart#event:afterInit\n             */\n            init(userOptions, callback) {\n                const defaultOptions = getOptions(), xAxisOptions = userOptions.xAxis, yAxisOptions = userOptions.yAxis, \n                // Always disable startOnTick:true on the main axis when the\n                // navigator is enabled (#1090)\n                navigatorEnabled = pick(userOptions.navigator && userOptions.navigator.enabled, NavigatorDefaults.enabled, true);\n                // Avoid doing these twice\n                userOptions.xAxis = userOptions.yAxis = void 0;\n                const options = merge({\n                    chart: {\n                        panning: {\n                            enabled: true,\n                            type: 'x'\n                        },\n                        zooming: {\n                            pinchType: 'x',\n                            mouseWheel: {\n                                type: 'x'\n                            }\n                        }\n                    },\n                    navigator: {\n                        enabled: navigatorEnabled\n                    },\n                    scrollbar: {\n                        // #4988 - check if setOptions was called\n                        enabled: pick(ScrollbarDefaults.enabled, true)\n                    },\n                    rangeSelector: {\n                        // #4988 - check if setOptions was called\n                        enabled: pick(RangeSelectorDefaults.rangeSelector.enabled, true)\n                    },\n                    title: {\n                        text: null\n                    },\n                    tooltip: {\n                        split: pick(defaultOptions.tooltip && defaultOptions.tooltip.split, true),\n                        crosshairs: true\n                    },\n                    legend: {\n                        enabled: false\n                    }\n                }, userOptions, // User's options\n                {\n                    isStock: true // Internal flag\n                });\n                userOptions.xAxis = xAxisOptions;\n                userOptions.yAxis = yAxisOptions;\n                // Apply X axis options to both single and multi y axes\n                options.xAxis = splat(userOptions.xAxis || {}).map((xAxisOptions) => merge(getDefaultAxisOptions('xAxis', xAxisOptions, defaultOptions.xAxis), \n                // #7690\n                xAxisOptions, // User options\n                getForcedAxisOptions('xAxis', userOptions)));\n                // Apply Y axis options to both single and multi y axes\n                options.yAxis = splat(userOptions.yAxis || {}).map((yAxisOptions) => merge(getDefaultAxisOptions('yAxis', yAxisOptions, defaultOptions.yAxis), \n                // #7690\n                yAxisOptions // User options\n                ));\n                super.init(options, callback);\n            }\n            /**\n             * Factory for creating different axis types.\n             * Extended to add stock defaults.\n             *\n             * @private\n             * @function Highcharts.StockChart#createAxis\n             * @param {string} coll\n             * An axis type.\n             * @param {Chart.CreateAxisOptionsObject} options\n             * The axis creation options.\n             */\n            createAxis(coll, options) {\n                options.axis = merge(getDefaultAxisOptions(coll, options.axis, getOptions()[coll]), options.axis, getForcedAxisOptions(coll, this.userOptions));\n                return super.createAxis(coll, options);\n            }\n        }\n        addEvent(Chart, 'update', function (e) {\n            const chart = this, options = e.options;\n            // Use case: enabling scrollbar from a disabled state.\n            // Scrollbar needs to be initialized from a controller, Navigator in this\n            // case (#6615)\n            if ('scrollbar' in options && chart.navigator) {\n                merge(true, chart.options.scrollbar, options.scrollbar);\n                chart.navigator.update({});\n                delete options.scrollbar;\n            }\n        });\n        /* *\n         *\n         *  Composition\n         *\n         * */\n        (function (StockChart) {\n            /* *\n             *\n             *  Functions\n             *\n             * */\n            /** @private */\n            function compose(ChartClass, AxisClass, SeriesClass, SVGRendererClass) {\n                const seriesProto = SeriesClass.prototype;\n                if (!seriesProto.forceCropping) {\n                    addEvent(AxisClass, 'afterDrawCrosshair', onAxisAfterDrawCrosshair);\n                    addEvent(AxisClass, 'afterHideCrosshair', onAxisAfterHideCrosshair);\n                    addEvent(AxisClass, 'autoLabelAlign', onAxisAutoLabelAlign);\n                    addEvent(AxisClass, 'destroy', onAxisDestroy);\n                    addEvent(AxisClass, 'getPlotLinePath', onAxisGetPlotLinePath);\n                    ChartClass.prototype.setFixedRange = setFixedRange;\n                    seriesProto.forceCropping = seriesForceCropping;\n                    addEvent(SeriesClass, 'setOptions', onSeriesSetOptions);\n                    SVGRendererClass.prototype.crispPolyLine = svgRendererCrispPolyLine;\n                }\n            }\n            StockChart.compose = compose;\n            /**\n             * Extend crosshairs to also draw the label.\n             * @private\n             */\n            function onAxisAfterDrawCrosshair(event) {\n                const axis = this;\n                // Check if the label has to be drawn\n                if (!axis.crosshair ||\n                    !axis.crosshair.label ||\n                    !axis.crosshair.label.enabled ||\n                    !axis.cross ||\n                    !isNumber(axis.min) ||\n                    !isNumber(axis.max)) {\n                    return;\n                }\n                const chart = axis.chart, log = axis.logarithmic, options = axis.crosshair.label, // the label's options\n                horiz = axis.horiz, // axis orientation\n                opposite = axis.opposite, // axis position\n                left = axis.left, // left position\n                top = axis.top, // top position\n                width = axis.width, tickInside = axis.options.tickPosition === 'inside', snap = axis.crosshair.snap !== false, e = event.e || (axis.cross && axis.cross.e), point = event.point;\n                let crossLabel = axis.crossLabel, // the svgElement\n                posx, posy, formatOption = options.format, formatFormat = '', limit, offset = 0, \n                // Use last available event (#5287)\n                min = axis.min, max = axis.max;\n                if (log) {\n                    min = log.lin2log(axis.min);\n                    max = log.lin2log(axis.max);\n                }\n                const align = (horiz ? 'center' : opposite ?\n                    (axis.labelAlign === 'right' ? 'right' : 'left') :\n                    (axis.labelAlign === 'left' ? 'left' : 'center'));\n                // If the label does not exist yet, create it.\n                if (!crossLabel) {\n                    crossLabel = axis.crossLabel = chart.renderer\n                        .label('', 0, void 0, options.shape || 'callout')\n                        .addClass('highcharts-crosshair-label highcharts-color-' + (point && point.series ?\n                        point.series.colorIndex :\n                        axis.series[0] && this.series[0].colorIndex))\n                        .attr({\n                        align: options.align || align,\n                        padding: pick(options.padding, 8),\n                        r: pick(options.borderRadius, 3),\n                        zIndex: 2\n                    })\n                        .add(axis.labelGroup);\n                    // Presentational\n                    if (!chart.styledMode) {\n                        crossLabel\n                            .attr({\n                            fill: options.backgroundColor ||\n                                ( // #14888\n                                point && point.series &&\n                                    point.series.color) ||\n                                \"#666666\" /* Palette.neutralColor60 */,\n                            stroke: options.borderColor || '',\n                            'stroke-width': options.borderWidth || 0\n                        })\n                            .css(extend({\n                            color: \"#ffffff\" /* Palette.backgroundColor */,\n                            fontWeight: 'normal',\n                            fontSize: '0.7em',\n                            textAlign: 'center'\n                        }, options.style || {}));\n                    }\n                }\n                if (horiz) {\n                    posx = snap ? (point.plotX || 0) + left : e.chartX;\n                    posy = top + (opposite ? 0 : axis.height);\n                }\n                else {\n                    posx = left + axis.offset + (opposite ? width : 0);\n                    posy = snap ? (point.plotY || 0) + top : e.chartY;\n                }\n                if (!formatOption && !options.formatter) {\n                    if (axis.dateTime) {\n                        formatFormat = '%b %d, %Y';\n                    }\n                    formatOption =\n                        '{value' + (formatFormat ? ':' + formatFormat : '') + '}';\n                }\n                // Show the label\n                const value = snap ?\n                    (axis.isXAxis ? point.x : point.y) :\n                    axis.toValue(horiz ? e.chartX : e.chartY);\n                // Crosshair should be rendered within Axis range (#7219) and the point\n                // of currentPriceIndicator should be inside the plot area (#14879).\n                const isInside = point && point.series ?\n                    point.series.isPointInside(point) :\n                    (isNumber(value) && value > min && value < max);\n                let text = '';\n                if (formatOption) {\n                    text = format(formatOption, { value }, chart);\n                }\n                else if (options.formatter && isNumber(value)) {\n                    text = options.formatter.call(axis, value);\n                }\n                crossLabel.attr({\n                    text,\n                    x: posx,\n                    y: posy,\n                    visibility: isInside ? 'inherit' : 'hidden'\n                });\n                const crossBox = crossLabel.getBBox();\n                // Now it is placed we can correct its position\n                if (isNumber(crossLabel.x) && !horiz && !opposite) {\n                    posx = crossLabel.x - (crossBox.width / 2);\n                }\n                if (isNumber(crossLabel.y)) {\n                    if (horiz) {\n                        if ((tickInside && !opposite) || (!tickInside && opposite)) {\n                            posy = crossLabel.y - crossBox.height;\n                        }\n                    }\n                    else {\n                        posy = crossLabel.y - (crossBox.height / 2);\n                    }\n                }\n                // Check the edges\n                if (horiz) {\n                    limit = {\n                        left: left - crossBox.x,\n                        right: left + axis.width - crossBox.x\n                    };\n                }\n                else {\n                    limit = {\n                        left: axis.labelAlign === 'left' ? left : 0,\n                        right: axis.labelAlign === 'right' ?\n                            left + axis.width :\n                            chart.chartWidth\n                    };\n                }\n                const translateX = crossLabel.translateX || 0;\n                // Left edge\n                if (translateX < limit.left) {\n                    offset = limit.left - translateX;\n                }\n                // Right edge\n                if (translateX + crossBox.width >= limit.right) {\n                    offset = -(translateX + crossBox.width - limit.right);\n                }\n                // Show the crosslabel\n                crossLabel.attr({\n                    x: posx + offset,\n                    y: posy,\n                    // First set x and y, then anchorX and anchorY, when box is actually\n                    // calculated, #5702\n                    anchorX: horiz ?\n                        posx :\n                        (axis.opposite ? 0 : chart.chartWidth),\n                    anchorY: horiz ?\n                        (axis.opposite ? chart.chartHeight : 0) :\n                        posy + crossBox.height / 2\n                });\n            }\n            /**\n             * Wrapper to hide the label.\n             * @private\n             */\n            function onAxisAfterHideCrosshair() {\n                const axis = this;\n                if (axis.crossLabel) {\n                    axis.crossLabel = axis.crossLabel.hide();\n                }\n            }\n            /**\n             * Override the automatic label alignment so that the first Y axis' labels\n             * are drawn on top of the grid line, and subsequent axes are drawn outside.\n             * @private\n             */\n            function onAxisAutoLabelAlign(e) {\n                const axis = this, chart = axis.chart, options = axis.options, panes = chart._labelPanes = chart._labelPanes || {}, labelOptions = options.labels;\n                if (chart.options.isStock && axis.coll === 'yAxis') {\n                    const key = options.top + ',' + options.height;\n                    // Do it only for the first Y axis of each pane\n                    if (!panes[key] && labelOptions.enabled) {\n                        if (labelOptions.distance === 15 && // default\n                            axis.side === 1) {\n                            labelOptions.distance = 0;\n                        }\n                        if (typeof labelOptions.align === 'undefined') {\n                            labelOptions.align = 'right';\n                        }\n                        panes[key] = axis;\n                        e.align = 'right';\n                        e.preventDefault();\n                    }\n                }\n            }\n            /**\n             * Clear axis from label panes. (#6071)\n             * @private\n             */\n            function onAxisDestroy() {\n                const axis = this, chart = axis.chart, key = (axis.options &&\n                    (axis.options.top + ',' + axis.options.height));\n                if (key && chart._labelPanes && chart._labelPanes[key] === axis) {\n                    delete chart._labelPanes[key];\n                }\n            }\n            /**\n             * Override getPlotLinePath to allow for multipane charts.\n             * @private\n             */\n            function onAxisGetPlotLinePath(e) {\n                const axis = this, series = (axis.isLinked && !axis.series && axis.linkedParent ?\n                    axis.linkedParent.series :\n                    axis.series), chart = axis.chart, renderer = chart.renderer, axisLeft = axis.left, axisTop = axis.top, result = [], translatedValue = e.translatedValue, value = e.value, force = e.force, \n                /**\n                 * Return the other axis based on either the axis option or on\n                 * related series.\n                 * @private\n                 */\n                getAxis = (coll) => {\n                    const otherColl = coll === 'xAxis' ? 'yAxis' : 'xAxis', opt = axis.options[otherColl];\n                    // Other axis indexed by number\n                    if (isNumber(opt)) {\n                        return [chart[otherColl][opt]];\n                    }\n                    // Other axis indexed by id (like navigator)\n                    if (isString(opt)) {\n                        return [chart.get(opt)];\n                    }\n                    // Auto detect based on existing series\n                    return series.map((s) => s[otherColl]);\n                };\n                let x1, y1, x2, y2, axes = [], // #3416 need a default array\n                axes2, uniqueAxes, transVal;\n                if ( // For stock chart, by default render paths across the panes\n                // except the case when `acrossPanes` is disabled by user (#6644)\n                (chart.options.isStock && e.acrossPanes !== false) &&\n                    // Ignore in case of colorAxis or zAxis. #3360, #3524, #6720\n                    axis.coll === 'xAxis' || axis.coll === 'yAxis') {\n                    e.preventDefault();\n                    // Get the related axes based on series\n                    axes = getAxis(axis.coll);\n                    // Get the related axes based options.*Axis setting #2810\n                    axes2 = (axis.isXAxis ? chart.yAxis : chart.xAxis);\n                    for (const A of axes2) {\n                        if (defined(A.options.id) ?\n                            A.options.id.indexOf('navigator') === -1 :\n                            true) {\n                            const a = (A.isXAxis ? 'yAxis' : 'xAxis'), rax = (defined(A.options[a]) ?\n                                chart[a][A.options[a]] :\n                                chart[a][0]);\n                            if (axis === rax) {\n                                axes.push(A);\n                            }\n                        }\n                    }\n                    // Remove duplicates in the axes array. If there are no axes in the\n                    // axes array, we are adding an axis without data, so we need to\n                    // populate this with grid lines (#2796).\n                    uniqueAxes = axes.length ?\n                        [] :\n                        [axis.isXAxis ? chart.yAxis[0] : chart.xAxis[0]]; // #3742\n                    for (const axis2 of axes) {\n                        if (uniqueAxes.indexOf(axis2) === -1 &&\n                            // Do not draw on axis which overlap completely. #5424\n                            !find(uniqueAxes, (unique) => (unique.pos === axis2.pos &&\n                                unique.len === axis2.len))) {\n                            uniqueAxes.push(axis2);\n                        }\n                    }\n                    transVal = pick(translatedValue, axis.translate(value || 0, void 0, void 0, e.old));\n                    if (isNumber(transVal)) {\n                        if (axis.horiz) {\n                            for (const axis2 of uniqueAxes) {\n                                let skip;\n                                y1 = axis2.pos;\n                                y2 = y1 + axis2.len;\n                                x1 = x2 = Math.round(transVal + axis.transB);\n                                // outside plot area\n                                if (force !== 'pass' &&\n                                    (x1 < axisLeft || x1 > axisLeft + axis.width)) {\n                                    if (force) {\n                                        x1 = x2 = clamp(x1, axisLeft, axisLeft + axis.width);\n                                    }\n                                    else {\n                                        skip = true;\n                                    }\n                                }\n                                if (!skip) {\n                                    result.push(['M', x1, y1], ['L', x2, y2]);\n                                }\n                            }\n                        }\n                        else {\n                            for (const axis2 of uniqueAxes) {\n                                let skip;\n                                x1 = axis2.pos;\n                                x2 = x1 + axis2.len;\n                                y1 = y2 = Math.round(axisTop + axis.height - transVal);\n                                // outside plot area\n                                if (force !== 'pass' &&\n                                    (y1 < axisTop || y1 > axisTop + axis.height)) {\n                                    if (force) {\n                                        y1 = y2 = clamp(y1, axisTop, axisTop + axis.height);\n                                    }\n                                    else {\n                                        skip = true;\n                                    }\n                                }\n                                if (!skip) {\n                                    result.push(['M', x1, y1], ['L', x2, y2]);\n                                }\n                            }\n                        }\n                    }\n                    e.path = result.length > 0 ?\n                        renderer.crispPolyLine(result, e.lineWidth || 1) :\n                        // #3557 getPlotLinePath in regular Highcharts also returns null\n                        void 0;\n                }\n            }\n            /**\n             * Handle som Stock-specific series defaults, override the plotOptions\n             * before series options are handled.\n             * @private\n             */\n            function onSeriesSetOptions(e) {\n                const series = this;\n                if (series.chart.options.isStock) {\n                    let overrides;\n                    if (series.is('column') || series.is('columnrange')) {\n                        overrides = {\n                            borderWidth: 0,\n                            shadow: false\n                        };\n                    }\n                    else if (!series.is('scatter') && !series.is('sma')) {\n                        overrides = {\n                            marker: {\n                                enabled: false,\n                                radius: 2\n                            }\n                        };\n                    }\n                    if (overrides) {\n                        e.plotOptions[series.type] = merge(e.plotOptions[series.type], overrides);\n                    }\n                }\n            }\n            /**\n             * Based on the data grouping options decides whether\n             * the data should be cropped while processing.\n             *\n             * @ignore\n             * @function Highcharts.Series#forceCropping\n             */\n            function seriesForceCropping() {\n                const series = this, chart = series.chart, options = series.options, dataGroupingOptions = options.dataGrouping, groupingEnabled = (series.allowDG !== false &&\n                    dataGroupingOptions &&\n                    pick(dataGroupingOptions.enabled, chart.options.isStock));\n                return groupingEnabled;\n            }\n            /* eslint-disable jsdoc/check-param-names */\n            /**\n             * Factory function for creating new stock charts. Creates a new\n             * {@link Highcharts.StockChart|StockChart} object with different default\n             * options than the basic Chart.\n             *\n             * @example\n             * let chart = Highcharts.stockChart('container', {\n             *     series: [{\n             *         data: [1, 2, 3, 4, 5, 6, 7, 8, 9],\n             *         pointInterval: 24 * 60 * 60 * 1000\n             *     }]\n             * });\n             *\n             * @function Highcharts.stockChart\n             *\n             * @param {string|Highcharts.HTMLDOMElement} [renderTo]\n             *        The DOM element to render to, or its id.\n             *\n             * @param {Highcharts.Options} options\n             *        The chart options structure as described in the\n             *        [options reference](https://api.highcharts.com/highstock).\n             *\n             * @param {Highcharts.ChartCallbackFunction} [callback]\n             *        A function to execute when the chart object is finished\n             *        rendering and all external image files (`chart.backgroundImage`,\n             *        `chart.plotBackgroundImage` etc) are loaded. Defining a\n             *        [chart.events.load](https://api.highcharts.com/highstock/chart.events.load)\n             *        handler is equivalent.\n             *\n             * @return {Highcharts.StockChart}\n             *         The chart object.\n             */\n            function stockChart(a, b, c) {\n                return new StockChart(a, b, c);\n            }\n            StockChart.stockChart = stockChart;\n            /* eslint-enable jsdoc/check-param-names */\n            /**\n             * Function to crisp a line with multiple segments\n             *\n             * @private\n             * @function Highcharts.SVGRenderer#crispPolyLine\n             */\n            function svgRendererCrispPolyLine(points, width) {\n                // points format: [['M', 0, 0], ['L', 100, 0]]\n                // normalize to a crisp line\n                for (let i = 0; i < points.length; i = i + 2) {\n                    const start = points[i], end = points[i + 1];\n                    if (start[1] === end[1]) {\n                        // Subtract due to #1129. Now bottom and left axis gridlines\n                        // behave the same.\n                        start[1] = end[1] =\n                            Math.round(start[1]) - (width % 2 / 2);\n                    }\n                    if (start[2] === end[2]) {\n                        start[2] = end[2] =\n                            Math.round(start[2]) + (width % 2 / 2);\n                    }\n                }\n                return points;\n            }\n        })(StockChart || (StockChart = {}));\n        /* *\n         *\n         *  Default Export\n         *\n         * */\n\n        return StockChart;\n    });\n    _registerModule(_modules, 'Series/HLC/HLCPoint.js', [_modules['Core/Series/SeriesRegistry.js']], function (SeriesRegistry) {\n        /* *\n         *\n         *  (c) 2010-2024 Pawel Lysy\n         *\n         *  License: www.highcharts.com/license\n         *\n         *  !!!!!!! SOURCE GETS TRANSPILED BY TYPESCRIPT. EDIT TS FILE ONLY. !!!!!!!\n         *\n         * */\n        const { column: { prototype: { pointClass: ColumnPoint } } } = SeriesRegistry.seriesTypes;\n        /* *\n         *\n         *  Class\n         *\n         * */\n        class HLCPoint extends ColumnPoint {\n        }\n        /* *\n         *\n         *  Default Export\n         *\n         * */\n\n        return HLCPoint;\n    });\n    _registerModule(_modules, 'Series/HLC/HLCSeriesDefaults.js', [], function () {\n        /* *\n         *\n         *  (c) 2010-2024 Pawel Lysy\n         *\n         *  License: www.highcharts.com/license\n         *\n         *  !!!!!!! SOURCE GETS TRANSPILED BY TYPESCRIPT. EDIT TS FILE ONLY. !!!!!!!\n         *\n         * */\n        /* *\n         *\n         *  API Options\n         *\n         * */\n        /**\n         * An HLC chart is a style of financial chart used to describe price\n         * movements over time. It displays high, low and close values per\n         * data point.\n         *\n         * @sample stock/demo/hlc/\n         *         HLC chart\n         *\n         * @extends      plotOptions.column\n         * @excluding    borderColor, borderRadius, borderWidth, crisp, stacking,\n         *               stack\n         * @product      highstock\n         * @optionparent plotOptions.hlc\n         */\n        const HLCSeriesDefaults = {\n            /**\n             * The approximate pixel width of each group. If for example a series\n             * with 30 points is displayed over a 600 pixel wide plot area, no\n             * grouping is performed. If however the series contains so many points\n             * that the spacing is less than the groupPixelWidth, Highcharts will\n             * try to group it into appropriate groups so that each is more or less\n             * two pixels wide. Defaults to `5`.\n             *\n             * @type      {number}\n             * @default   5\n             * @product   highstock\n             * @apioption plotOptions.hlc.dataGrouping.groupPixelWidth\n             */\n            /**\n             * @type      {Highcharts.DataGroupingApproximationValue|Function}\n             * @default   hlc\n             * @product   highstock\n             * @apioption plotOptions.hlc.dataGrouping.approximation\n             */\n            /**\n             * @default   close\n             * @apioption plotOptions.hlc.colorKey\n             */\n            /**\n             * The pixel width of the line/border. Defaults to `1`.\n             *\n             * @sample {highstock} stock/plotoptions/hlc-linewidth/\n             *         A greater line width\n             *\n             * @type    {number}\n             * @default 1\n             * @product highstock\n             *\n             * @public\n             */\n            lineWidth: 1,\n            tooltip: {\n                pointFormat: '<span style=\"color:{point.color}\">\\u25CF</span> ' +\n                    '<b> {series.name}</b><br/>' +\n                    'High: {point.high}<br/>' +\n                    'Low: {point.low}<br/>' +\n                    'Close: {point.close}<br/>'\n            },\n            /**\n             * @type {number|null}\n             */\n            threshold: null,\n            states: {\n                /**\n                 * @extends plotOptions.column.states.hover\n                 * @product highstock\n                 */\n                hover: {\n                    /**\n                     * The pixel width of the line representing the HLC point.\n                     *\n                     * @type    {number}\n                     * @default 3\n                     * @product highstock\n                     */\n                    lineWidth: 3\n                }\n            },\n            /**\n             * Determines which one of  `high`, `low`, `close` values should\n             * be represented as `point.y`, which is later used to set dataLabel\n             * position and [compare](#plotOptions.series.compare).\n             *\n             * @sample {highstock} stock/plotoptions/hlc-pointvalkey/\n             *         Possible values\n             *\n             * @declare    Highcharts.OptionsHLCPointValKeyValue\n             * @type       {string}\n             * @default    close\n             * @validvalue [\"high\", \"low\", \"close\"]\n             * @product    highstock\n             * @apioption  plotOptions.hlc.pointValKey\n             */\n            /**\n             * @default   close\n             * @apioption plotOptions.hlc.colorKey\n             */\n            stickyTracking: true\n        };\n        /**\n         * A `hlc` series. If the [type](#series.hlc.type) option is not\n         * specified, it is inherited from [chart.type](#chart.type).\n         *\n         * @extends   series,plotOptions.hlc\n         * @excluding dataParser, dataURL\n         * @product   highstock\n         * @apioption series.hlc\n         */\n        /**\n         * An array of data points for the series. For the `hlc` series type,\n         * points can be given in the following ways:\n         *\n         * 1. An array of arrays with 4 or 3 values. In this case, the values correspond\n         *    to `x,high,low,close`. If the first value is a string, it is applied\n         *    as the name of the point, and the `x` value is inferred. The `x` value can\n         *    also be omitted, in which case the inner arrays should be of length of 3\\.\n         *    Then the `x` value is automatically calculated, either starting at 0 and\n         *    incremented by 1, or from `pointStart` and `pointInterval` given in the\n         *    series options.\n         *    ```js\n         *    data: [\n         *        [0, 5, 6, 7],\n         *        [1, 4, 8, 2],\n         *        [2, 3, 4, 10]\n         *    ]\n         *    ```\n         *\n         * 2. An array of objects with named values. The following snippet shows only a\n         *    few settings, see the complete options set below. If the total number of\n         *    data points exceeds the series'\n         *    [turboThreshold](#series.hlc.turboThreshold), this option is not\n         *    available.\n         *    ```js\n         *    data: [{\n         *        x: 1,\n         *        high: 4,\n         *        low: 5,\n         *        close: 2,\n         *        name: \"Point2\",\n         *        color: \"#00FF00\"\n         *    }, {\n         *        x: 1,\n         *        high: 3,\n         *        low: 6,\n         *        close: 7,\n         *        name: \"Point1\",\n         *        color: \"#FF00FF\"\n         *    }]\n         *    ```\n         *\n         * @type      {Array<Array<(number|string),number,number>|Array<(number|string),number,number,number>|*>}\n         * @extends   series.arearange.data\n         * @excluding y, marker\n         * @product   highstock\n         * @apioption series.hlc.data\n         */\n        /**\n         * The closing value of each data point.\n         *\n         * @type      {number}\n         * @product   highstock\n         * @apioption series.hlc.data.close\n         */\n        (''); // keeps doclets above in JS file\n        /* *\n         *\n         *  Default Export\n         *\n         * */\n\n        return HLCSeriesDefaults;\n    });\n    _registerModule(_modules, 'Series/HLC/HLCSeries.js', [_modules['Series/HLC/HLCPoint.js'], _modules['Series/HLC/HLCSeriesDefaults.js'], _modules['Core/Series/SeriesRegistry.js'], _modules['Core/Utilities.js']], function (HLCPoint, HLCSeriesDefaults, SeriesRegistry, U) {\n        /* *\n         *\n         *  (c) 2010-2024 Pawel Lysy\n         *\n         *  License: www.highcharts.com/license\n         *\n         *  !!!!!!! SOURCE GETS TRANSPILED BY TYPESCRIPT. EDIT TS FILE ONLY. !!!!!!!\n         *\n         * */\n        const { column: ColumnSeries } = SeriesRegistry.seriesTypes;\n        const { extend, merge } = U;\n        /* *\n         *\n         *  Class\n         *\n         * */\n        /**\n         * The hlc series type.\n         *\n         * @private\n         * @class\n         * @name Highcharts.seriesTypes.hlc\n         *\n         * @augments Highcharts.Series\n         */\n        class HLCSeries extends ColumnSeries {\n            /* *\n             *\n             *  Functions\n             *\n             * */\n            /**\n             * Extend the path if close is not between high and low.\n             *\n             * @param {SVGPath} path the path array of the point\n             * @param {number} halfStrokeWidth\n             * @param {number} value value of the point to which the stem should be extended\n             */\n            extendStem(path, halfStrokeWidth, value) {\n                const start = path[0];\n                const end = path[1];\n                // We don't need to worry about crisp - close value\n                // is already crisped and halfStrokeWidth should remove it.\n                if (typeof start[2] === 'number') {\n                    start[2] = Math.max(value + halfStrokeWidth, start[2]);\n                }\n                if (typeof end[2] === 'number') {\n                    end[2] = Math.min(value - halfStrokeWidth, end[2]);\n                }\n            }\n            /**\n             * Function to create SVGPath of the point based on the\n             * plot positions of this point.\n             * @private\n             */\n            getPointPath(point, graphic) {\n                // crisp vector coordinates\n                const strokeWidth = graphic.strokeWidth(), series = point.series, crispCorr = (strokeWidth % 2) / 2, \n                // #2596:\n                crispX = Math.round(point.plotX) - crispCorr, halfWidth = Math.round(point.shapeArgs.width / 2);\n                let plotClose = point.plotClose;\n                // the vertical stem\n                const path = [\n                    ['M', crispX, Math.round(point.yBottom)],\n                    ['L', crispX, Math.round(point.plotHigh)]\n                ];\n                // close\n                if (point.close !== null) {\n                    plotClose = Math.round(point.plotClose) + crispCorr;\n                    path.push(['M', crispX, plotClose], ['L', crispX + halfWidth, plotClose]);\n                    series.extendStem(path, strokeWidth / 2, plotClose);\n                }\n                return path;\n            }\n            /**\n             * Draw single point\n             * @private\n             */\n            drawSinglePoint(point) {\n                const series = point.series, chart = series.chart;\n                let path, graphic = point.graphic;\n                if (typeof point.plotY !== 'undefined') {\n                    // Create and/or update the graphic\n                    if (!graphic) {\n                        point.graphic = graphic = chart.renderer.path()\n                            .add(series.group);\n                    }\n                    if (!chart.styledMode) {\n                        graphic.attr(series.pointAttribs(point, (point.selected && 'select'))); // #3897\n                    }\n                    // crisp vector coordinates\n                    path = series.getPointPath(point, graphic);\n                    graphic[!graphic ? 'attr' : 'animate']({ d: path })\n                        .addClass(point.getClassName(), true);\n                }\n            }\n            /**\n             * Draw the data points\n             * @private\n             */\n            drawPoints() {\n                this.points.forEach(this.drawSinglePoint);\n            }\n            /**\n             * @private\n             * @function Highcharts.seriesTypes.hlc#init\n             */\n            init() {\n                super.init.apply(this, arguments);\n                this.options.stacking = void 0; // #8817\n            }\n            /**\n             * Postprocess mapping between options and SVG attributes\n             * @private\n             */\n            pointAttribs(point, state) {\n                const attribs = super.pointAttribs.call(this, point, state);\n                delete attribs.fill;\n                return attribs;\n            }\n            toYData(point) {\n                // return a plain array for speedy calculation\n                return [point.high, point.low, point.close];\n            }\n            /**\n             * Translate data points from raw values x and y to plotX and plotY\n             *\n             * @private\n             * @function Highcharts.seriesTypes.hlc#translate\n             */\n            translate() {\n                const series = this, yAxis = series.yAxis, names = (this.pointArrayMap && this.pointArrayMap.slice()) || [], translated = names.map((name) => `plot${name.charAt(0).toUpperCase() + name.slice(1)}`);\n                translated.push('yBottom');\n                names.push('low');\n                super.translate.apply(series);\n                // Do the translation\n                series.points.forEach(function (point) {\n                    names.forEach(function (name, i) {\n                        let value = point[name];\n                        if (value !== null) {\n                            if (series.dataModify) {\n                                value = series.dataModify.modifyValue(value);\n                            }\n                            point[translated[i]] =\n                                yAxis.toPixels(value, true);\n                        }\n                    });\n                    // Align the tooltip to the high value to avoid covering the\n                    // point\n                    point.tooltipPos[1] =\n                        point.plotHigh + yAxis.pos - series.chart.plotTop;\n                });\n            }\n        }\n        /* *\n         *\n         *  Static Properties\n         *\n         * */\n        HLCSeries.defaultOptions = merge(ColumnSeries.defaultOptions, HLCSeriesDefaults);\n        extend(HLCSeries.prototype, {\n            pointClass: HLCPoint,\n            animate: null,\n            directTouch: false,\n            pointArrayMap: ['high', 'low', 'close'],\n            pointAttrToOptions: {\n                stroke: 'color',\n                'stroke-width': 'lineWidth'\n            },\n            pointValKey: 'close'\n        });\n        SeriesRegistry.registerSeriesType('hlc', HLCSeries);\n        /* *\n         *\n         *  Default Export\n         *\n         * */\n\n        return HLCSeries;\n    });\n    _registerModule(_modules, 'Series/OHLC/OHLCPoint.js', [_modules['Core/Series/SeriesRegistry.js']], function (SeriesRegistry) {\n        /* *\n         *\n         *  (c) 2010-2024 Torstein Honsi\n         *\n         *  License: www.highcharts.com/license\n         *\n         *  !!!!!!! SOURCE GETS TRANSPILED BY TYPESCRIPT. EDIT TS FILE ONLY. !!!!!!!\n         *\n         * */\n        const { seriesTypes: { hlc: HLCSeries } } = SeriesRegistry;\n        /* *\n         *\n         *  Class\n         *\n         * */\n        class OHLCPoint extends HLCSeries.prototype.pointClass {\n            /* *\n             *\n             *  Functions\n             *\n             * */\n            /**\n             * Extend the parent method by adding up or down to the class name.\n             * @private\n             * @function Highcharts.seriesTypes.ohlc#getClassName\n             */\n            getClassName() {\n                return super.getClassName.call(this) +\n                    (this.open < this.close ?\n                        ' highcharts-point-up' :\n                        ' highcharts-point-down');\n            }\n            /**\n             * Save upColor as point color (#14826).\n             * @private\n             * @function Highcharts.seriesTypes.ohlc#resolveUpColor\n             */\n            resolveUpColor() {\n                if (this.open < this.close &&\n                    !this.options.color &&\n                    this.series.options.upColor) {\n                    this.color = this.series.options.upColor;\n                }\n            }\n            /**\n             * Extend the parent method by saving upColor.\n             * @private\n             * @function Highcharts.seriesTypes.ohlc#resolveColor\n             */\n            resolveColor() {\n                super.resolveColor();\n                if (!this.series.is('heikinashi')) {\n                    this.resolveUpColor();\n                }\n            }\n            /**\n             * Extend the parent method by saving upColor.\n             * @private\n             * @function Highcharts.seriesTypes.ohlc#getZone\n             *\n             * @return {Highcharts.SeriesZonesOptionsObject}\n             *         The zone item.\n             */\n            getZone() {\n                const zone = super.getZone();\n                this.resolveUpColor();\n                return zone;\n            }\n            /**\n             * Extend the parent method by resolving up/down colors (#15849)\n             * @private\n             **/\n            applyOptions() {\n                super.applyOptions.apply(this, arguments);\n                if (this.resolveColor) {\n                    this.resolveColor();\n                }\n                return this;\n            }\n        }\n        /* *\n         *\n         *  Default Export\n         *\n         * */\n\n        return OHLCPoint;\n    });\n    _registerModule(_modules, 'Series/OHLC/OHLCSeriesDefaults.js', [], function () {\n        /* *\n         *\n         *  (c) 2010-2024 Torstein Honsi\n         *\n         *  License: www.highcharts.com/license\n         *\n         *  !!!!!!! SOURCE GETS TRANSPILED BY TYPESCRIPT. EDIT TS FILE ONLY. !!!!!!!\n         *\n         * */\n        /* *\n         *\n         *  API Options\n         *\n         * */\n        /**\n         * An OHLC chart is a style of financial chart used to describe price\n         * movements over time. It displays open, high, low and close values per\n         * data point.\n         *\n         * @sample stock/demo/ohlc\n         *         OHLC chart\n         *\n         * @extends      plotOptions.hlc\n         * @product      highstock\n         * @optionparent plotOptions.ohlc\n         */\n        const OHLCSeriesDefaults = {\n            /**\n             * @type      {Highcharts.DataGroupingApproximationValue|Function}\n             * @default   ohlc\n             * @product   highstock\n             * @apioption plotOptions.ohlc.dataGrouping.approximation\n             */\n            /**\n             * Determines which one of  `open`, `high`, `low`, `close` values should\n             * be represented as `point.y`, which is later used to set dataLabel\n             * position and [compare](#plotOptions.series.compare).\n             *\n             * @declare    Highcharts.OptionsPointValKeyValue\n             * @default    close\n             * @validvalue [\"open\", \"high\", \"low\", \"close\"]\n             * @product    highstock\n             * @apioption  plotOptions.ohlc.pointValKey\n             */\n            /**\n             * Line color for up points.\n             *\n             * @type      {Highcharts.ColorString|Highcharts.GradientColorObject|Highcharts.PatternObject}\n             * @product   highstock\n             * @apioption plotOptions.ohlc.upColor\n             */\n            tooltip: {\n                pointFormat: '<span style=\"color:{point.color}\">\\u25CF</span> ' +\n                    '<b> {series.name}</b><br/>' +\n                    'Open: {point.open}<br/>' +\n                    'High: {point.high}<br/>' +\n                    'Low: {point.low}<br/>' +\n                    'Close: {point.close}<br/>'\n            }\n        };\n        /**\n         * The parameter allows setting line series type and use OHLC indicators.\n         * Data in OHLC format is required.\n         *\n         * @sample {highstock} stock/indicators/use-ohlc-data\n         *         Use OHLC data format to plot line chart\n         *\n         * @type      {boolean}\n         * @product   highstock\n         * @apioption plotOptions.line.useOhlcData\n         */\n        /**\n         * A `ohlc` series. If the [type](#series.ohlc.type) option is not\n         * specified, it is inherited from [chart.type](#chart.type).\n         *\n         * @extends   series,plotOptions.ohlc\n         * @excluding dataParser, dataURL\n         * @product   highstock\n         * @apioption series.ohlc\n         */\n        /**\n         * An array of data points for the series. For the `ohlc` series type,\n         * points can be given in the following ways:\n         *\n         * 1. An array of arrays with 5 or 4 values. In this case, the values correspond\n         *    to `x,open,high,low,close`. If the first value is a string, it is applied\n         *    as the name of the point, and the `x` value is inferred. The `x` value can\n         *    also be omitted, in which case the inner arrays should be of length 4\\.\n         *    Then the `x` value is automatically calculated, either starting at 0 and\n         *    incremented by 1, or from `pointStart` and `pointInterval` given in the\n         *    series options.\n         *    ```js\n         *    data: [\n         *        [0, 6, 5, 6, 7],\n         *        [1, 9, 4, 8, 2],\n         *        [2, 6, 3, 4, 10]\n         *    ]\n         *    ```\n         *\n         * 2. An array of objects with named values. The following snippet shows only a\n         *    few settings, see the complete options set below. If the total number of\n         *    data points exceeds the series'\n         *    [turboThreshold](#series.ohlc.turboThreshold), this option is not\n         *    available.\n         *    ```js\n         *    data: [{\n         *        x: 1,\n         *        open: 3,\n         *        high: 4,\n         *        low: 5,\n         *        close: 2,\n         *        name: \"Point2\",\n         *        color: \"#00FF00\"\n         *    }, {\n         *        x: 1,\n         *        open: 4,\n         *        high: 3,\n         *        low: 6,\n         *        close: 7,\n         *        name: \"Point1\",\n         *        color: \"#FF00FF\"\n         *    }]\n         *    ```\n         *\n         * @type      {Array<Array<(number|string),number,number,number>|Array<(number|string),number,number,number,number>|*>}\n         * @extends   series.arearange.data\n         * @excluding y, marker\n         * @product   highstock\n         * @apioption series.ohlc.data\n         */\n        /**\n         * The closing value of each data point.\n         *\n         * @type      {number}\n         * @product   highstock\n         * @apioption series.ohlc.data.close\n         */\n        /**\n         * The opening value of each data point.\n         *\n         * @type      {number}\n         * @product   highstock\n         * @apioption series.ohlc.data.open\n         */\n        ''; // adds doclets above to transpiled\n        /* *\n         *\n         *  Default Export\n         *\n         * */\n\n        return OHLCSeriesDefaults;\n    });\n    _registerModule(_modules, 'Series/OHLC/OHLCSeries.js', [_modules['Core/Globals.js'], _modules['Series/OHLC/OHLCPoint.js'], _modules['Series/OHLC/OHLCSeriesDefaults.js'], _modules['Core/Series/SeriesRegistry.js'], _modules['Core/Utilities.js']], function (H, OHLCPoint, OHLCSeriesDefaults, SeriesRegistry, U) {\n        /* *\n         *\n         *  (c) 2010-2024 Torstein Honsi\n         *\n         *  License: www.highcharts.com/license\n         *\n         *  !!!!!!! SOURCE GETS TRANSPILED BY TYPESCRIPT. EDIT TS FILE ONLY. !!!!!!!\n         *\n         * */\n        const { composed } = H;\n        const { hlc: HLCSeries } = SeriesRegistry.seriesTypes;\n        const { addEvent, extend, merge, pushUnique } = U;\n        /* *\n         *\n         *  Functions\n         *\n         * */\n        /**\n         * @private\n         */\n        function onSeriesAfterSetOptions(e) {\n            const options = e.options, dataGrouping = options.dataGrouping;\n            if (dataGrouping &&\n                options.useOhlcData &&\n                options.id !== 'highcharts-navigator-series') {\n                dataGrouping.approximation = 'ohlc';\n            }\n        }\n        /**\n         * Add useOhlcData option\n         * @private\n         */\n        function onSeriesInit(eventOptions) {\n            // eslint-disable-next-line no-invalid-this\n            const series = this, options = eventOptions.options;\n            if (options.useOhlcData &&\n                options.id !== 'highcharts-navigator-series') {\n                extend(series, {\n                    pointValKey: OHLCSeries.prototype.pointValKey,\n                    // keys: ohlcProto.keys, // @todo potentially nonsense\n                    pointArrayMap: OHLCSeries.prototype.pointArrayMap,\n                    toYData: OHLCSeries.prototype.toYData\n                });\n            }\n        }\n        /* *\n         *\n         *  Class\n         *\n         * */\n        /**\n         * The ohlc series type.\n         *\n         * @private\n         * @class\n         * @name Highcharts.seriesTypes.ohlc\n         *\n         * @augments Highcharts.Series\n         */\n        class OHLCSeries extends HLCSeries {\n            /* *\n             *\n             *  Static Functions\n             *\n             * */\n            static compose(SeriesClass, ..._args) {\n                if (pushUnique(composed, 'OHLCSeries')) {\n                    addEvent(SeriesClass, 'afterSetOptions', onSeriesAfterSetOptions);\n                    addEvent(SeriesClass, 'init', onSeriesInit);\n                }\n            }\n            /* *\n             *\n             *  Functions\n             *\n             * */\n            getPointPath(point, graphic) {\n                const path = super.getPointPath(point, graphic), strokeWidth = graphic.strokeWidth(), crispCorr = (strokeWidth % 2) / 2, crispX = Math.round(point.plotX) - crispCorr, halfWidth = Math.round(point.shapeArgs.width / 2);\n                let plotOpen = point.plotOpen;\n                // crisp vector coordinates\n                if (point.open !== null) {\n                    plotOpen = Math.round(point.plotOpen) + crispCorr;\n                    path.push(['M', crispX, plotOpen], ['L', crispX - halfWidth, plotOpen]);\n                    super.extendStem(path, strokeWidth / 2, plotOpen);\n                }\n                return path;\n            }\n            /**\n             * Postprocess mapping between options and SVG attributes\n             * @private\n             */\n            pointAttribs(point, state) {\n                const attribs = super.pointAttribs.call(this, point, state), options = this.options;\n                delete attribs.fill;\n                if (!point.options.color &&\n                    options.upColor &&\n                    point.open < point.close) {\n                    attribs.stroke = options.upColor;\n                }\n                return attribs;\n            }\n            toYData(point) {\n                // return a plain array for speedy calculation\n                return [point.open, point.high, point.low, point.close];\n            }\n        }\n        /* *\n         *\n         *  Static Properties\n         *\n         * */\n        OHLCSeries.defaultOptions = merge(HLCSeries.defaultOptions, OHLCSeriesDefaults);\n        extend(OHLCSeries.prototype, {\n            pointClass: OHLCPoint,\n            pointArrayMap: ['open', 'high', 'low', 'close']\n        });\n        SeriesRegistry.registerSeriesType('ohlc', OHLCSeries);\n        /* *\n         *\n         *  Default Export\n         *\n         * */\n\n        return OHLCSeries;\n    });\n    _registerModule(_modules, 'Series/Candlestick/CandlestickSeriesDefaults.js', [], function () {\n        /* *\n         *\n         *  (c) 2010-2024 Torstein Honsi\n         *\n         *  License: www.highcharts.com/license\n         *\n         *  !!!!!!! SOURCE GETS TRANSPILED BY TYPESCRIPT. EDIT TS FILE ONLY. !!!!!!!\n         *\n         * */\n        /* *\n         *\n         *  API Options\n         *\n         * */\n        /**\n         * A candlestick chart is a style of financial chart used to describe\n         * price movements over time.\n         *\n         * @sample stock/demo/candlestick/\n         *         Candlestick chart\n         *\n         * @extends      plotOptions.ohlc\n         * @excluding    borderColor,borderRadius,borderWidth\n         * @product      highstock\n         * @optionparent plotOptions.candlestick\n         */\n        const CandlestickSeriesDefaults = {\n            /**\n             * The specific line color for up candle sticks. The default is to\n             * inherit the general `lineColor` setting.\n             *\n             * @sample {highstock} stock/plotoptions/candlestick-linecolor/\n             *         Candlestick line colors\n             *\n             * @type      {Highcharts.ColorString|Highcharts.GradientColorObject|Highcharts.PatternObject}\n             * @since     1.3.6\n             * @product   highstock\n             * @apioption plotOptions.candlestick.upLineColor\n             */\n            states: {\n                /**\n                 * @extends plotOptions.column.states.hover\n                 * @product highstock\n                 */\n                hover: {\n                    /**\n                     * The pixel width of the line/border around the\n                     * candlestick.\n                     *\n                     * @product highstock\n                     */\n                    lineWidth: 2\n                }\n            },\n            /**\n             * @type    {number|null}\n             * @product highstock\n             */\n            threshold: null,\n            /**\n             * The color of the line/border of the candlestick.\n             *\n             * In styled mode, the line stroke can be set with the\n             * `.highcharts-candlestick-series .highcahrts-point` rule.\n             *\n             * @see [upLineColor](#plotOptions.candlestick.upLineColor)\n             *\n             * @sample {highstock} stock/plotoptions/candlestick-linecolor/\n             *         Candlestick line colors\n             *\n             * @type    {Highcharts.ColorString|Highcharts.GradientColorObject|Highcharts.PatternObject}\n             * @default #000000\n             * @product highstock\n             */\n            lineColor: \"#000000\" /* Palette.neutralColor100 */,\n            /**\n             * The pixel width of the candlestick line/border. Defaults to `1`.\n             *\n             *\n             * In styled mode, the line stroke width can be set with the\n             * `.highcharts-candlestick-series .highcahrts-point` rule.\n             *\n             * @product highstock\n             */\n            lineWidth: 1,\n            /**\n             * The fill color of the candlestick when values are rising.\n             *\n             * In styled mode, the up color can be set with the\n             * `.highcharts-candlestick-series .highcharts-point-up` rule.\n             *\n             * @sample {highstock} stock/plotoptions/candlestick-color/\n             *         Custom colors\n             * @sample {highstock} highcharts/css/candlestick/\n             *         Colors in styled mode\n             *\n             * @type    {Highcharts.ColorString|Highcharts.GradientColorObject|Highcharts.PatternObject}\n             * @default #ffffff\n             * @product highstock\n            */\n            upColor: \"#ffffff\" /* Palette.backgroundColor */,\n            /**\n             * @product highstock\n             */\n            stickyTracking: true\n        };\n        /**\n         * A `candlestick` series. If the [type](#series.candlestick.type)\n         * option is not specified, it is inherited from [chart.type](\n         * #chart.type).\n         *\n         * @type      {*}\n         * @extends   series,plotOptions.candlestick\n         * @excluding dataParser, dataURL, marker\n         * @product   highstock\n         * @apioption series.candlestick\n         */\n        /**\n         * An array of data points for the series. For the `candlestick` series\n         * type, points can be given in the following ways:\n         *\n         * 1. An array of arrays with 5 or 4 values. In this case, the values correspond\n         *    to `x,open,high,low,close`. If the first value is a string, it is applied\n         *    as the name of the point, and the `x` value is inferred. The `x` value can\n         *    also be omitted, in which case the inner arrays should be of length 4.\n         *    Then the `x` value is automatically calculated, either starting at 0 and\n         *    incremented by 1, or from `pointStart` and `pointInterval` given in the\n         *    series options.\n         *    ```js\n         *    data: [\n         *        [0, 7, 2, 0, 4],\n         *        [1, 1, 4, 2, 8],\n         *        [2, 3, 3, 9, 3]\n         *    ]\n         *    ```\n         *\n         * 2. An array of objects with named values. The following snippet shows only a\n         *    few settings, see the complete options set below. If the total number of\n         *    data points exceeds the series'\n         *    [turboThreshold](#series.candlestick.turboThreshold), this option is not\n         *    available.\n         *    ```js\n         *    data: [{\n         *        x: 1,\n         *        open: 9,\n         *        high: 2,\n         *        low: 4,\n         *        close: 6,\n         *        name: \"Point2\",\n         *        color: \"#00FF00\"\n         *    }, {\n         *        x: 1,\n         *        open: 1,\n         *        high: 4,\n         *        low: 7,\n         *        close: 7,\n         *        name: \"Point1\",\n         *        color: \"#FF00FF\"\n         *    }]\n         *    ```\n         *\n         * @type      {Array<Array<(number|string),number,number,number>|Array<(number|string),number,number,number,number>|*>}\n         * @extends   series.ohlc.data\n         * @excluding y\n         * @product   highstock\n         * @apioption series.candlestick.data\n         */\n        ''; // adds doclets above to transpiled\n        /* *\n         *\n         *  Default Export\n         *\n         * */\n\n        return CandlestickSeriesDefaults;\n    });\n    _registerModule(_modules, 'Series/Candlestick/CandlestickSeries.js', [_modules['Series/Candlestick/CandlestickSeriesDefaults.js'], _modules['Core/Defaults.js'], _modules['Core/Series/SeriesRegistry.js'], _modules['Core/Utilities.js']], function (CandlestickSeriesDefaults, D, SeriesRegistry, U) {\n        /* *\n         *\n         *  (c) 2010-2024 Torstein Honsi\n         *\n         *  License: www.highcharts.com/license\n         *\n         *  !!!!!!! SOURCE GETS TRANSPILED BY TYPESCRIPT. EDIT TS FILE ONLY. !!!!!!!\n         *\n         * */\n        const { defaultOptions } = D;\n        const { column: ColumnSeries, ohlc: OHLCSeries } = SeriesRegistry.seriesTypes;\n        const { merge } = U;\n        /* *\n         *\n         *  Class\n         *\n         * */\n        /**\n         * The candlestick series type.\n         *\n         * @private\n         * @class\n         * @name Highcharts.seriesTypes.candlestick\n         *\n         * @augments Highcharts.seriesTypes.ohlc\n         */\n        class CandlestickSeries extends OHLCSeries {\n            /* *\n             *\n             *  Functions\n             *\n             * */\n            /**\n             * Postprocess mapping between options and SVG attributes\n             *\n             * @private\n             * @function Highcharts.seriesTypes.candlestick#pointAttribs\n             */\n            pointAttribs(point, state) {\n                const attribs = ColumnSeries.prototype.pointAttribs.call(this, point, state), options = this.options, isUp = point.open < point.close, stroke = options.lineColor || this.color, color = point.color || this.color; // (#14826)\n                attribs['stroke-width'] = options.lineWidth;\n                attribs.fill = point.options.color ||\n                    (isUp ? (options.upColor || color) : color);\n                attribs.stroke = point.options.lineColor ||\n                    (isUp ? (options.upLineColor || stroke) : stroke);\n                // Select or hover states\n                if (state) {\n                    const stateOptions = options.states[state];\n                    attribs.fill = stateOptions.color || attribs.fill;\n                    attribs.stroke = stateOptions.lineColor || attribs.stroke;\n                    attribs['stroke-width'] =\n                        stateOptions.lineWidth || attribs['stroke-width'];\n                }\n                return attribs;\n            }\n            /**\n             * Draw the data points.\n             *\n             * @private\n             * @function Highcharts.seriesTypes.candlestick#drawPoints\n             */\n            drawPoints() {\n                const series = this, points = series.points, chart = series.chart, reversedYAxis = series.yAxis.reversed;\n                for (const point of points) {\n                    let graphic = point.graphic, plotOpen, plotClose, topBox, bottomBox, hasTopWhisker, hasBottomWhisker, crispCorr, crispX, path, halfWidth;\n                    const isNew = !graphic;\n                    if (typeof point.plotY !== 'undefined') {\n                        if (!graphic) {\n                            point.graphic = graphic = chart.renderer.path()\n                                .add(series.group);\n                        }\n                        if (!series.chart.styledMode) {\n                            graphic\n                                .attr(series.pointAttribs(point, (point.selected && 'select'))) // #3897\n                                .shadow(series.options.shadow);\n                        }\n                        // Crisp vector coordinates\n                        crispCorr = (graphic.strokeWidth() % 2) / 2;\n                        // #2596:\n                        crispX = Math.round(point.plotX) - crispCorr;\n                        plotOpen = point.plotOpen;\n                        plotClose = point.plotClose;\n                        topBox = Math.min(plotOpen, plotClose);\n                        bottomBox = Math.max(plotOpen, plotClose);\n                        halfWidth = Math.round(point.shapeArgs.width / 2);\n                        hasTopWhisker = reversedYAxis ?\n                            bottomBox !== point.yBottom :\n                            Math.round(topBox) !==\n                                Math.round(point.plotHigh);\n                        hasBottomWhisker = reversedYAxis ?\n                            Math.round(topBox) !==\n                                Math.round(point.plotHigh) :\n                            bottomBox !== point.yBottom;\n                        topBox = Math.round(topBox) + crispCorr;\n                        bottomBox = Math.round(bottomBox) + crispCorr;\n                        // Create the path. Due to a bug in Chrome 49, the path is\n                        // first instantiated with no values, then the values\n                        // pushed. For unknown reasons, instantiating the path array\n                        // with all the values would lead to a crash when updating\n                        // frequently (#5193).\n                        path = [];\n                        path.push(['M', crispX - halfWidth, bottomBox], ['L', crispX - halfWidth, topBox], ['L', crispX + halfWidth, topBox], ['L', crispX + halfWidth, bottomBox], ['Z'], // Ensure a nice rectangle #2602\n                        ['M', crispX, topBox], [\n                            'L',\n                            // #460, #2094\n                            crispX,\n                            hasTopWhisker ?\n                                Math.round(reversedYAxis ?\n                                    point.yBottom :\n                                    point.plotHigh) :\n                                topBox\n                        ], ['M', crispX, bottomBox], [\n                            'L',\n                            // #460, #2094\n                            crispX,\n                            hasBottomWhisker ?\n                                Math.round(reversedYAxis ?\n                                    point.plotHigh :\n                                    point.yBottom) :\n                                bottomBox\n                        ]);\n                        graphic[isNew ? 'attr' : 'animate']({ d: path })\n                            .addClass(point.getClassName(), true);\n                    }\n                }\n            }\n        }\n        /* *\n         *\n         *  Static Properties\n         *\n         * */\n        CandlestickSeries.defaultOptions = merge(OHLCSeries.defaultOptions, defaultOptions.plotOptions, { tooltip: OHLCSeries.defaultOptions.tooltip }, CandlestickSeriesDefaults);\n        SeriesRegistry.registerSeriesType('candlestick', CandlestickSeries);\n        /* *\n         *\n         *  Default Export\n         *\n         * */\n\n        return CandlestickSeries;\n    });\n    _registerModule(_modules, 'Series/Flags/FlagsPoint.js', [_modules['Core/Series/SeriesRegistry.js'], _modules['Core/Utilities.js']], function (SeriesRegistry, U) {\n        /* *\n         *\n         *  (c) 2010-2024 Torstein Honsi\n         *\n         *  License: www.highcharts.com/license\n         *\n         *  !!!!!!! SOURCE GETS TRANSPILED BY TYPESCRIPT. EDIT TS FILE ONLY. !!!!!!!\n         *\n         * */\n        const { column: { prototype: { pointClass: ColumnPoint } } } = SeriesRegistry.seriesTypes;\n        const { isNumber } = U;\n        /* *\n         *\n         *  Class\n         *\n         * */\n        class FlagsPoint extends ColumnPoint {\n            constructor() {\n                /* *\n                 *\n                 *  Properties\n                 *\n                 * */\n                super(...arguments);\n                this.ttBelow = false;\n            }\n            /* *\n             *\n             *  Functions\n             *\n             * */\n            /**\n             * @private\n             */\n            isValid() {\n                // #9233 - Prevent from treating flags as null points (even if\n                // they have no y values defined).\n                return isNumber(this.y) || typeof this.y === 'undefined';\n            }\n            /**\n             * @private\n             */\n            hasNewShapeType() {\n                const shape = this.options.shape || this.series.options.shape;\n                return this.graphic && shape && shape !== this.graphic.symbolKey;\n            }\n        }\n        /* *\n         *\n         *  Default Export\n         *\n         * */\n\n        return FlagsPoint;\n    });\n    _registerModule(_modules, 'Series/Flags/FlagsSeriesDefaults.js', [], function () {\n        /* *\n         *\n         *  (c) 2010-2024 Torstein Honsi\n         *\n         *  License: www.highcharts.com/license\n         *\n         *  !!!!!!! SOURCE GETS TRANSPILED BY TYPESCRIPT. EDIT TS FILE ONLY. !!!!!!!\n         *\n         * */\n        /* *\n         *\n         *  API Options\n         *\n         * */\n        /**\n         * Flags are used to mark events in stock charts. They can be added on the\n         * timeline, or attached to a specific series.\n         *\n         * @sample stock/demo/flags-general/\n         *         Flags on a line series\n         *\n         * @extends      plotOptions.column\n         * @excluding    animation, borderColor, borderRadius, borderWidth,\n         *               colorByPoint, cropThreshold, dataGrouping, pointPadding,\n         *               pointWidth, turboThreshold\n         * @product      highstock\n         * @optionparent plotOptions.flags\n         */\n        const FlagsSeriesDefaults = {\n            /**\n             * In case the flag is placed on a series, on what point key to place\n             * it. Line and columns have one key, `y`. In range or OHLC-type series,\n             * however, the flag can optionally be placed on the `open`, `high`,\n             * `low` or `close` key.\n             *\n             * @sample {highstock} stock/plotoptions/flags-onkey/\n             *         Range series, flag on high\n             *\n             * @type       {string}\n             * @default    y\n             * @since      4.2.2\n             * @product    highstock\n             * @validvalue [\"y\", \"open\", \"high\", \"low\", \"close\"]\n             * @apioption  plotOptions.flags.onKey\n             */\n            /**\n             * The id of the series that the flags should be drawn on. If no id\n             * is given, the flags are drawn on the x axis.\n             *\n             * @sample {highstock} stock/plotoptions/flags/\n             *         Flags on series and on x axis\n             *\n             * @type      {string}\n             * @product   highstock\n             * @apioption plotOptions.flags.onSeries\n             */\n            pointRange: 0,\n            /**\n             * Whether the flags are allowed to overlap sideways. If `false`, the\n             * flags are moved sideways using an algorithm that seeks to place every\n             * flag as close as possible to its original position.\n             *\n             * @sample {highstock} stock/plotoptions/flags-allowoverlapx\n             *         Allow sideways overlap\n             *\n             * @since 6.0.4\n             */\n            allowOverlapX: false,\n            /**\n             * The shape of the marker. Can be one of \"flag\", \"circlepin\",\n             * \"squarepin\", or an image of the format `url(/path-to-image.jpg)`.\n             * Individual shapes can also be set for each point.\n             *\n             * @sample {highstock} stock/plotoptions/flags/\n             *         Different shapes\n             *\n             * @type    {Highcharts.FlagsShapeValue}\n             * @product highstock\n             */\n            shape: 'flag',\n            /**\n             * When multiple flags in the same series fall on the same value, this\n             * number determines the vertical offset between them.\n             *\n             * @sample {highstock} stock/plotoptions/flags-stackdistance/\n             *         A greater stack distance\n             *\n             * @product highstock\n             */\n            stackDistance: 12,\n            /**\n             * Text alignment for the text inside the flag.\n             *\n             * @since      5.0.0\n             * @product    highstock\n             * @validvalue [\"left\", \"center\", \"right\"]\n             */\n            textAlign: 'center',\n            /**\n             * Specific tooltip options for flag series. Flag series tooltips are\n             * different from most other types in that a flag doesn't have a data\n             * value, so the tooltip rather displays the `text` option for each\n             * point.\n             *\n             * @extends   plotOptions.series.tooltip\n             * @excluding changeDecimals, valueDecimals, valuePrefix, valueSuffix\n             * @product   highstock\n             */\n            tooltip: {\n                pointFormat: '{point.text}'\n            },\n            /**\n             * @type {number|null}\n             */\n            threshold: null,\n            /**\n             * The text to display on each flag. This can be defined on series\n             * level, or individually for each point. Defaults to `\"A\"`.\n             *\n             * @type      {string}\n             * @default   A\n             * @product   highstock\n             * @apioption plotOptions.flags.title\n             */\n            /**\n             * The y position of the top left corner of the flag relative to either\n             * the series (if onSeries is defined), or the x axis. Defaults to\n             * `-30`.\n             *\n             * @product highstock\n             */\n            y: -30,\n            /**\n             * Whether to use HTML to render the flag texts. Using HTML allows for\n             * advanced formatting, images and reliable bi-directional text\n             * rendering. Note that exported images won't respect the HTML, and that\n             * HTML won't respect Z-index settings.\n             *\n             * @type      {boolean}\n             * @default   false\n             * @since     1.3\n             * @product   highstock\n             * @apioption plotOptions.flags.useHTML\n             */\n            /**\n             * Fixed width of the flag's shape. By default, width is autocalculated\n             * according to the flag's title.\n             *\n             * @sample {highstock} stock/demo/flags-shapes/\n             *         Flags with fixed width\n             *\n             * @type      {number}\n             * @product   highstock\n             * @apioption plotOptions.flags.width\n             */\n            /**\n             * Fixed height of the flag's shape. By default, height is\n             * autocalculated according to the flag's title.\n             *\n             * @type      {number}\n             * @product   highstock\n             * @apioption plotOptions.flags.height\n             */\n            /**\n             * The fill color for the flags.\n             *\n             * @type    {Highcharts.ColorString|Highcharts.GradientColorObject|Highcharts.PatternObject}\n             * @product highstock\n             */\n            fillColor: \"#ffffff\" /* Palette.backgroundColor */,\n            /**\n             * The color of the line/border of the flag.\n             *\n             * In styled mode, the stroke is set in the\n             * `.highcharts-flag-series.highcharts-point` rule.\n             *\n             * @type      {Highcharts.ColorString|Highcharts.GradientColorObject|Highcharts.PatternObject}\n             * @default   #000000\n             * @product   highstock\n             * @apioption plotOptions.flags.lineColor\n             */\n            /**\n             * The pixel width of the flag's line/border.\n             *\n             * @product highstock\n             */\n            lineWidth: 1,\n            states: {\n                /**\n                 * @extends plotOptions.column.states.hover\n                 * @product highstock\n                 */\n                hover: {\n                    /**\n                     * The color of the line/border of the flag.\n                     *\n                     * @type    {Highcharts.ColorString|Highcharts.GradientColorObject|Highcharts.PatternObject}\n                     * @product highstock\n                     */\n                    lineColor: \"#000000\" /* Palette.neutralColor100 */,\n                    /**\n                     * The fill or background color of the flag.\n                     *\n                     * @type    {Highcharts.ColorString|Highcharts.GradientColorObject|Highcharts.PatternObject}\n                     * @product highstock\n                     */\n                    fillColor: \"#ccd3ff\" /* Palette.highlightColor20 */\n                }\n            },\n            /**\n             * The text styles of the flag.\n             *\n             * In styled mode, the styles are set in the\n             * `.highcharts-flag-series .highcharts-point` rule.\n             *\n             * @type    {Highcharts.CSSObject}\n             * @default {\"fontSize\": \"11px\", \"fontWeight\": \"bold\"}\n             * @product highstock\n             */\n            style: {\n                /** @ignore-option */\n                fontSize: '0.7em',\n                /** @ignore-option */\n                fontWeight: 'bold'\n            }\n        };\n        /**\n         * A `flags` series. If the [type](#series.flags.type) option is not\n         * specified, it is inherited from [chart.type](#chart.type).\n         *\n         * @extends   series,plotOptions.flags\n         * @excluding animation, borderColor, borderRadius, borderWidth, colorByPoint,\n         *            connectNulls, cropThreshold, dashStyle, dataGrouping, dataParser,\n         *            dataURL, gapSize, gapUnit, linecap, lineWidth, marker,\n         *            pointPadding, pointWidth, step, turboThreshold, useOhlcData\n         * @product   highstock\n         * @apioption series.flags\n         */\n        /**\n         * An array of data points for the series. For the `flags` series type,\n         * points can be given in the following ways:\n         *\n         * 1. An array of objects with named values. The following snippet shows only a\n         *    few settings, see the complete options set below. If the total number of\n         *    data points exceeds the series'\n         *    [turboThreshold](#series.flags.turboThreshold), this option is not\n         *    available.\n         *    ```js\n         *    data: [{\n         *        x: 1,\n         *        title: \"A\",\n         *        text: \"First event\"\n         *    }, {\n         *        x: 1,\n         *        title: \"B\",\n         *        text: \"Second event\"\n         *    }]\n         *    ```\n         *\n         * @type      {Array<*>}\n         * @extends   series.line.data\n         * @excluding dataLabels, marker, name, y\n         * @product   highstock\n         * @apioption series.flags.data\n         */\n        /**\n         * The fill color of an individual flag. By default it inherits from\n         * the series color.\n         *\n         * @type      {Highcharts.ColorString|Highcharts.GradientColorObject|Highcharts.PatternObject}\n         * @product   highstock\n         * @apioption series.flags.data.fillColor\n         */\n        /**\n         * The longer text to be shown in the flag's tooltip.\n         *\n         * @type      {string}\n         * @product   highstock\n         * @apioption series.flags.data.text\n         */\n        /**\n         * The short text to be shown on the flag.\n         *\n         * @type      {string}\n         * @product   highstock\n         * @apioption series.flags.data.title\n         */\n        ''; // keeps doclets above in transpiled file\n        /* *\n         *\n         *  Default Export\n         *\n         * */\n\n        return FlagsSeriesDefaults;\n    });\n    _registerModule(_modules, 'Series/Flags/FlagsSymbols.js', [_modules['Core/Renderer/RendererRegistry.js']], function (RendererRegistry) {\n        /* *\n         *\n         *  Imports\n         *\n         * */\n        /* *\n         *\n         *  Composition\n         *\n         * */\n        var FlagsSymbols;\n        (function (FlagsSymbols) {\n            /* *\n             *\n             *  Constants\n             *\n             * */\n            const modifiedMembers = [];\n            /* *\n             *\n             *  Functions\n             *\n             * */\n            /* eslint-disable valid-jsdoc */\n            /**\n             * @private\n             */\n            function compose(SVGRendererClass) {\n                if (modifiedMembers.indexOf(SVGRendererClass) === -1) {\n                    modifiedMembers.push(SVGRendererClass);\n                    const symbols = SVGRendererClass.prototype.symbols;\n                    symbols.flag = flag;\n                    createPinSymbol(symbols, 'circle');\n                    createPinSymbol(symbols, 'square');\n                }\n                const RendererClass = RendererRegistry.getRendererType();\n                // The symbol callbacks are generated on the SVGRenderer object in all\n                // browsers.\n                if (modifiedMembers.indexOf(RendererClass)) {\n                    modifiedMembers.push(RendererClass);\n                }\n            }\n            FlagsSymbols.compose = compose;\n            /**\n             * Create the flag icon with anchor.\n             * @private\n             */\n            function flag(x, y, w, h, options) {\n                const anchorX = (options && options.anchorX) || x, anchorY = (options && options.anchorY) || y;\n                // To do: unwanted any cast because symbols.circle has wrong type, it\n                // actually returns an SVGPathArray\n                const path = this.circle(anchorX - 1, anchorY - 1, 2, 2);\n                path.push(['M', anchorX, anchorY], ['L', x, y + h], ['L', x, y], ['L', x + w, y], ['L', x + w, y + h], ['L', x, y + h], ['Z']);\n                return path;\n            }\n            /**\n             * Create the circlepin and squarepin icons with anchor.\n             * @private\n             */\n            function createPinSymbol(symbols, shape) {\n                symbols[(shape + 'pin')] = function (x, y, w, h, options) {\n                    const anchorX = options && options.anchorX, anchorY = options && options.anchorY;\n                    let path;\n                    // For single-letter flags, make sure circular flags are not taller\n                    // than their width\n                    if (shape === 'circle' && h > w) {\n                        x -= Math.round((h - w) / 2);\n                        w = h;\n                    }\n                    path = (symbols[shape])(x, y, w, h);\n                    if (anchorX && anchorY) {\n                        /**\n                         * If the label is below the anchor, draw the connecting line\n                         * from the top edge of the label, otherwise start drawing from\n                         * the bottom edge\n                         */\n                        let labelX = anchorX;\n                        if (shape === 'circle') {\n                            labelX = x + w / 2;\n                        }\n                        else {\n                            const startSeg = path[0];\n                            const endSeg = path[1];\n                            if (startSeg[0] === 'M' && endSeg[0] === 'L') {\n                                labelX = (startSeg[1] + endSeg[1]) / 2;\n                            }\n                        }\n                        const labelY = (y > anchorY) ? y : y + h;\n                        path.push([\n                            'M',\n                            labelX,\n                            labelY\n                        ], [\n                            'L',\n                            anchorX,\n                            anchorY\n                        ]);\n                        path = path.concat(symbols.circle(anchorX - 1, anchorY - 1, 2, 2));\n                    }\n                    return path;\n                };\n            }\n        })(FlagsSymbols || (FlagsSymbols = {}));\n        /* *\n         *\n         *  Default Export\n         *\n         * */\n\n        return FlagsSymbols;\n    });\n    _registerModule(_modules, 'Series/OnSeriesComposition.js', [_modules['Series/Column/ColumnSeries.js'], _modules['Core/Globals.js'], _modules['Core/Series/Series.js'], _modules['Core/Utilities.js']], function (ColumnSeries, H, Series, U) {\n        /* *\n         *\n         *  (c) 2010-2024 Torstein Honsi\n         *\n         *  License: www.highcharts.com/license\n         *\n         *  !!!!!!! SOURCE GETS TRANSPILED BY TYPESCRIPT. EDIT TS FILE ONLY. !!!!!!!\n         *\n         * */\n        const { composed } = H;\n        const { prototype: columnProto } = ColumnSeries;\n        const { prototype: seriesProto } = Series;\n        const { defined, pushUnique, stableSort } = U;\n        /* *\n         *\n         *  Composition\n         *\n         * */\n        var OnSeriesComposition;\n        (function (OnSeriesComposition) {\n            /* *\n             *\n             *  Declarations\n             *\n             * */\n            /* *\n             *\n             *  Functions\n             *\n             * */\n            /**\n             * @private\n             */\n            function compose(SeriesClass) {\n                if (pushUnique(composed, 'OnSeries')) {\n                    const seriesProto = SeriesClass.prototype;\n                    seriesProto.getPlotBox = getPlotBox;\n                    seriesProto.translate = translate;\n                }\n                return SeriesClass;\n            }\n            OnSeriesComposition.compose = compose;\n            /**\n             * Override getPlotBox. If the onSeries option is valid, return the plot box\n             * of the onSeries, otherwise proceed as usual.\n             *\n             * @private\n             */\n            function getPlotBox(name) {\n                return seriesProto.getPlotBox.call((this.options.onSeries &&\n                    this.chart.get(this.options.onSeries)) || this, name);\n            }\n            OnSeriesComposition.getPlotBox = getPlotBox;\n            /**\n             * Extend the translate method by placing the point on the related series\n             *\n             * @private\n             */\n            function translate() {\n                columnProto.translate.apply(this);\n                const series = this, options = series.options, chart = series.chart, points = series.points, optionsOnSeries = options.onSeries, onSeries = (optionsOnSeries &&\n                    chart.get(optionsOnSeries)), step = onSeries && onSeries.options.step, onData = (onSeries && onSeries.points), inverted = chart.inverted, xAxis = series.xAxis, yAxis = series.yAxis;\n                let cursor = points.length - 1, point, lastPoint, onKey = options.onKey || 'y', i = onData && onData.length, xOffset = 0, leftPoint, lastX, rightPoint, currentDataGrouping, distanceRatio;\n                // relate to a master series\n                if (onSeries && onSeries.visible && i) {\n                    xOffset = (onSeries.pointXOffset || 0) + (onSeries.barW || 0) / 2;\n                    currentDataGrouping = onSeries.currentDataGrouping;\n                    lastX = (onData[i - 1].x +\n                        (currentDataGrouping ? currentDataGrouping.totalRange : 0)); // #2374\n                    // sort the data points\n                    stableSort(points, (a, b) => (a.x - b.x));\n                    onKey = 'plot' + onKey[0].toUpperCase() + onKey.substr(1);\n                    while (i-- && points[cursor]) {\n                        leftPoint = onData[i];\n                        point = points[cursor];\n                        point.y = leftPoint.y;\n                        if (leftPoint.x <= point.x &&\n                            typeof leftPoint[onKey] !== 'undefined') {\n                            if (point.x <= lastX) { // #803\n                                point.plotY = leftPoint[onKey];\n                                // interpolate between points, #666\n                                if (leftPoint.x < point.x &&\n                                    !step) {\n                                    rightPoint = onData[i + 1];\n                                    if (rightPoint &&\n                                        typeof rightPoint[onKey] !== 'undefined') {\n                                        // If the series is spline, calculate Y of the\n                                        // point on the bezier line. #19264\n                                        if (defined(point.plotX) &&\n                                            onSeries.is('spline')) {\n                                            leftPoint = leftPoint;\n                                            rightPoint = rightPoint;\n                                            const p0 = [\n                                                leftPoint.plotX || 0,\n                                                leftPoint.plotY || 0\n                                            ], p3 = [\n                                                rightPoint.plotX || 0,\n                                                rightPoint.plotY || 0\n                                            ], p1 = (leftPoint.controlPoints?.high ||\n                                                p0), p2 = (rightPoint.controlPoints?.low ||\n                                                p3), pixelThreshold = 0.25, maxIterations = 100, calculateCoord = (t, key) => (\n                                            // The parametric formula for the\n                                            // cubic Bezier curve.\n                                            Math.pow(1 - t, 3) * p0[key] +\n                                                3 * (1 - t) * (1 - t) * t *\n                                                    p1[key] + 3 * (1 - t) * t * t *\n                                                p2[key] + t * t * t * p3[key]);\n                                            let tMin = 0, tMax = 1, t;\n                                            // Find `t` of the parametric function of\n                                            // the bezier curve for the given `plotX`.\n                                            for (let i = 0; i < maxIterations; i++) {\n                                                const tMid = (tMin + tMax) / 2;\n                                                const xMid = calculateCoord(tMid, 0);\n                                                if (xMid === null) {\n                                                    break;\n                                                }\n                                                if (Math.abs(xMid - point.plotX) < pixelThreshold) {\n                                                    t = tMid;\n                                                    break;\n                                                }\n                                                if (xMid < point.plotX) {\n                                                    tMin = tMid;\n                                                }\n                                                else {\n                                                    tMax = tMid;\n                                                }\n                                            }\n                                            if (defined(t)) {\n                                                point.plotY =\n                                                    calculateCoord(t, 1);\n                                                point.y =\n                                                    yAxis.toValue(point.plotY, true);\n                                            }\n                                        }\n                                        else {\n                                            // the distance ratio, between 0 and 1\n                                            distanceRatio =\n                                                (point.x - leftPoint.x) /\n                                                    (rightPoint.x - leftPoint.x);\n                                            point.plotY +=\n                                                distanceRatio *\n                                                    // the plotY distance\n                                                    (rightPoint[onKey] - leftPoint[onKey]);\n                                            point.y +=\n                                                distanceRatio *\n                                                    (rightPoint.y - leftPoint.y);\n                                        }\n                                    }\n                                }\n                            }\n                            cursor--;\n                            i++; // check again for points in the same x position\n                            if (cursor < 0) {\n                                break;\n                            }\n                        }\n                    }\n                }\n                // Add plotY position and handle stacking\n                points.forEach((point, i) => {\n                    let stackIndex;\n                    point.plotX += xOffset; // #2049\n                    // Undefined plotY means the point is either on axis, outside series\n                    // range or hidden series. If the series is outside the range of the\n                    // x axis it should fall through with an undefined plotY, but then\n                    // we must remove the shapeArgs (#847). For inverted charts, we need\n                    // to calculate position anyway, because series.invertGroups is not\n                    // defined\n                    if (typeof point.plotY === 'undefined' || inverted) {\n                        if (point.plotX >= 0 &&\n                            point.plotX <= xAxis.len) {\n                            // We're inside xAxis range\n                            if (inverted) {\n                                point.plotY = xAxis.translate(point.x, 0, 1, 0, 1);\n                                point.plotX = defined(point.y) ?\n                                    yAxis.translate(point.y, 0, 0, 0, 1) :\n                                    0;\n                            }\n                            else {\n                                point.plotY = (xAxis.opposite ? 0 : series.yAxis.len) +\n                                    xAxis.offset; // For the windbarb demo\n                            }\n                        }\n                        else {\n                            point.shapeArgs = {}; // 847\n                        }\n                    }\n                    // if multiple flags appear at the same x, order them into a stack\n                    lastPoint = points[i - 1];\n                    if (lastPoint && lastPoint.plotX === point.plotX) {\n                        if (typeof lastPoint.stackIndex === 'undefined') {\n                            lastPoint.stackIndex = 0;\n                        }\n                        stackIndex = lastPoint.stackIndex + 1;\n                    }\n                    point.stackIndex = stackIndex; // #3639\n                });\n                this.onSeries = onSeries;\n            }\n            OnSeriesComposition.translate = translate;\n        })(OnSeriesComposition || (OnSeriesComposition = {}));\n        /* *\n         *\n         *  Default Export\n         *\n         * */\n\n        return OnSeriesComposition;\n    });\n    _registerModule(_modules, 'Series/Flags/FlagsSeries.js', [_modules['Series/Flags/FlagsPoint.js'], _modules['Series/Flags/FlagsSeriesDefaults.js'], _modules['Series/Flags/FlagsSymbols.js'], _modules['Core/Globals.js'], _modules['Series/OnSeriesComposition.js'], _modules['Core/Renderer/RendererUtilities.js'], _modules['Core/Series/SeriesRegistry.js'], _modules['Core/Renderer/SVG/SVGElement.js'], _modules['Core/Utilities.js']], function (FlagsPoint, FlagsSeriesDefaults, FlagsSymbols, H, OnSeriesComposition, R, SeriesRegistry, SVGElement, U) {\n        /* *\n         *\n         *  (c) 2010-2024 Torstein Honsi\n         *\n         *  License: www.highcharts.com/license\n         *\n         *  !!!!!!! SOURCE GETS TRANSPILED BY TYPESCRIPT. EDIT TS FILE ONLY. !!!!!!!\n         *\n         * */\n        const { noop } = H;\n        const { distribute } = R;\n        const { series: Series, seriesTypes: { column: ColumnSeries } } = SeriesRegistry;\n        const { addEvent, defined, extend, merge, objectEach, wrap } = U;\n        /* *\n         *\n         *  Classes\n         *\n         * */\n        /**\n         * The Flags series.\n         *\n         * @private\n         * @class\n         * @name Highcharts.seriesTypes.flags\n         *\n         * @augments Highcharts.Series\n         */\n        class FlagsSeries extends ColumnSeries {\n            /* *\n             *\n             *  Functions\n             *\n             * */\n            /**\n             * Disable animation, but keep clipping (#8546).\n             * @private\n             */\n            animate(init) {\n                if (init) {\n                    this.setClip();\n                }\n            }\n            /**\n             * Draw the markers.\n             * @private\n             */\n            drawPoints() {\n                const series = this, points = series.points, chart = series.chart, renderer = chart.renderer, inverted = chart.inverted, options = series.options, optionsY = options.y, yAxis = series.yAxis, boxesMap = {}, boxes = [];\n                let plotX, plotY, shape, i, point, graphic, stackIndex, anchorY, attribs, outsideRight, centered;\n                i = points.length;\n                while (i--) {\n                    point = points[i];\n                    outsideRight =\n                        (inverted ? point.plotY : point.plotX) >\n                            series.xAxis.len;\n                    plotX = point.plotX;\n                    stackIndex = point.stackIndex;\n                    shape = point.options.shape || options.shape;\n                    plotY = point.plotY;\n                    if (typeof plotY !== 'undefined') {\n                        plotY = point.plotY + optionsY -\n                            (typeof stackIndex !== 'undefined' &&\n                                (stackIndex * options.stackDistance));\n                    }\n                    // skip connectors for higher level stacked points\n                    point.anchorX = stackIndex ? void 0 : point.plotX;\n                    anchorY = stackIndex ? void 0 : point.plotY;\n                    centered = shape !== 'flag';\n                    graphic = point.graphic;\n                    // Only draw the point if y is defined and the flag is within\n                    // the visible area\n                    if (typeof plotY !== 'undefined' &&\n                        plotX >= 0 &&\n                        !outsideRight) {\n                        // #15384\n                        if (graphic && point.hasNewShapeType()) {\n                            graphic = graphic.destroy();\n                        }\n                        // Create the flag\n                        if (!graphic) {\n                            graphic = point.graphic = renderer.label('', null, null, shape, null, null, options.useHTML)\n                                .addClass('highcharts-point')\n                                .add(series.markerGroup);\n                            // Add reference to the point for tracker (#6303)\n                            if (point.graphic.div) {\n                                point.graphic.div.point = point;\n                            }\n                            graphic.isNew = true;\n                        }\n                        graphic.attr({\n                            align: centered ? 'center' : 'left',\n                            width: options.width,\n                            height: options.height,\n                            'text-align': options.textAlign\n                        });\n                        if (!chart.styledMode) {\n                            graphic\n                                .attr(series.pointAttribs(point))\n                                .css(merge(options.style, point.style))\n                                .shadow(options.shadow);\n                        }\n                        if (plotX > 0) { // #3119\n                            plotX -= graphic.strokeWidth() % 2; // #4285\n                        }\n                        // Plant the flag\n                        attribs = {\n                            y: plotY,\n                            anchorY: anchorY\n                        };\n                        if (options.allowOverlapX) {\n                            attribs.x = plotX;\n                            attribs.anchorX = point.anchorX;\n                        }\n                        graphic.attr({\n                            text: point.options.title || options.title || 'A'\n                        })[graphic.isNew ? 'attr' : 'animate'](attribs);\n                        // Rig for the distribute function\n                        if (!options.allowOverlapX) {\n                            if (!boxesMap[point.plotX]) {\n                                boxesMap[point.plotX] = {\n                                    align: centered ? 0.5 : 0,\n                                    size: graphic.width || 0,\n                                    target: plotX,\n                                    anchorX: plotX\n                                };\n                            }\n                            else {\n                                boxesMap[point.plotX].size = Math.max(boxesMap[point.plotX].size, graphic.width || 0);\n                            }\n                        }\n                        // Set the tooltip anchor position\n                        point.tooltipPos = [\n                            plotX,\n                            plotY + yAxis.pos - chart.plotTop\n                        ]; // #6327\n                    }\n                    else if (graphic) {\n                        point.graphic = graphic.destroy();\n                    }\n                }\n                // Handle X-dimension overlapping\n                if (!options.allowOverlapX) {\n                    let maxDistance = 100;\n                    objectEach(boxesMap, function (box) {\n                        box.plotX = box.anchorX;\n                        boxes.push(box);\n                        maxDistance = Math.max(box.size, maxDistance);\n                    });\n                    // If necessary (for overlapping or long labels)  distribute it\n                    // depending on the label width or a hardcoded value, #16041.\n                    distribute(boxes, inverted ? yAxis.len : this.xAxis.len, maxDistance);\n                    for (const point of points) {\n                        const plotX = point.plotX, graphic = point.graphic, box = graphic && boxesMap[plotX];\n                        if (box && graphic) {\n                            // Hide flag when its box position is not specified\n                            // (#8573, #9299)\n                            if (!defined(box.pos)) {\n                                graphic.hide().isNew = true;\n                            }\n                            else {\n                                graphic[graphic.isNew ? 'attr' : 'animate']({\n                                    x: box.pos + (box.align || 0) * box.size,\n                                    anchorX: point.anchorX\n                                }).show().isNew = false;\n                            }\n                        }\n                    }\n                }\n                // Can be a mix of SVG and HTML and we need events for both (#6303)\n                if (options.useHTML && series.markerGroup) {\n                    wrap(series.markerGroup, 'on', function (proceed) {\n                        return SVGElement.prototype.on.apply(\n                        // for HTML\n                        // eslint-disable-next-line no-invalid-this\n                        proceed.apply(this, [].slice.call(arguments, 1)), \n                        // and for SVG\n                        [].slice.call(arguments, 1));\n                    });\n                }\n            }\n            /**\n             * Extend the column trackers with listeners to expand and contract\n             * stacks.\n             * @private\n             */\n            drawTracker() {\n                const series = this, points = series.points;\n                super.drawTracker();\n                /* *\n                * Bring each stacked flag up on mouse over, this allows readability\n                * of vertically stacked elements as well as tight points on the x\n                * axis. #1924.\n                */\n                for (const point of points) {\n                    const graphic = point.graphic;\n                    if (graphic) {\n                        if (point.unbindMouseOver) {\n                            point.unbindMouseOver();\n                        }\n                        point.unbindMouseOver = addEvent(graphic.element, 'mouseover', function () {\n                            // Raise this point\n                            if (point.stackIndex > 0 &&\n                                !point.raised) {\n                                point._y = graphic.y;\n                                graphic.attr({\n                                    y: point._y - 8\n                                });\n                                point.raised = true;\n                            }\n                            // Revert other raised points\n                            for (const otherPoint of points) {\n                                if (otherPoint !== point &&\n                                    otherPoint.raised &&\n                                    otherPoint.graphic) {\n                                    otherPoint.graphic.attr({\n                                        y: otherPoint._y\n                                    });\n                                    otherPoint.raised = false;\n                                }\n                            }\n                        });\n                    }\n                }\n            }\n            /**\n             * Get presentational attributes\n             * @private\n             */\n            pointAttribs(point, state) {\n                const options = this.options, color = (point && point.color) || this.color;\n                let lineColor = options.lineColor, lineWidth = (point && point.lineWidth), fill = (point && point.fillColor) || options.fillColor;\n                if (state) {\n                    fill = options.states[state].fillColor;\n                    lineColor = options.states[state].lineColor;\n                    lineWidth = options.states[state].lineWidth;\n                }\n                return {\n                    fill: fill || color,\n                    stroke: lineColor || color,\n                    'stroke-width': lineWidth || options.lineWidth || 0\n                };\n            }\n            /**\n             * @private\n             */\n            setClip() {\n                Series.prototype.setClip.apply(this, arguments);\n                if (this.options.clip !== false &&\n                    this.sharedClipKey &&\n                    this.markerGroup) {\n                    this.markerGroup.clip(this.chart.sharedClips[this.sharedClipKey]);\n                }\n            }\n        }\n        /* *\n         *\n         *  Static Properties\n         *\n         * */\n        FlagsSeries.compose = FlagsSymbols.compose;\n        FlagsSeries.defaultOptions = merge(ColumnSeries.defaultOptions, FlagsSeriesDefaults);\n        OnSeriesComposition.compose(FlagsSeries);\n        extend(FlagsSeries.prototype, {\n            allowDG: false,\n            forceCrop: true,\n            invertible: false,\n            noSharedTooltip: true,\n            pointClass: FlagsPoint,\n            sorted: false,\n            takeOrdinalPosition: false,\n            trackerGroups: ['markerGroup'],\n            buildKDTree: noop,\n            /**\n             * Inherit the initialization from base Series.\n             * @private\n             */\n            init: Series.prototype.init\n        });\n        SeriesRegistry.registerSeriesType('flags', FlagsSeries);\n        /* *\n         *\n         *  Default Export\n         *\n         * */\n        /* *\n         *\n         *  API Declarations\n         *\n         * */\n        /**\n         * @typedef {\"circlepin\"|\"flag\"|\"squarepin\"} Highcharts.FlagsShapeValue\n         */\n        ''; // detach doclets above\n\n        return FlagsSeries;\n    });\n    _registerModule(_modules, 'Core/Axis/BrokenAxis.js', [_modules['Core/Axis/Stacking/StackItem.js'], _modules['Core/Utilities.js']], function (StackItem, U) {\n        /* *\n         *\n         *  (c) 2009-2024 Torstein Honsi\n         *\n         *  License: www.highcharts.com/license\n         *\n         *  !!!!!!! SOURCE GETS TRANSPILED BY TYPESCRIPT. EDIT TS FILE ONLY. !!!!!!!\n         *\n         * */\n        const { addEvent, find, fireEvent, isArray, isNumber, pick } = U;\n        /* *\n         *\n         *  Composition\n         *\n         * */\n        /**\n         * Axis with support of broken data rows.\n         * @private\n         */\n        var BrokenAxis;\n        (function (BrokenAxis) {\n            /* *\n             *\n             *  Declarations\n             *\n             * */\n            /* *\n             *\n             *  Functions\n             *\n             * */\n            /**\n             * Adds support for broken axes.\n             * @private\n             */\n            function compose(AxisClass, SeriesClass) {\n                if (!AxisClass.keepProps.includes('brokenAxis')) {\n                    AxisClass.keepProps.push('brokenAxis');\n                    addEvent(AxisClass, 'init', onAxisInit);\n                    addEvent(AxisClass, 'afterInit', onAxisAfterInit);\n                    addEvent(AxisClass, 'afterSetTickPositions', onAxisAfterSetTickPositions);\n                    addEvent(AxisClass, 'afterSetOptions', onAxisAfterSetOptions);\n                    const seriesProto = SeriesClass.prototype;\n                    seriesProto.drawBreaks = seriesDrawBreaks;\n                    seriesProto.gappedPath = seriesGappedPath;\n                    addEvent(SeriesClass, 'afterGeneratePoints', onSeriesAfterGeneratePoints);\n                    addEvent(SeriesClass, 'afterRender', onSeriesAfterRender);\n                }\n                return AxisClass;\n            }\n            BrokenAxis.compose = compose;\n            /**\n             * @private\n             */\n            function onAxisAfterInit() {\n                if (typeof this.brokenAxis !== 'undefined') {\n                    this.brokenAxis.setBreaks(this.options.breaks, false);\n                }\n            }\n            /**\n             * Force Axis to be not-ordinal when breaks are defined.\n             * @private\n             */\n            function onAxisAfterSetOptions() {\n                const axis = this;\n                if (axis.brokenAxis?.hasBreaks) {\n                    axis.options.ordinal = false;\n                }\n            }\n            /**\n             * @private\n             */\n            function onAxisAfterSetTickPositions() {\n                const axis = this, brokenAxis = axis.brokenAxis;\n                if (brokenAxis?.hasBreaks) {\n                    const tickPositions = axis.tickPositions, info = axis.tickPositions.info, newPositions = [];\n                    for (let i = 0; i < tickPositions.length; i++) {\n                        if (!brokenAxis.isInAnyBreak(tickPositions[i])) {\n                            newPositions.push(tickPositions[i]);\n                        }\n                    }\n                    axis.tickPositions = newPositions;\n                    axis.tickPositions.info = info;\n                }\n            }\n            /**\n             * @private\n             */\n            function onAxisInit() {\n                const axis = this;\n                if (!axis.brokenAxis) {\n                    axis.brokenAxis = new Additions(axis);\n                }\n            }\n            /**\n             * @private\n             */\n            function onSeriesAfterGeneratePoints() {\n                const { isDirty, options: { connectNulls }, points, xAxis, yAxis } = this;\n                // Set, or reset visibility of the points. Axis.setBreaks marks\n                // the series as isDirty\n                if (isDirty) {\n                    let i = points.length;\n                    while (i--) {\n                        const point = points[i];\n                        // Respect nulls inside the break (#4275)\n                        const nullGap = point.y === null && connectNulls === false;\n                        const isPointInBreak = (!nullGap && (xAxis?.brokenAxis?.isInAnyBreak(point.x, true) ||\n                            yAxis?.brokenAxis?.isInAnyBreak(point.y, true)));\n                        // Set point.visible if in any break.\n                        // If not in break, reset visible to original value.\n                        point.visible = isPointInBreak ?\n                            false :\n                            point.options.visible !== false;\n                    }\n                }\n            }\n            /**\n             * @private\n             */\n            function onSeriesAfterRender() {\n                this.drawBreaks(this.xAxis, ['x']);\n                this.drawBreaks(this.yAxis, pick(this.pointArrayMap, ['y']));\n            }\n            /**\n             * @private\n             */\n            function seriesDrawBreaks(axis, keys) {\n                const series = this, points = series.points;\n                let breaks, threshold, y;\n                if (axis?.brokenAxis?.hasBreaks) {\n                    const brokenAxis = axis.brokenAxis;\n                    keys.forEach(function (key) {\n                        breaks = brokenAxis?.breakArray || [];\n                        threshold = axis.isXAxis ?\n                            axis.min :\n                            pick(series.options.threshold, axis.min);\n                        // Array of breaks that have been \"zoomed-out\" which means that\n                        // they were shown previously, but now after zoom, they are not\n                        // (#19885).\n                        const breaksOutOfRange = axis?.options?.breaks?.filter(function (brk) {\n                            let isOut = true;\n                            // Iterate to see if \"brk\" is in axis range\n                            for (let i = 0; i < breaks.length; i++) {\n                                const otherBreak = breaks[i];\n                                if (otherBreak.from === brk.from &&\n                                    otherBreak.to === brk.to) {\n                                    isOut = false;\n                                    break;\n                                }\n                            }\n                            return isOut;\n                        });\n                        points.forEach(function (point) {\n                            y = pick(point['stack' + key.toUpperCase()], point[key]);\n                            breaks.forEach(function (brk) {\n                                if (isNumber(threshold) && isNumber(y)) {\n                                    let eventName = '';\n                                    if ((threshold < brk.from && y > brk.to) ||\n                                        (threshold > brk.from && y < brk.from)) {\n                                        eventName = 'pointBreak';\n                                    }\n                                    else if ((threshold < brk.from &&\n                                        y > brk.from &&\n                                        y < brk.to) || (threshold > brk.from &&\n                                        y > brk.to &&\n                                        y < brk.from)) {\n                                        eventName = 'pointInBreak';\n                                    }\n                                    if (eventName) {\n                                        fireEvent(axis, eventName, { point, brk });\n                                    }\n                                }\n                            });\n                            breaksOutOfRange?.forEach(function (brk) {\n                                fireEvent(axis, 'pointOutsideOfBreak', { point, brk });\n                            });\n                        });\n                    });\n                }\n            }\n            /**\n             * Extend getGraphPath by identifying gaps in the data so that we\n             * can draw a gap in the line or area. This was moved from ordinal\n             * axis module to broken axis module as of #5045.\n             *\n             * @private\n             * @function Highcharts.Series#gappedPath\n             *\n             * @return {Highcharts.SVGPathArray}\n             * Gapped path\n             */\n            function seriesGappedPath() {\n                const currentDataGrouping = this.currentDataGrouping, groupingSize = currentDataGrouping?.gapSize, points = this.points.slice(), yAxis = this.yAxis;\n                let gapSize = this.options.gapSize, i = points.length - 1, stack;\n                /**\n                 * Defines when to display a gap in the graph, together with the\n                 * [gapUnit](plotOptions.series.gapUnit) option.\n                 *\n                 * In case when `dataGrouping` is enabled, points can be grouped\n                 * into a larger time span. This can make the grouped points to\n                 * have a greater distance than the absolute value of `gapSize`\n                 * property, which will result in disappearing graph completely.\n                 * To prevent this situation the mentioned distance between\n                 * grouped points is used instead of previously defined\n                 * `gapSize`.\n                 *\n                 * In practice, this option is most often used to visualize gaps\n                 * in time series. In a stock chart, intraday data is available\n                 * for daytime hours, while gaps will appear in nights and\n                 * weekends.\n                 *\n                 * @see [gapUnit](plotOptions.series.gapUnit)\n                 * @see [xAxis.breaks](#xAxis.breaks)\n                 *\n                 * @sample {highstock} stock/plotoptions/series-gapsize/\n                 * Setting the gap size to 2 introduces gaps for weekends in\n                 * daily datasets.\n                 *\n                 * @type      {number}\n                 * @default   0\n                 * @product   highstock\n                 * @requires  modules/broken-axis\n                 * @apioption plotOptions.series.gapSize\n                 */\n                /**\n                 * Together with [gapSize](plotOptions.series.gapSize), this\n                 * option defines where to draw gaps in the graph.\n                 *\n                 * When the `gapUnit` is `\"relative\"` (default), a gap size of 5\n                 * means that if the distance between two points is greater than\n                 * 5 times that of the two closest points, the graph will be\n                 * broken.\n                 *\n                 * When the `gapUnit` is `\"value\"`, the gap is based on absolute\n                 * axis values, which on a datetime axis is milliseconds. This\n                 * also applies to the navigator series that inherits gap\n                 * options from the base series.\n                 *\n                 * @see [gapSize](plotOptions.series.gapSize)\n                 *\n                 * @type       {string}\n                 * @default    relative\n                 * @since      5.0.13\n                 * @product    highstock\n                 * @validvalue [\"relative\", \"value\"]\n                 * @requires   modules/broken-axis\n                 * @apioption  plotOptions.series.gapUnit\n                 */\n                if (gapSize && i > 0) { // #5008\n                    // Gap unit is relative\n                    if (this.options.gapUnit !== 'value') {\n                        gapSize *= this.basePointRange;\n                    }\n                    // Setting a new gapSize in case dataGrouping is enabled\n                    // (#7686)\n                    if (groupingSize &&\n                        groupingSize > gapSize &&\n                        // Except when DG is forced (e.g. from other series)\n                        // and has lower granularity than actual points (#11351)\n                        groupingSize >= this.basePointRange) {\n                        gapSize = groupingSize;\n                    }\n                    // extension for ordinal breaks\n                    let current, next;\n                    while (i--) {\n                        // Reassign next if it is not visible\n                        if (!(next && next.visible !== false)) {\n                            next = points[i + 1];\n                        }\n                        current = points[i];\n                        // Skip iteration if one of the points is not visible\n                        if (next.visible === false || current.visible === false) {\n                            continue;\n                        }\n                        if (next.x - current.x > gapSize) {\n                            const xRange = (current.x + next.x) / 2;\n                            points.splice(// insert after this one\n                            i + 1, 0, {\n                                isNull: true,\n                                x: xRange\n                            });\n                            // For stacked chart generate empty stack items, #6546\n                            if (yAxis.stacking && this.options.stacking) {\n                                stack = yAxis.stacking.stacks[this.stackKey][xRange] = new StackItem(yAxis, yAxis.options.stackLabels, false, xRange, this.stack);\n                                stack.total = 0;\n                            }\n                        }\n                        // Assign current to next for the upcoming iteration\n                        next = current;\n                    }\n                }\n                // Call base method\n                return this.getGraphPath(points);\n            }\n            /* *\n             *\n             *  Class\n             *\n             * */\n            /**\n             * Provides support for broken axes.\n             * @private\n             * @class\n             */\n            class Additions {\n                /* *\n                 *\n                 *  Static Functions\n                 *\n                 * */\n                /**\n                 * @private\n                 */\n                static isInBreak(brk, val) {\n                    const repeat = brk.repeat || Infinity, from = brk.from, length = brk.to - brk.from, test = (val >= from ?\n                        (val - from) % repeat :\n                        repeat - ((from - val) % repeat));\n                    let ret;\n                    if (!brk.inclusive) {\n                        ret = test < length && test !== 0;\n                    }\n                    else {\n                        ret = test <= length;\n                    }\n                    return ret;\n                }\n                /**\n                 * @private\n                 */\n                static lin2Val(val) {\n                    const axis = this;\n                    const brokenAxis = axis.brokenAxis;\n                    const breakArray = brokenAxis && brokenAxis.breakArray;\n                    if (!breakArray || !isNumber(val)) {\n                        return val;\n                    }\n                    let nval = val, brk, i;\n                    for (i = 0; i < breakArray.length; i++) {\n                        brk = breakArray[i];\n                        if (brk.from >= nval) {\n                            break;\n                        }\n                        else if (brk.to < nval) {\n                            nval += brk.len;\n                        }\n                        else if (Additions.isInBreak(brk, nval)) {\n                            nval += brk.len;\n                        }\n                    }\n                    return nval;\n                }\n                /**\n                 * @private\n                 */\n                static val2Lin(val) {\n                    const axis = this;\n                    const brokenAxis = axis.brokenAxis;\n                    const breakArray = brokenAxis && brokenAxis.breakArray;\n                    if (!breakArray || !isNumber(val)) {\n                        return val;\n                    }\n                    let nval = val, brk, i;\n                    for (i = 0; i < breakArray.length; i++) {\n                        brk = breakArray[i];\n                        if (brk.to <= val) {\n                            nval -= brk.len;\n                        }\n                        else if (brk.from >= val) {\n                            break;\n                        }\n                        else if (Additions.isInBreak(brk, val)) {\n                            nval -= (val - brk.from);\n                            break;\n                        }\n                    }\n                    return nval;\n                }\n                /* *\n                 *\n                 *  Constructors\n                 *\n                 * */\n                constructor(axis) {\n                    this.hasBreaks = false;\n                    this.axis = axis;\n                }\n                /* *\n                 *\n                 *  Functions\n                 *\n                 * */\n                /**\n                 * Returns the first break found where the x is larger then break.from\n                 * and smaller then break.to.\n                 *\n                 * @param {number} x\n                 * The number which should be within a break.\n                 *\n                 * @param {Array<Highcharts.XAxisBreaksOptions>} breaks\n                 * The array of breaks to search within.\n                 *\n                 * @return {Highcharts.XAxisBreaksOptions|undefined}\n                 * Returns the first break found that matches, returns false if no break\n                 * is found.\n                 */\n                findBreakAt(x, breaks) {\n                    return find(breaks, function (b) {\n                        return b.from < x && x < b.to;\n                    });\n                }\n                /**\n                 * @private\n                 */\n                isInAnyBreak(val, testKeep) {\n                    const brokenAxis = this, axis = brokenAxis.axis, breaks = axis.options.breaks || [];\n                    let i = breaks.length, inbrk, keep, ret;\n                    if (i && isNumber(val)) {\n                        while (i--) {\n                            if (Additions.isInBreak(breaks[i], val)) {\n                                inbrk = true;\n                                if (!keep) {\n                                    keep = pick(breaks[i].showPoints, !axis.isXAxis);\n                                }\n                            }\n                        }\n                        if (inbrk && testKeep) {\n                            ret = inbrk && !keep;\n                        }\n                        else {\n                            ret = inbrk;\n                        }\n                    }\n                    return ret;\n                }\n                /**\n                 * Dynamically set or unset breaks in an axis. This function in lighter\n                 * than using Axis.update, and it also preserves animation.\n                 *\n                 * @private\n                 * @function Highcharts.Axis#setBreaks\n                 *\n                 * @param {Array<Highcharts.XAxisBreaksOptions>} [breaks]\n                 * The breaks to add. When `undefined` it removes existing breaks.\n                 *\n                 * @param {boolean} [redraw=true]\n                 * Whether to redraw the chart immediately.\n                 */\n                setBreaks(breaks, redraw) {\n                    const brokenAxis = this;\n                    const axis = brokenAxis.axis;\n                    const hasBreaks = isArray(breaks) &&\n                        !!breaks.length &&\n                        !!Object.keys(breaks[0]).length; // Check for [{}], #16368.\n                    axis.isDirty = brokenAxis.hasBreaks !== hasBreaks;\n                    brokenAxis.hasBreaks = hasBreaks;\n                    if (breaks !== axis.options.breaks) {\n                        axis.options.breaks = axis.userOptions.breaks = breaks;\n                    }\n                    axis.forceRedraw = true; // Force recalculation in setScale\n                    // Recalculate series related to the axis.\n                    axis.series.forEach(function (series) {\n                        series.isDirty = true;\n                    });\n                    if (!hasBreaks && axis.val2lin === Additions.val2Lin) {\n                        // Revert to prototype functions\n                        delete axis.val2lin;\n                        delete axis.lin2val;\n                    }\n                    if (hasBreaks) {\n                        axis.userOptions.ordinal = false;\n                        axis.lin2val = Additions.lin2Val;\n                        axis.val2lin = Additions.val2Lin;\n                        axis.setExtremes = function (newMin, newMax, redraw, animation, eventArguments) {\n                            // If trying to set extremes inside a break, extend min to\n                            // after, and max to before the break ( #3857 )\n                            if (brokenAxis.hasBreaks) {\n                                const breaks = (this.options.breaks || []);\n                                let axisBreak;\n                                while ((axisBreak = brokenAxis.findBreakAt(newMin, breaks))) {\n                                    newMin = axisBreak.to;\n                                }\n                                while ((axisBreak = brokenAxis.findBreakAt(newMax, breaks))) {\n                                    newMax = axisBreak.from;\n                                }\n                                // If both min and max is within the same break.\n                                if (newMax < newMin) {\n                                    newMax = newMin;\n                                }\n                            }\n                            axis.constructor.prototype.setExtremes.call(this, newMin, newMax, redraw, animation, eventArguments);\n                        };\n                        axis.setAxisTranslation = function () {\n                            axis.constructor.prototype.setAxisTranslation.call(this);\n                            brokenAxis.unitLength = void 0;\n                            if (brokenAxis.hasBreaks) {\n                                const breaks = axis.options.breaks || [], \n                                // Temporary one:\n                                breakArrayT = [], breakArray = [], pointRangePadding = pick(axis.pointRangePadding, 0);\n                                let length = 0, inBrk, repeat, min = axis.userMin || axis.min, max = axis.userMax || axis.max, start, i;\n                                // Min & max check (#4247)\n                                breaks.forEach(function (brk) {\n                                    repeat = brk.repeat || Infinity;\n                                    if (isNumber(min) && isNumber(max)) {\n                                        if (Additions.isInBreak(brk, min)) {\n                                            min += ((brk.to % repeat) -\n                                                (min % repeat));\n                                        }\n                                        if (Additions.isInBreak(brk, max)) {\n                                            max -= ((max % repeat) -\n                                                (brk.from % repeat));\n                                        }\n                                    }\n                                });\n                                // Construct an array holding all breaks in the axis\n                                breaks.forEach(function (brk) {\n                                    start = brk.from;\n                                    repeat = brk.repeat || Infinity;\n                                    if (isNumber(min) && isNumber(max)) {\n                                        while (start - repeat > min) {\n                                            start -= repeat;\n                                        }\n                                        while (start < min) {\n                                            start += repeat;\n                                        }\n                                        for (i = start; i < max; i += repeat) {\n                                            breakArrayT.push({\n                                                value: i,\n                                                move: 'in'\n                                            });\n                                            breakArrayT.push({\n                                                value: i + brk.to - brk.from,\n                                                move: 'out',\n                                                size: brk.breakSize\n                                            });\n                                        }\n                                    }\n                                });\n                                breakArrayT.sort(function (a, b) {\n                                    return ((a.value === b.value) ?\n                                        ((a.move === 'in' ? 0 : 1) -\n                                            (b.move === 'in' ? 0 : 1)) :\n                                        a.value - b.value);\n                                });\n                                // Simplify the breaks\n                                inBrk = 0;\n                                start = min;\n                                breakArrayT.forEach(function (brk) {\n                                    inBrk += (brk.move === 'in' ? 1 : -1);\n                                    if (inBrk === 1 && brk.move === 'in') {\n                                        start = brk.value;\n                                    }\n                                    if (inBrk === 0 && isNumber(start)) {\n                                        breakArray.push({\n                                            from: start,\n                                            to: brk.value,\n                                            len: brk.value - start - (brk.size || 0)\n                                        });\n                                        length += (brk.value -\n                                            start -\n                                            (brk.size || 0));\n                                    }\n                                });\n                                brokenAxis.breakArray = breakArray;\n                                // Used with staticScale, and below the actual axis\n                                // length, when breaks are subtracted.\n                                if (isNumber(min) &&\n                                    isNumber(max) &&\n                                    isNumber(axis.min)) {\n                                    brokenAxis.unitLength = max - min - length +\n                                        pointRangePadding;\n                                    fireEvent(axis, 'afterBreaks');\n                                    if (axis.staticScale) {\n                                        axis.transA = axis.staticScale;\n                                    }\n                                    else if (brokenAxis.unitLength) {\n                                        axis.transA *=\n                                            (max - axis.min + pointRangePadding) /\n                                                brokenAxis.unitLength;\n                                    }\n                                    if (pointRangePadding) {\n                                        axis.minPixelPadding =\n                                            axis.transA * (axis.minPointOffset || 0);\n                                    }\n                                    axis.min = min;\n                                    axis.max = max;\n                                }\n                            }\n                        };\n                    }\n                    if (pick(redraw, true)) {\n                        axis.chart.redraw();\n                    }\n                }\n            }\n            BrokenAxis.Additions = Additions;\n        })(BrokenAxis || (BrokenAxis = {}));\n        /* *\n         *\n         *  Default Export\n         *\n         * */\n\n        return BrokenAxis;\n    });\n    _registerModule(_modules, 'masters/modules/broken-axis.src.js', [_modules['Core/Globals.js'], _modules['Core/Axis/BrokenAxis.js']], function (Highcharts, BrokenAxis) {\n\n        const G = Highcharts;\n        G.BrokenAxis = G.BrokenAxis || BrokenAxis;\n        G.BrokenAxis.compose(G.Axis, G.Series);\n\n        return Highcharts;\n    });\n    _registerModule(_modules, 'Extensions/DataGrouping/ApproximationRegistry.js', [], function () {\n        /* *\n         *\n         *  (c) 2010-2024 Torstein Honsi\n         *\n         *  License: www.highcharts.com/license\n         *\n         *  !!!!!!! SOURCE GETS TRANSPILED BY TYPESCRIPT. EDIT TS FILE ONLY. !!!!!!!\n         *\n         * */\n        /* *\n         *\n         *  Constants\n         *\n         * */\n        /**\n         * Define the available approximation types. The data grouping\n         * approximations takes an array or numbers as the first parameter. In case\n         * of ohlc, four arrays are sent in as four parameters. Each array consists\n         * only of numbers. In case null values belong to the group, the property\n         * .hasNulls will be set to true on the array.\n         *\n         * @product highstock\n         *\n         * @private\n         */\n        const ApproximationRegistry = {\n        // approximations added programmatically\n        };\n        /* *\n         *\n         *  Default Export\n         *\n         * */\n\n        return ApproximationRegistry;\n    });\n    _registerModule(_modules, 'Extensions/DataGrouping/ApproximationDefaults.js', [_modules['Extensions/DataGrouping/ApproximationRegistry.js'], _modules['Core/Utilities.js']], function (ApproximationRegistry, U) {\n        /* *\n         *\n         *  (c) 2010-2024 Torstein Honsi\n         *\n         *  License: www.highcharts.com/license\n         *\n         *  !!!!!!! SOURCE GETS TRANSPILED BY TYPESCRIPT. EDIT TS FILE ONLY. !!!!!!!\n         *\n         * */\n        const { arrayMax, arrayMin, correctFloat, extend, isNumber } = U;\n        /* *\n         *\n         *  Functions\n         *\n         * */\n        /**\n         * @private\n         */\n        function average(arr) {\n            const len = arr.length;\n            let ret = sum(arr);\n            // If we have a number, return it divided by the length. If not,\n            // return null or undefined based on what the sum method finds.\n            if (isNumber(ret) && len) {\n                ret = correctFloat(ret / len);\n            }\n            return ret;\n        }\n        /**\n         * The same as average, but for series with multiple values, like area ranges.\n         * @private\n         */\n        function averages() {\n            const ret = [];\n            [].forEach.call(arguments, function (arr) {\n                ret.push(average(arr));\n            });\n            // Return undefined when first elem. is undefined and let\n            // sum method handle null (#7377)\n            return typeof ret[0] === 'undefined' ? void 0 : ret;\n        }\n        /**\n         * @private\n         */\n        function close(arr) {\n            return arr.length ?\n                arr[arr.length - 1] :\n                (arr.hasNulls ? null : void 0);\n        }\n        /**\n         * @private\n         */\n        function high(arr) {\n            return arr.length ?\n                arrayMax(arr) :\n                (arr.hasNulls ? null : void 0);\n        }\n        /**\n         * HLC, OHLC and range are special cases where a multidimensional array is input\n         * and an array is output.\n         * @private\n         */\n        function hlc(high, low, close) {\n            high = ApproximationRegistry.high(high);\n            low = ApproximationRegistry.low(low);\n            close = ApproximationRegistry.close(close);\n            if (isNumber(high) ||\n                isNumber(low) ||\n                isNumber(close)) {\n                return [high, low, close];\n            }\n        }\n        /**\n         * @private\n         */\n        function low(arr) {\n            return arr.length ?\n                arrayMin(arr) :\n                (arr.hasNulls ? null : void 0);\n        }\n        /**\n         * @private\n         */\n        function ohlc(open, high, low, close) {\n            open = ApproximationRegistry.open(open);\n            high = ApproximationRegistry.high(high);\n            low = ApproximationRegistry.low(low);\n            close = ApproximationRegistry.close(close);\n            if (isNumber(open) ||\n                isNumber(high) ||\n                isNumber(low) ||\n                isNumber(close)) {\n                return [open, high, low, close];\n            }\n        }\n        /**\n         * @private\n         */\n        function open(arr) {\n            return arr.length ? arr[0] : (arr.hasNulls ? null : void 0);\n        }\n        /**\n         * @private\n         */\n        function range(low, high) {\n            low = ApproximationRegistry.low(low);\n            high = ApproximationRegistry.high(high);\n            if (isNumber(low) || isNumber(high)) {\n                return [low, high];\n            }\n            if (low === null && high === null) {\n                return null;\n            }\n            // else, return is undefined\n        }\n        /**\n         * @private\n         */\n        function sum(arr) {\n            let len = arr.length, ret;\n            // 1. it consists of nulls exclusive\n            if (!len && arr.hasNulls) {\n                ret = null;\n                // 2. it has a length and real values\n            }\n            else if (len) {\n                ret = 0;\n                while (len--) {\n                    ret += arr[len];\n                }\n            }\n            // 3. it has zero length, so just return undefined\n            // => doNothing()\n            return ret;\n        }\n        /* *\n         *\n         *  Default Export\n         *\n         * */\n        const ApproximationDefaults = {\n            average,\n            averages,\n            close,\n            high,\n            hlc,\n            low,\n            ohlc,\n            open,\n            range,\n            sum\n        };\n        extend(ApproximationRegistry, ApproximationDefaults);\n\n        return ApproximationDefaults;\n    });\n    _registerModule(_modules, 'Extensions/DataGrouping/DataGroupingDefaults.js', [], function () {\n        /* *\n         *\n         *  (c) 2010-2024 Torstein Honsi\n         *\n         *  License: www.highcharts.com/license\n         *\n         *  !!!!!!! SOURCE GETS TRANSPILED BY TYPESCRIPT. EDIT TS FILE ONLY. !!!!!!!\n         *\n         * */\n        /* *\n         *\n         *  Constants\n         *\n         * */\n        /**\n         * Common options\n         * @private\n         */\n        const common = {\n            // enabled: null, // (true for stock charts, false for basic),\n            // forced: undefined,\n            groupPixelWidth: 2,\n            // the first one is the point or start value, the second is the start\n            // value if we're dealing with range, the third one is the end value if\n            // dealing with a range\n            dateTimeLabelFormats: {\n                millisecond: [\n                    '%A, %e %b, %H:%M:%S.%L',\n                    '%A, %e %b, %H:%M:%S.%L',\n                    '-%H:%M:%S.%L'\n                ],\n                second: [\n                    '%A, %e %b, %H:%M:%S',\n                    '%A, %e %b, %H:%M:%S',\n                    '-%H:%M:%S'\n                ],\n                minute: [\n                    '%A, %e %b, %H:%M',\n                    '%A, %e %b, %H:%M',\n                    '-%H:%M'\n                ],\n                hour: [\n                    '%A, %e %b, %H:%M',\n                    '%A, %e %b, %H:%M',\n                    '-%H:%M'\n                ],\n                day: [\n                    '%A, %e %b %Y',\n                    '%A, %e %b',\n                    '-%A, %e %b %Y'\n                ],\n                week: [\n                    'Week from %A, %e %b %Y',\n                    '%A, %e %b',\n                    '-%A, %e %b %Y'\n                ],\n                month: [\n                    '%B %Y',\n                    '%B',\n                    '-%B %Y'\n                ],\n                year: [\n                    '%Y',\n                    '%Y',\n                    '-%Y'\n                ]\n            }\n            // smoothed = false, // enable this for navigator series only\n        };\n        /**\n         * Extends common options\n         * @private\n         */\n        const seriesSpecific = {\n            line: {},\n            spline: {},\n            area: {},\n            areaspline: {},\n            arearange: {},\n            column: {\n                groupPixelWidth: 10\n            },\n            columnrange: {\n                groupPixelWidth: 10\n            },\n            candlestick: {\n                groupPixelWidth: 10\n            },\n            ohlc: {\n                groupPixelWidth: 5\n            },\n            hlc: {\n                groupPixelWidth: 5\n                // Move to HeikinAshiSeries.ts after refactoring data grouping.\n            },\n            heikinashi: {\n                groupPixelWidth: 10\n            }\n        };\n        /**\n         * Units are defined in a separate array to allow complete overriding in\n         * case of a user option.\n         * @private\n         */\n        const units = [\n            [\n                'millisecond',\n                [1, 2, 5, 10, 20, 25, 50, 100, 200, 500] // allowed multiples\n            ], [\n                'second',\n                [1, 2, 5, 10, 15, 30]\n            ], [\n                'minute',\n                [1, 2, 5, 10, 15, 30]\n            ], [\n                'hour',\n                [1, 2, 3, 4, 6, 8, 12]\n            ], [\n                'day',\n                [1]\n            ], [\n                'week',\n                [1]\n            ], [\n                'month',\n                [1, 3, 6]\n            ], [\n                'year',\n                null\n            ]\n        ];\n        /* *\n         *\n         *  Default Export\n         *\n         * */\n        const DataGroupingDefaults = {\n            common,\n            seriesSpecific,\n            units\n        };\n\n        return DataGroupingDefaults;\n    });\n    _registerModule(_modules, 'Extensions/DataGrouping/DataGroupingAxisComposition.js', [_modules['Extensions/DataGrouping/DataGroupingDefaults.js'], _modules['Core/Utilities.js']], function (DataGroupingDefaults, U) {\n        /* *\n         *\n         *  (c) 2010-2024 Torstein Honsi\n         *\n         *  License: www.highcharts.com/license\n         *\n         *  !!!!!!! SOURCE GETS TRANSPILED BY TYPESCRIPT. EDIT TS FILE ONLY. !!!!!!!\n         *\n         * */\n        const { addEvent, extend, merge, pick } = U;\n        /* *\n         *\n         *  Variables\n         *\n         * */\n        let AxisConstructor;\n        /* *\n         *\n         *  Functions\n         *\n         * */\n        /**\n         * Check the groupPixelWidth and apply the grouping if needed.\n         * Fired only after processing the data.\n         *\n         * @product highstock\n         *\n         * @function Highcharts.Axis#applyGrouping\n         */\n        function applyGrouping(e) {\n            const axis = this, series = axis.series;\n            // Reset the groupPixelWidth for all series, #17141.\n            series.forEach(function (series) {\n                series.groupPixelWidth = void 0; // #2110\n            });\n            series.forEach(function (series) {\n                series.groupPixelWidth = (axis.getGroupPixelWidth &&\n                    axis.getGroupPixelWidth());\n                if (series.groupPixelWidth) {\n                    series.hasProcessed = true; // #2692\n                }\n                // Fire independing on series.groupPixelWidth to always set a proper\n                // dataGrouping state, (#16238)\n                series.applyGrouping(!!e.hasExtremesChanged);\n            });\n        }\n        /**\n         * @private\n         */\n        function compose(AxisClass) {\n            AxisConstructor = AxisClass;\n            const axisProto = AxisClass.prototype;\n            if (!axisProto.applyGrouping) {\n                addEvent(AxisClass, 'afterSetScale', onAfterSetScale);\n                // When all series are processed, calculate the group pixel width and\n                // then if this value is different than zero apply groupings.\n                addEvent(AxisClass, 'postProcessData', applyGrouping);\n                extend(axisProto, {\n                    applyGrouping,\n                    getGroupPixelWidth,\n                    setDataGrouping\n                });\n            }\n        }\n        /**\n         * Get the data grouping pixel width based on the greatest defined individual\n         * width of the axis' series, and if whether one of the axes need grouping.\n         * @private\n         */\n        function getGroupPixelWidth() {\n            const series = this.series;\n            let i = series.length, groupPixelWidth = 0, doGrouping = false, dataLength, dgOptions;\n            // If one of the series needs grouping, apply it to all (#1634)\n            while (i--) {\n                dgOptions = series[i].options.dataGrouping;\n                if (dgOptions) { // #2692\n                    // If multiple series are compared on the same x axis, give them the\n                    // same group pixel width (#334)\n                    groupPixelWidth = Math.max(groupPixelWidth, \n                    // Fallback to commonOptions (#9693)\n                    pick(dgOptions.groupPixelWidth, DataGroupingDefaults.common.groupPixelWidth));\n                    dataLength = (series[i].processedXData || series[i].data).length;\n                    // Execute grouping if the amount of points is greater than the\n                    // limit defined in groupPixelWidth\n                    if (series[i].groupPixelWidth ||\n                        (dataLength >\n                            (this.chart.plotSizeX / groupPixelWidth)) ||\n                        (dataLength && dgOptions.forced)) {\n                        doGrouping = true;\n                    }\n                }\n            }\n            return doGrouping ? groupPixelWidth : 0;\n        }\n        /**\n         * When resetting the scale reset the hasProcessed flag to avoid taking\n         * previous data grouping of neighbour series into account when determining\n         * group pixel width (#2692).\n         * @private\n         */\n        function onAfterSetScale() {\n            this.series.forEach(function (series) {\n                series.hasProcessed = false;\n            });\n        }\n        /**\n         * Highcharts Stock only. Force data grouping on all the axis' series.\n         *\n         * @product highstock\n         *\n         * @function Highcharts.Axis#setDataGrouping\n         *\n         * @param {boolean|Highcharts.DataGroupingOptionsObject} [dataGrouping]\n         *        A `dataGrouping` configuration. Use `false` to disable data grouping\n         *        dynamically.\n         *\n         * @param {boolean} [redraw=true]\n         *        Whether to redraw the chart or wait for a later call to\n         *        {@link Chart#redraw}.\n         */\n        function setDataGrouping(dataGrouping, redraw) {\n            const axis = this;\n            let i;\n            redraw = pick(redraw, true);\n            if (!dataGrouping) {\n                dataGrouping = {\n                    forced: false,\n                    units: null\n                };\n            }\n            // Axis is instantiated, update all series\n            if (this instanceof AxisConstructor) {\n                i = this.series.length;\n                while (i--) {\n                    this.series[i].update({\n                        dataGrouping: dataGrouping\n                    }, false);\n                }\n                // Axis not yet instantiated, alter series options\n            }\n            else {\n                this.chart.options.series.forEach(function (seriesOptions) {\n                    // Merging dataGrouping options with already defined options #16759\n                    seriesOptions.dataGrouping = typeof dataGrouping === 'boolean' ?\n                        dataGrouping :\n                        merge(dataGrouping, seriesOptions.dataGrouping);\n                });\n            }\n            // Clear ordinal slope, so we won't accidentally use the old one (#7827)\n            if (axis.ordinal) {\n                axis.ordinal.slope = void 0;\n            }\n            if (redraw) {\n                this.chart.redraw();\n            }\n        }\n        /* *\n         *\n         *  Default Export\n         *\n         * */\n        const DataGroupingAxisComposition = {\n            compose\n        };\n\n        return DataGroupingAxisComposition;\n    });\n    _registerModule(_modules, 'Extensions/DataGrouping/DataGroupingSeriesComposition.js', [_modules['Extensions/DataGrouping/ApproximationRegistry.js'], _modules['Extensions/DataGrouping/DataGroupingDefaults.js'], _modules['Core/Axis/DateTimeAxis.js'], _modules['Core/Defaults.js'], _modules['Core/Series/SeriesRegistry.js'], _modules['Core/Utilities.js']], function (ApproximationRegistry, DataGroupingDefaults, DateTimeAxis, D, SeriesRegistry, U) {\n        /* *\n         *\n         *  (c) 2010-2024 Torstein Honsi\n         *\n         *  License: www.highcharts.com/license\n         *\n         *  !!!!!!! SOURCE GETS TRANSPILED BY TYPESCRIPT. EDIT TS FILE ONLY. !!!!!!!\n         *\n         * */\n        const { series: { prototype: seriesProto } } = SeriesRegistry;\n        const { addEvent, defined, error, extend, isNumber, merge, pick } = U;\n        /* *\n         *\n         *  Constants\n         *\n         * */\n        const baseGeneratePoints = seriesProto.generatePoints;\n        /* *\n         *\n         *  Functions\n         *\n         * */\n        /**\n         * @private\n         */\n        function adjustExtremes(xAxis, groupedXData) {\n            // Make sure the X axis extends to show the first group (#2533)\n            // But only for visible series (#5493, #6393)\n            if (defined(groupedXData[0]) &&\n                isNumber(xAxis.min) &&\n                isNumber(xAxis.dataMin) &&\n                groupedXData[0] < xAxis.min) {\n                if ((!defined(xAxis.options.min) &&\n                    xAxis.min <= xAxis.dataMin) ||\n                    xAxis.min === xAxis.dataMin) {\n                    xAxis.min = Math.min(groupedXData[0], xAxis.min);\n                }\n                xAxis.dataMin = Math.min(groupedXData[0], xAxis.dataMin);\n            }\n            // When the last anchor set, change the extremes that\n            // the last point is visible (#12455).\n            if (defined(groupedXData[groupedXData.length - 1]) &&\n                isNumber(xAxis.max) &&\n                isNumber(xAxis.dataMax) &&\n                groupedXData[groupedXData.length - 1] > xAxis.max) {\n                if ((!defined(xAxis.options.max) &&\n                    isNumber(xAxis.dataMax) &&\n                    xAxis.max >= xAxis.dataMax) || xAxis.max === xAxis.dataMax) {\n                    xAxis.max = Math.max(groupedXData[groupedXData.length - 1], xAxis.max);\n                }\n                xAxis.dataMax = Math.max(groupedXData[groupedXData.length - 1], xAxis.dataMax);\n            }\n        }\n        /**\n         * @private\n         */\n        function anchorPoints(series, groupedXData, xMax) {\n            const options = series.options, dataGroupingOptions = options.dataGrouping, totalRange = (series.currentDataGrouping && series.currentDataGrouping.gapSize);\n            if (!(dataGroupingOptions &&\n                series.xData &&\n                totalRange &&\n                series.groupMap)) {\n                return;\n            }\n            const groupedDataLastIndex = groupedXData.length - 1, anchor = dataGroupingOptions.anchor, firstAnchor = dataGroupingOptions.firstAnchor, lastAnchor = dataGroupingOptions.lastAnchor;\n            let anchorIndexIterator = groupedXData.length - 1, anchorFirstIndex = 0;\n            // Change the first point position, but only when it is\n            // the first point in the data set not in the current zoom.\n            if (firstAnchor && series.xData[0] >= groupedXData[0]) {\n                anchorFirstIndex++;\n                const groupStart = series.groupMap[0].start, groupLength = series.groupMap[0].length;\n                let firstGroupEnd;\n                if (isNumber(groupStart) && isNumber(groupLength)) {\n                    firstGroupEnd = groupStart + (groupLength - 1);\n                }\n                groupedXData[0] = {\n                    start: groupedXData[0],\n                    middle: groupedXData[0] + 0.5 * totalRange,\n                    end: groupedXData[0] + totalRange,\n                    firstPoint: series.xData[0],\n                    lastPoint: firstGroupEnd && series.xData[firstGroupEnd]\n                }[firstAnchor];\n            }\n            // Change the last point position but only when it is\n            // the last point in the data set not in the current zoom,\n            // or if it is not the 1st point simultaneously.\n            if (groupedDataLastIndex > 0 &&\n                lastAnchor &&\n                totalRange &&\n                groupedXData[groupedDataLastIndex] >= xMax - totalRange) {\n                anchorIndexIterator--;\n                const lastGroupStart = series.groupMap[series.groupMap.length - 1].start;\n                groupedXData[groupedDataLastIndex] = {\n                    start: groupedXData[groupedDataLastIndex],\n                    middle: groupedXData[groupedDataLastIndex] + 0.5 * totalRange,\n                    end: groupedXData[groupedDataLastIndex] + totalRange,\n                    firstPoint: lastGroupStart && series.xData[lastGroupStart],\n                    lastPoint: series.xData[series.xData.length - 1]\n                }[lastAnchor];\n            }\n            if (anchor && anchor !== 'start') {\n                const shiftInterval = (totalRange *\n                    { middle: 0.5, end: 1 }[anchor]);\n                // Anchor the rest of the points apart from the ones, that were\n                // previously moved.\n                while (anchorIndexIterator >= anchorFirstIndex) {\n                    groupedXData[anchorIndexIterator] += shiftInterval;\n                    anchorIndexIterator--;\n                }\n            }\n        }\n        /**\n         * For the processed data, calculate the grouped data if needed.\n         *\n         * @private\n         * @function Highcharts.Series#applyGrouping\n         */\n        function applyGrouping(hasExtremesChanged) {\n            const series = this, chart = series.chart, options = series.options, dataGroupingOptions = options.dataGrouping, groupingEnabled = series.allowDG !== false && dataGroupingOptions &&\n                pick(dataGroupingOptions.enabled, chart.options.isStock), reserveSpace = series.reserveSpace(), lastDataGrouping = this.currentDataGrouping;\n            let currentDataGrouping, croppedData, revertRequireSorting = false;\n            // Data needs to be sorted for dataGrouping\n            if (groupingEnabled && !series.requireSorting) {\n                series.requireSorting = revertRequireSorting = true;\n            }\n            // Skip if skipDataGrouping method returns false or if grouping is disabled\n            // (in that order).\n            const skip = skipDataGrouping(series, hasExtremesChanged) === false || !groupingEnabled;\n            // Revert original requireSorting value if changed\n            if (revertRequireSorting) {\n                series.requireSorting = false;\n            }\n            if (skip) {\n                return;\n            }\n            series.destroyGroupedData();\n            const processedXData = dataGroupingOptions.groupAll ?\n                series.xData :\n                series.processedXData, processedYData = dataGroupingOptions.groupAll ?\n                series.yData :\n                series.processedYData, plotSizeX = chart.plotSizeX, xAxis = series.xAxis, ordinal = xAxis.options.ordinal, groupPixelWidth = series.groupPixelWidth;\n            let i, hasGroupedData;\n            // Execute grouping if the amount of points is greater than the limit\n            // defined in groupPixelWidth\n            if (groupPixelWidth &&\n                processedXData &&\n                processedXData.length &&\n                plotSizeX) {\n                hasGroupedData = true;\n                // Force recreation of point instances in series.translate, #5699\n                series.isDirty = true;\n                series.points = null; // #6709\n                const extremes = xAxis.getExtremes(), xMin = extremes.min, xMax = extremes.max, groupIntervalFactor = (ordinal &&\n                    xAxis.ordinal &&\n                    xAxis.ordinal.getGroupIntervalFactor(xMin, xMax, series)) || 1, interval = (groupPixelWidth * (xMax - xMin) / plotSizeX) *\n                    groupIntervalFactor, groupPositions = xAxis.getTimeTicks(DateTimeAxis.Additions.prototype.normalizeTimeTickInterval(interval, dataGroupingOptions.units ||\n                    DataGroupingDefaults.units), \n                // Processed data may extend beyond axis (#4907)\n                Math.min(xMin, processedXData[0]), Math.max(xMax, processedXData[processedXData.length - 1]), xAxis.options.startOfWeek, processedXData, series.closestPointRange), groupedData = seriesProto.groupData.apply(series, [\n                    processedXData,\n                    processedYData,\n                    groupPositions,\n                    dataGroupingOptions.approximation\n                ]);\n                let groupedXData = groupedData.groupedXData, groupedYData = groupedData.groupedYData, gapSize = 0;\n                // The smoothed option is deprecated, instead, there is a fallback\n                // to the new anchoring mechanism. #12455.\n                if (dataGroupingOptions &&\n                    dataGroupingOptions.smoothed &&\n                    groupedXData.length) {\n                    dataGroupingOptions.firstAnchor = 'firstPoint';\n                    dataGroupingOptions.anchor = 'middle';\n                    dataGroupingOptions.lastAnchor = 'lastPoint';\n                    error(32, false, chart, {\n                        'dataGrouping.smoothed': 'use dataGrouping.anchor'\n                    });\n                }\n                // Record what data grouping values were used\n                for (i = 1; i < groupPositions.length; i++) {\n                    // The grouped gapSize needs to be the largest distance between\n                    // the group to capture varying group sizes like months or DST\n                    // crossing (#10000). Also check that the gap is not at the\n                    // start of a segment.\n                    if (!groupPositions.info.segmentStarts ||\n                        groupPositions.info.segmentStarts.indexOf(i) === -1) {\n                        gapSize = Math.max(groupPositions[i] - groupPositions[i - 1], gapSize);\n                    }\n                }\n                currentDataGrouping = groupPositions.info;\n                currentDataGrouping.gapSize = gapSize;\n                series.closestPointRange = groupPositions.info.totalRange;\n                series.groupMap = groupedData.groupMap;\n                series.currentDataGrouping = currentDataGrouping;\n                anchorPoints(series, groupedXData, xMax);\n                if (reserveSpace) {\n                    adjustExtremes(xAxis, groupedXData);\n                }\n                // We calculated all group positions but we should render\n                // only the ones within the visible range\n                if (dataGroupingOptions.groupAll) {\n                    // Keep the reference to all grouped points\n                    // for further calculation (eg. heikinashi).\n                    series.allGroupedData = groupedYData;\n                    croppedData = series.cropData(groupedXData, groupedYData, xAxis.min, xAxis.max);\n                    groupedXData = croppedData.xData;\n                    groupedYData = croppedData.yData;\n                    series.cropStart = croppedData.start; // #15005\n                }\n                // Set series props\n                series.processedXData = groupedXData;\n                series.processedYData = groupedYData;\n            }\n            else {\n                series.groupMap = null;\n            }\n            series.hasGroupedData = hasGroupedData;\n            series.preventGraphAnimation =\n                (lastDataGrouping && lastDataGrouping.totalRange) !==\n                    (currentDataGrouping && currentDataGrouping.totalRange);\n        }\n        /**\n         * @private\n         */\n        function compose(SeriesClass) {\n            const seriesProto = SeriesClass.prototype;\n            if (!seriesProto.applyGrouping) {\n                const PointClass = SeriesClass.prototype.pointClass;\n                // Override point prototype to throw a warning when trying to update\n                // grouped points.\n                addEvent(PointClass, 'update', function () {\n                    if (this.dataGroup) {\n                        error(24, false, this.series.chart);\n                        return false;\n                    }\n                });\n                addEvent(SeriesClass, 'afterSetOptions', onAfterSetOptions);\n                addEvent(SeriesClass, 'destroy', destroyGroupedData);\n                extend(seriesProto, {\n                    applyGrouping,\n                    destroyGroupedData,\n                    generatePoints,\n                    getDGApproximation,\n                    groupData\n                });\n            }\n        }\n        /**\n         * Destroy the grouped data points. #622, #740\n         * @private\n         */\n        function destroyGroupedData() {\n            // Clear previous groups\n            if (this.groupedData) {\n                this.groupedData.forEach(function (point, i) {\n                    if (point) {\n                        this.groupedData[i] = point.destroy ?\n                            point.destroy() : null;\n                    }\n                }, this);\n                // Clears all:\n                // - `this.groupedData`\n                // - `this.points`\n                // - `preserve` object in series.update()\n                this.groupedData.length = 0;\n                delete this.allGroupedData; // #19892\n            }\n        }\n        /**\n         * Override the generatePoints method by adding a reference to grouped data\n         * @private\n         */\n        function generatePoints() {\n            baseGeneratePoints.apply(this);\n            // Record grouped data in order to let it be destroyed the next time\n            // processData runs\n            this.destroyGroupedData(); // #622\n            this.groupedData = this.hasGroupedData ? this.points : null;\n        }\n        /**\n         * Set default approximations to the prototypes if present. Properties are\n         * inherited down. Can be overridden for individual series types.\n         * @private\n         */\n        function getDGApproximation() {\n            if (this.is('arearange')) {\n                return 'range';\n            }\n            if (this.is('ohlc')) {\n                return 'ohlc';\n            }\n            if (this.is('hlc')) {\n                return 'hlc';\n            }\n            if (\n            // #18974, default approximation for cumulative\n            // should be `sum` when `dataGrouping` is enabled\n            this.is('column') ||\n                this.options.cumulative) {\n                return 'sum';\n            }\n            return 'average';\n        }\n        /**\n         * Highcharts Stock only. Takes parallel arrays of x and y data and groups the\n         * data into intervals defined by groupPositions, a collection of starting x\n         * values for each group.\n         *\n         * @product highstock\n         *\n         * @function Highcharts.Series#groupData\n         * @param {Array<number>} xData\n         *        Parallel array of x data.\n         * @param {Array<(number|null|undefined)>|Array<Array<(number|null|undefined)>>} yData\n         *        Parallel array of y data.\n         * @param {Array<number>} groupPositions\n         *        Group positions.\n         * @param {string|Function} [approximation]\n         *        Approximation to use.\n         * @return {Highcharts.DataGroupingResultObject}\n         *         Mapped groups.\n         */\n        function groupData(xData, yData, groupPositions, approximation) {\n            const series = this, data = series.data, dataOptions = series.options && series.options.data, groupedXData = [], groupedYData = [], groupMap = [], dataLength = xData.length, \n            // when grouping the fake extended axis for panning,\n            // we don't need to consider y\n            handleYData = !!yData, values = [], pointArrayMap = series.pointArrayMap, pointArrayMapLength = pointArrayMap && pointArrayMap.length, extendedPointArrayMap = ['x'].concat(pointArrayMap || ['y']), groupAll = (this.options.dataGrouping &&\n                this.options.dataGrouping.groupAll);\n            let pointX, pointY, groupedY, pos = 0, start = 0;\n            const approximationFn = (typeof approximation === 'function' ?\n                approximation :\n                approximation && ApproximationRegistry[approximation] ?\n                    ApproximationRegistry[approximation] :\n                    ApproximationRegistry[(series.getDGApproximation && series.getDGApproximation() ||\n                        'average')]);\n            // Calculate values array size from pointArrayMap length\n            if (pointArrayMapLength) {\n                let len = pointArrayMap.length;\n                while (len--) {\n                    values.push([]);\n                }\n            }\n            else {\n                values.push([]);\n            }\n            const valuesLen = pointArrayMapLength || 1;\n            for (let i = 0; i <= dataLength; i++) {\n                // Start with the first point within the X axis range (#2696)\n                if (xData[i] < groupPositions[0]) {\n                    continue; // with next point\n                }\n                // when a new group is entered, summarize and initialize\n                // the previous group\n                while ((typeof groupPositions[pos + 1] !== 'undefined' &&\n                    xData[i] >= groupPositions[pos + 1]) ||\n                    i === dataLength) { // get the last group\n                    // get group x and y\n                    pointX = groupPositions[pos];\n                    series.dataGroupInfo = {\n                        start: groupAll ? start : (series.cropStart + start),\n                        length: values[0].length,\n                        groupStart: pointX\n                    };\n                    groupedY = approximationFn.apply(series, values);\n                    // By default, let options of the first grouped point be passed over\n                    // to the grouped point. This allows preserving properties like\n                    // `name` and `color` or custom properties. Implementers can\n                    // override this from the approximation function, where they can\n                    // write custom options to `this.dataGroupInfo.options`.\n                    if (series.pointClass && !defined(series.dataGroupInfo.options)) {\n                        // Convert numbers and arrays into objects\n                        series.dataGroupInfo.options = merge(series.pointClass.prototype\n                            .optionsToObject.call({ series: series }, series.options.data[series.cropStart + start]));\n                        // Make sure the raw data (x, y, open, high etc) is not copied\n                        // over and overwriting approximated data.\n                        extendedPointArrayMap.forEach(function (key) {\n                            delete series.dataGroupInfo.options[key];\n                        });\n                    }\n                    // push the grouped data\n                    if (typeof groupedY !== 'undefined') {\n                        groupedXData.push(pointX);\n                        groupedYData.push(groupedY);\n                        groupMap.push(series.dataGroupInfo);\n                    }\n                    // reset the aggregate arrays\n                    start = i;\n                    for (let j = 0; j < valuesLen; j++) {\n                        values[j].length = 0; // faster than values[j] = []\n                        values[j].hasNulls = false;\n                    }\n                    // Advance on the group positions\n                    pos += 1;\n                    // don't loop beyond the last group\n                    if (i === dataLength) {\n                        break;\n                    }\n                }\n                // break out\n                if (i === dataLength) {\n                    break;\n                }\n                // for each raw data point, push it to an array that contains all values\n                // for this specific group\n                if (pointArrayMap) {\n                    const index = (series.options.dataGrouping &&\n                        series.options.dataGrouping.groupAll ?\n                        i : series.cropStart + i), point = (data && data[index]) ||\n                        series.pointClass.prototype.applyOptions.apply({\n                            series: series\n                        }, [dataOptions[index]]);\n                    let val;\n                    for (let j = 0; j < pointArrayMapLength; j++) {\n                        val = point[pointArrayMap[j]];\n                        if (isNumber(val)) {\n                            values[j].push(val);\n                        }\n                        else if (val === null) {\n                            values[j].hasNulls = true;\n                        }\n                    }\n                }\n                else {\n                    pointY = handleYData ? yData[i] : null;\n                    if (isNumber(pointY)) {\n                        values[0].push(pointY);\n                    }\n                    else if (pointY === null) {\n                        values[0].hasNulls = true;\n                    }\n                }\n            }\n            return {\n                groupedXData,\n                groupedYData,\n                groupMap\n            };\n        }\n        /**\n         * Handle default options for data grouping. This must be set at runtime because\n         * some series types are defined after this.\n         * @private\n         */\n        function onAfterSetOptions(e) {\n            const options = e.options, type = this.type, plotOptions = this.chart.options.plotOptions, \n            // External series, for example technical indicators should also inherit\n            // commonOptions which are not available outside this module\n            baseOptions = (this.useCommonDataGrouping &&\n                DataGroupingDefaults.common), seriesSpecific = DataGroupingDefaults.seriesSpecific;\n            let defaultOptions = D.defaultOptions.plotOptions[type].dataGrouping;\n            if (plotOptions && (seriesSpecific[type] || baseOptions)) { // #1284\n                const rangeSelector = this.chart.rangeSelector;\n                if (!defaultOptions) {\n                    defaultOptions = merge(DataGroupingDefaults.common, seriesSpecific[type]);\n                }\n                options.dataGrouping = merge(baseOptions, defaultOptions, plotOptions.series && plotOptions.series.dataGrouping, // #1228\n                // Set by the StockChart constructor:\n                plotOptions[type].dataGrouping, this.userOptions.dataGrouping, !options.isInternal &&\n                    rangeSelector &&\n                    isNumber(rangeSelector.selected) &&\n                    rangeSelector.buttonOptions[rangeSelector.selected].dataGrouping);\n            }\n        }\n        /**\n         * @private\n         */\n        function skipDataGrouping(series, force) {\n            return !(series.isCartesian &&\n                !series.isDirty &&\n                !series.xAxis.isDirty &&\n                !series.yAxis.isDirty &&\n                !force);\n        }\n        /* *\n         *\n         *  Default Export\n         *\n         * */\n        const DataGroupingSeriesComposition = {\n            compose,\n            groupData\n        };\n\n        return DataGroupingSeriesComposition;\n    });\n    _registerModule(_modules, 'Extensions/DataGrouping/DataGrouping.js', [_modules['Extensions/DataGrouping/DataGroupingAxisComposition.js'], _modules['Extensions/DataGrouping/DataGroupingDefaults.js'], _modules['Extensions/DataGrouping/DataGroupingSeriesComposition.js'], _modules['Core/Templating.js'], _modules['Core/Globals.js'], _modules['Core/Utilities.js']], function (DataGroupingAxisComposition, DataGroupingDefaults, DataGroupingSeriesComposition, F, H, U) {\n        /* *\n         *\n         *  (c) 2010-2024 Torstein Honsi\n         *\n         *  License: www.highcharts.com/license\n         *\n         *  !!!!!!! SOURCE GETS TRANSPILED BY TYPESCRIPT. EDIT TS FILE ONLY. !!!!!!!\n         *\n         * */\n        const { format } = F;\n        const { composed } = H;\n        const { addEvent, extend, isNumber, pick, pushUnique } = U;\n        /* *\n         *\n         *  Functions\n         *\n         * */\n        /**\n         * @private\n         */\n        function compose(AxisClass, SeriesClass, TooltipClass) {\n            DataGroupingAxisComposition.compose(AxisClass);\n            DataGroupingSeriesComposition.compose(SeriesClass);\n            if (TooltipClass &&\n                pushUnique(composed, 'DataGrouping')) {\n                addEvent(TooltipClass, 'headerFormatter', onTooltipHeaderFormatter);\n            }\n        }\n        /**\n         * Extend the original method, make the tooltip's header reflect the grouped\n         * range.\n         * @private\n         */\n        function onTooltipHeaderFormatter(e) {\n            const chart = this.chart, time = chart.time, labelConfig = e.labelConfig, series = labelConfig.series, point = labelConfig.point, options = series.options, tooltipOptions = series.tooltipOptions, dataGroupingOptions = options.dataGrouping, xAxis = series.xAxis;\n            let xDateFormat = tooltipOptions.xDateFormat, xDateFormatEnd, currentDataGrouping, dateTimeLabelFormats, labelFormats, formattedKey, formatString = tooltipOptions[e.isFooter ? 'footerFormat' : 'headerFormat'];\n            // apply only to grouped series\n            if (xAxis &&\n                xAxis.options.type === 'datetime' &&\n                dataGroupingOptions &&\n                isNumber(labelConfig.key)) {\n                // set variables\n                currentDataGrouping = series.currentDataGrouping;\n                dateTimeLabelFormats = dataGroupingOptions.dateTimeLabelFormats ||\n                    // Fallback to commonOptions (#9693)\n                    DataGroupingDefaults.common.dateTimeLabelFormats;\n                // if we have grouped data, use the grouping information to get the\n                // right format\n                if (currentDataGrouping) {\n                    labelFormats = dateTimeLabelFormats[currentDataGrouping.unitName];\n                    if (currentDataGrouping.count === 1) {\n                        xDateFormat = labelFormats[0];\n                    }\n                    else {\n                        xDateFormat = labelFormats[1];\n                        xDateFormatEnd = labelFormats[2];\n                    }\n                    // if not grouped, and we don't have set the xDateFormat option, get the\n                    // best fit, so if the least distance between points is one minute, show\n                    // it, but if the least distance is one day, skip hours and minutes etc.\n                }\n                else if (!xDateFormat && dateTimeLabelFormats && xAxis.dateTime) {\n                    xDateFormat = xAxis.dateTime.getXDateFormat(labelConfig.x, tooltipOptions.dateTimeLabelFormats);\n                }\n                const groupStart = pick(series.groupMap?.[point.index].groupStart, labelConfig.key), groupEnd = groupStart + currentDataGrouping?.totalRange - 1;\n                formattedKey = time.dateFormat(xDateFormat, groupStart);\n                if (xDateFormatEnd) {\n                    formattedKey += time.dateFormat(xDateFormatEnd, groupEnd);\n                }\n                // Replace default header style with class name\n                if (series.chart.styledMode) {\n                    formatString = this.styledModeFormat(formatString);\n                }\n                // return the replaced format\n                e.text = format(formatString, {\n                    point: extend(labelConfig.point, { key: formattedKey }),\n                    series: series\n                }, chart);\n                e.preventDefault();\n            }\n        }\n        /* *\n         *\n         *  Default Export\n         *\n         * */\n        const DataGroupingComposition = {\n            compose,\n            groupData: DataGroupingSeriesComposition.groupData\n        };\n        /* *\n         *\n         *  API Declarations\n         *\n         * */\n        /**\n         * @typedef {\"average\"|\"averages\"|\"open\"|\"high\"|\"low\"|\"close\"|\"sum\"} Highcharts.DataGroupingApproximationValue\n         */\n        /**\n         * The position of the point inside the group.\n         *\n         * @typedef    {\"start\"|\"middle\"|\"end\"} Highcharts.DataGroupingAnchor\n         */\n        /**\n         * The position of the first or last point in the series inside the group.\n         *\n         * @typedef    {\"start\"|\"middle\"|\"end\"|\"firstPoint\"|\"lastPoint\"} Highcharts.DataGroupingAnchorExtremes\n         */\n        /**\n         * Highcharts Stock only.\n         *\n         * @product highstock\n         * @interface Highcharts.DataGroupingInfoObject\n         */ /**\n        * @name Highcharts.DataGroupingInfoObject#length\n        * @type {number}\n        */ /**\n        * @name Highcharts.DataGroupingInfoObject#options\n        * @type {Highcharts.SeriesOptionsType|undefined}\n        */ /**\n        * @name Highcharts.DataGroupingInfoObject#start\n        * @type {number}\n        */\n        /**\n         * Highcharts Stock only.\n         *\n         * @product highstock\n         * @interface Highcharts.DataGroupingResultObject\n         */ /**\n        * @name Highcharts.DataGroupingResultObject#groupedXData\n        * @type {Array<number>}\n        */ /**\n        * @name Highcharts.DataGroupingResultObject#groupedYData\n        * @type {Array<(number|null|undefined)>|Array<Array<(number|null|undefined)>>}\n        */ /**\n        * @name Highcharts.DataGroupingResultObject#groupMap\n        * @type {Array<DataGroupingInfoObject>}\n        */\n        /**\n         * Highcharts Stock only. If a point object is created by data\n         * grouping, it doesn't reflect actual points in the raw\n         * data. In this case, the `dataGroup` property holds\n         * information that points back to the raw data.\n         *\n         * - `dataGroup.start` is the index of the first raw data\n         *   point in the group.\n         *\n         * - `dataGroup.length` is the amount of points in the\n         *   group.\n         *\n         * @sample stock/members/point-datagroup\n         *         Click to inspect raw data points\n         *\n         * @product highstock\n         *\n         * @name Highcharts.Point#dataGroup\n         * @type {Highcharts.DataGroupingInfoObject|undefined}\n         */\n        (''); // detach doclets above\n        /* *\n         *\n         *  API Options\n         *\n         * */\n        /**\n         * Data grouping is the concept of sampling the data values into larger\n         * blocks in order to ease readability and increase performance of the\n         * JavaScript charts. Highcharts Stock by default applies data grouping when\n         * the points become closer than a certain pixel value, determined by\n         * the `groupPixelWidth` option.\n         *\n         * If data grouping is applied, the grouping information of grouped\n         * points can be read from the [Point.dataGroup](\n         * /class-reference/Highcharts.Point#dataGroup). If point options other than\n         * the data itself are set, for example `name` or `color` or custom properties,\n         * the grouping logic doesn't know how to group it. In this case the options of\n         * the first point instance are copied over to the group point. This can be\n         * altered through a custom `approximation` callback function.\n         *\n         * @declare   Highcharts.DataGroupingOptionsObject\n         * @product   highstock\n         * @requires  product:highstock\n         * @requires  module:modules/datagrouping\n         * @apioption plotOptions.series.dataGrouping\n         */\n        /**\n         * Specifies how the points should be located on the X axis inside the group.\n         * Points that are extremes can be set separately. Available options:\n         *\n         * - `start` places the point at the beginning of the group\n         * (e.g. range 00:00:00 - 23:59:59 -> 00:00:00)\n         *\n         * - `middle` places the point in the middle of the group\n         * (e.g. range 00:00:00 - 23:59:59 -> 12:00:00)\n         *\n         * - `end` places the point at the end of the group\n         * (e.g. range 00:00:00 - 23:59:59 -> 23:59:59)\n         *\n         * @sample {highstock} stock/plotoptions/series-datagrouping-anchor\n         *         Changing the point x-coordinate inside the group.\n         *\n         * @see [dataGrouping.firstAnchor](#plotOptions.series.dataGrouping.firstAnchor)\n         * @see [dataGrouping.lastAnchor](#plotOptions.series.dataGrouping.lastAnchor)\n         *\n         * @type       {Highcharts.DataGroupingAnchor}\n         * @since 9.1.0\n         * @default    start\n         * @apioption  plotOptions.series.dataGrouping.anchor\n         */\n        /**\n         * The method of approximation inside a group. When for example 30 days\n         * are grouped into one month, this determines what value should represent\n         * the group. Possible values are \"average\", \"averages\", \"open\", \"high\",\n         * \"low\", \"close\" and \"sum\". For OHLC and candlestick series the approximation\n         * is \"ohlc\" by default, which finds the open, high, low and close values\n         * within all the grouped data. For ranges, the approximation is \"range\",\n         * which finds the low and high values. For multi-dimensional data,\n         * like ranges and OHLC, \"averages\" will compute the average for each\n         * dimension.\n         *\n         * Custom aggregate methods can be added by assigning a callback function\n         * as the approximation. This function takes a numeric array as the\n         * argument and should return a single numeric value or `null`. Note\n         * that the numeric array will never contain null values, only true\n         * numbers. Instead, if null values are present in the raw data, the\n         * numeric array will have an `.hasNulls` property set to `true`. For\n         * single-value data sets the data is available in the first argument\n         * of the callback function. For OHLC data sets, all the open values\n         * are in the first argument, all high values in the second etc.\n         *\n         * Since v4.2.7, grouping meta data is available in the approximation\n         * callback from `this.dataGroupInfo`. It can be used to extract information\n         * from the raw data.\n         *\n         * Defaults to `average` for line-type series, `sum` for columns, `range`\n         * for range series, `hlc` for HLC, and `ohlc` for OHLC and candlestick.\n         *\n         * @sample {highstock} stock/plotoptions/series-datagrouping-approximation\n         *         Approximation callback with custom data\n         * @sample {highstock} stock/plotoptions/series-datagrouping-simple-approximation\n         *         Simple approximation demo\n         *\n         * @type       {Highcharts.DataGroupingApproximationValue|Function}\n         * @apioption  plotOptions.series.dataGrouping.approximation\n         */\n        /**\n         * Datetime formats for the header of the tooltip in a stock chart.\n         * The format can vary within a chart depending on the currently selected\n         * time range and the current data grouping.\n         *\n         * The default formats are:\n         * ```js\n         * {\n         *     millisecond: [\n         *         '%A, %e %b, %H:%M:%S.%L', '%A, %e %b, %H:%M:%S.%L', '-%H:%M:%S.%L'\n         *     ],\n         *     second: ['%A, %e %b, %H:%M:%S', '%A, %e %b, %H:%M:%S', '-%H:%M:%S'],\n         *     minute: ['%A, %e %b, %H:%M', '%A, %e %b, %H:%M', '-%H:%M'],\n         *     hour: ['%A, %e %b, %H:%M', '%A, %e %b, %H:%M', '-%H:%M'],\n         *     day: ['%A, %e %b %Y', '%A, %e %b', '-%A, %e %b %Y'],\n         *     week: ['Week from %A, %e %b %Y', '%A, %e %b', '-%A, %e %b %Y'],\n         *     month: ['%B %Y', '%B', '-%B %Y'],\n         *     year: ['%Y', '%Y', '-%Y']\n         * }\n         * ```\n         *\n         * For each of these array definitions, the first item is the format\n         * used when the active time span is one unit. For instance, if the\n         * current data applies to one week, the first item of the week array\n         * is used. The second and third items are used when the active time\n         * span is more than two units. For instance, if the current data applies\n         * to two weeks, the second and third item of the week array are used,\n         *  and applied to the start and end date of the time span.\n         *\n         * @type      {Object}\n         * @apioption plotOptions.series.dataGrouping.dateTimeLabelFormats\n         */\n        /**\n         * Enable or disable data grouping.\n         *\n         * @type      {boolean}\n         * @default   true\n         * @apioption plotOptions.series.dataGrouping.enabled\n         */\n        /**\n         * Specifies how the first grouped point is positioned on the xAxis.\n         * If firstAnchor and/or lastAnchor are defined, then those options take\n         * precedence over anchor for the first and/or last grouped points.\n         * Available options:\n         *\n         * -`start` places the point at the beginning of the group\n         * (e.g. range 00:00:00 - 23:59:59 -> 00:00:00)\n         *\n         * -`middle` places the point in the middle of the group\n         * (e.g. range 00:00:00 - 23:59:59 -> 12:00:00)\n         *\n         * -`end` places the point at the end of the group\n         * (e.g. range 00:00:00 - 23:59:59 -> 23:59:59)\n         *\n         * -`firstPoint` the first point in the group\n         * (e.g. points at 00:13, 00:35, 00:59 -> 00:13)\n         *\n         * -`lastPoint` the last point in the group\n         * (e.g. points at 00:13, 00:35, 00:59 -> 00:59)\n         *\n         * @sample {highstock} stock/plotoptions/series-datagrouping-first-anchor\n         *         Applying first and last anchor.\n         *\n         * @see [dataGrouping.anchor](#plotOptions.series.dataGrouping.anchor)\n         *\n         * @type       {Highcharts.DataGroupingAnchorExtremes}\n         * @since 9.1.0\n         * @default    start\n         * @apioption  plotOptions.series.dataGrouping.firstAnchor\n         */\n        /**\n         * When data grouping is forced, it runs no matter how small the intervals\n         * are. This can be handy for example when the sum should be calculated\n         * for values appearing at random times within each hour.\n         *\n         * @type      {boolean}\n         * @default   false\n         * @apioption plotOptions.series.dataGrouping.forced\n         */\n        /**\n         * The approximate pixel width of each group. If for example a series\n         * with 30 points is displayed over a 600 pixel wide plot area, no grouping\n         * is performed. If however the series contains so many points that\n         * the spacing is less than the groupPixelWidth, Highcharts will try\n         * to group it into appropriate groups so that each is more or less\n         * two pixels wide. If multiple series with different group pixel widths\n         * are drawn on the same x axis, all series will take the greatest width.\n         * For example, line series have 2px default group width, while column\n         * series have 10px. If combined, both the line and the column will\n         * have 10px by default.\n         *\n         * @type      {number}\n         * @default   2\n         * @apioption plotOptions.series.dataGrouping.groupPixelWidth\n         */\n        /**\n         * By default only points within the visible range are grouped. Enabling this\n         * option will force data grouping to calculate all grouped points for a given\n         * dataset. That option prevents for example a column series from calculating\n         * a grouped point partially. The effect is similar to\n         * [Series.getExtremesFromAll](#plotOptions.series.getExtremesFromAll) but does\n         * not affect yAxis extremes.\n         *\n         * @sample {highstock} stock/plotoptions/series-datagrouping-groupall/\n         *         Two series with the same data but different groupAll setting\n         *\n         * @type      {boolean}\n         * @default   false\n         * @since     6.1.0\n         * @apioption plotOptions.series.dataGrouping.groupAll\n         */\n        /**\n         * Specifies how the last grouped point is positioned on the xAxis.\n         * If firstAnchor and/or lastAnchor are defined, then those options take\n         * precedence over anchor for the first and/or last grouped points.\n         * Available options:\n         *\n         * -`start` places the point at the beginning of the group\n         * (e.g. range 00:00:00 - 23:59:59 -> 00:00:00)\n         *\n         * -`middle` places the point in the middle of the group\n         * (e.g. range 00:00:00 - 23:59:59 -> 12:00:00)\n         *\n         * -`end` places the point at the end of the group\n         * (e.g. range 00:00:00 - 23:59:59 -> 23:59:59)\n         *\n         * -`firstPoint` the first point in the group\n         * (e.g. points at 00:13, 00:35, 00:59 -> 00:13)\n         *\n         * -`lastPoint` the last point in the group\n         * (e.g. points at 00:13, 00:35, 00:59 -> 00:59)\n         *\n         * @sample {highstock} stock/plotoptions/series-datagrouping-first-anchor\n         *         Applying first and last anchor.\n         *\n         * @sample {highstock} stock/plotoptions/series-datagrouping-last-anchor\n         *         Applying the last anchor in the chart with live data.\n         *\n         * @see [dataGrouping.anchor](#plotOptions.series.dataGrouping.anchor)\n         *\n         * @type       {Highcharts.DataGroupingAnchorExtremes}\n         * @since 9.1.0\n         * @default    start\n         * @apioption  plotOptions.series.dataGrouping.lastAnchor\n         */\n        /**\n         * Normally, a group is indexed by the start of that group, so for example\n         * when 30 daily values are grouped into one month, that month's x value\n         * will be the 1st of the month. This apparently shifts the data to\n         * the left. When the smoothed option is true, this is compensated for.\n         * The data is shifted to the middle of the group, and min and max\n         * values are preserved. Internally, this is used in the Navigator series.\n         *\n         * @type      {boolean}\n         * @default   false\n         * @deprecated\n         * @apioption plotOptions.series.dataGrouping.smoothed\n         */\n        /**\n         * An array determining what time intervals the data is allowed to be\n         * grouped to. Each array item is an array where the first value is\n         * the time unit and the second value another array of allowed multiples.\n         *\n         * Defaults to:\n         * ```js\n         * units: [[\n         *     'millisecond', // unit name\n         *     [1, 2, 5, 10, 20, 25, 50, 100, 200, 500] // allowed multiples\n         * ], [\n         *     'second',\n         *     [1, 2, 5, 10, 15, 30]\n         * ], [\n         *     'minute',\n         *     [1, 2, 5, 10, 15, 30]\n         * ], [\n         *     'hour',\n         *     [1, 2, 3, 4, 6, 8, 12]\n         * ], [\n         *     'day',\n         *     [1]\n         * ], [\n         *     'week',\n         *     [1]\n         * ], [\n         *     'month',\n         *     [1, 3, 6]\n         * ], [\n         *     'year',\n         *     null\n         * ]]\n         * ```\n         *\n         * @type      {Array<Array<string,(Array<number>|null)>>}\n         * @apioption plotOptions.series.dataGrouping.units\n         */\n        /**\n         * The approximate pixel width of each group. If for example a series\n         * with 30 points is displayed over a 600 pixel wide plot area, no grouping\n         * is performed. If however the series contains so many points that\n         * the spacing is less than the groupPixelWidth, Highcharts will try\n         * to group it into appropriate groups so that each is more or less\n         * two pixels wide. Defaults to `10`.\n         *\n         * @sample {highstock} stock/plotoptions/series-datagrouping-grouppixelwidth/\n         *         Two series with the same data density but different groupPixelWidth\n         *\n         * @type      {number}\n         * @default   10\n         * @apioption plotOptions.column.dataGrouping.groupPixelWidth\n         */\n        ''; // required by JSDoc parsing\n\n        return DataGroupingComposition;\n    });\n    _registerModule(_modules, 'masters/modules/datagrouping.src.js', [_modules['Core/Globals.js'], _modules['Extensions/DataGrouping/ApproximationDefaults.js'], _modules['Extensions/DataGrouping/ApproximationRegistry.js'], _modules['Extensions/DataGrouping/DataGrouping.js']], function (Highcharts, ApproximationDefaults, ApproximationRegistry, DataGrouping) {\n\n        const G = Highcharts;\n        G.dataGrouping = G.dataGrouping || {};\n        G.dataGrouping.approximationDefaults = (G.dataGrouping.approximationDefaults ||\n            ApproximationDefaults);\n        G.dataGrouping.approximations = (G.dataGrouping.approximations ||\n            ApproximationRegistry);\n        DataGrouping.compose(G.Axis, G.Series, G.Tooltip);\n\n        return Highcharts;\n    });\n    _registerModule(_modules, 'Extensions/Annotations/NavigationBindingsUtilities.js', [_modules['Core/Utilities.js']], function (U) {\n        /* *\n         *\n         *  (c) 2009-2024 Highsoft, Black Label\n         *\n         *  License: www.highcharts.com/license\n         *\n         *  !!!!!!! SOURCE GETS TRANSPILED BY TYPESCRIPT. EDIT TS FILE ONLY. !!!!!!!\n         *\n         * */\n        const { defined, isNumber, pick } = U;\n        /* *\n         *\n         *  Constants\n         *\n         * */\n        /**\n         * Define types for editable fields per annotation. There is no need to define\n         * numbers, because they won't change their type to string.\n         * @private\n         */\n        const annotationsFieldsTypes = {\n            backgroundColor: 'string',\n            borderColor: 'string',\n            borderRadius: 'string',\n            color: 'string',\n            fill: 'string',\n            fontSize: 'string',\n            labels: 'string',\n            name: 'string',\n            stroke: 'string',\n            title: 'string'\n        };\n        /* *\n         *\n         *  Functions\n         *\n         * */\n        /**\n         * Returns the first xAxis or yAxis that was clicked with its value.\n         *\n         * @private\n         *\n         * @param {Array<Highcharts.PointerAxisCoordinateObject>} coords\n         *        All the chart's x or y axes with a current pointer's axis value.\n         *\n         * @return {Highcharts.PointerAxisCoordinateObject}\n         *         Object with a first found axis and its value that pointer\n         *         is currently pointing.\n         */\n        function getAssignedAxis(coords) {\n            return coords.filter((coord) => {\n                const extremes = coord.axis.getExtremes(), axisMin = extremes.min, axisMax = extremes.max, \n                // Correct axis edges when axis has series\n                // with pointRange (like column)\n                minPointOffset = pick(coord.axis.minPointOffset, 0);\n                return isNumber(axisMin) && isNumber(axisMax) &&\n                    coord.value >= (axisMin - minPointOffset) &&\n                    coord.value <= (axisMax + minPointOffset) &&\n                    // don't count navigator axis\n                    !coord.axis.options.isInternal;\n            })[0]; // If the axes overlap, return the first axis that was found.\n        }\n        /**\n         * Get field type according to value\n         *\n         * @private\n         *\n         * @param {'boolean'|'number'|'string'} value\n         * Atomic type (one of: string, number, boolean)\n         *\n         * @return {'checkbox'|'number'|'text'}\n         * Field type (one of: text, number, checkbox)\n         */\n        function getFieldType(key, value) {\n            const predefinedType = annotationsFieldsTypes[key];\n            let fieldType = typeof value;\n            if (defined(predefinedType)) {\n                fieldType = predefinedType;\n            }\n            return {\n                'string': 'text',\n                'number': 'number',\n                'boolean': 'checkbox'\n            }[fieldType];\n        }\n        /* *\n         *\n         *  Default Export\n         *\n         * */\n        const NavigationBindingUtilities = {\n            annotationsFieldsTypes,\n            getAssignedAxis,\n            getFieldType\n        };\n\n        return NavigationBindingUtilities;\n    });\n    _registerModule(_modules, 'Extensions/MouseWheelZoom/MouseWheelZoom.js', [_modules['Core/Utilities.js'], _modules['Extensions/Annotations/NavigationBindingsUtilities.js']], function (U, NBU) {\n        /* *\n         *\n         *  (c) 2023 Torstein Honsi, Askel Eirik Johansson\n         *\n         *  License: www.highcharts.com/license\n         *\n         *  !!!!!!! SOURCE GETS TRANSPILED BY TYPESCRIPT. EDIT TS FILE ONLY. !!!!!!!\n         *\n         * */\n        const { addEvent, isObject, pick, defined, merge } = U;\n        const { getAssignedAxis } = NBU;\n        /* *\n         *\n         *  Constants\n         *\n         * */\n        const composedClasses = [], defaultOptions = {\n            enabled: true,\n            sensitivity: 1.1\n        };\n        let wheelTimer;\n        /* *\n         *\n         *  Functions\n         *\n         * */\n        /**\n         * @private\n         */\n        const optionsToObject = (options) => {\n            if (!isObject(options)) {\n                options = {\n                    enabled: options ?? true\n                };\n            }\n            return merge(defaultOptions, options);\n        };\n        /**\n         * @private\n         */\n        const zoomBy = function (chart, howMuch, xAxis, yAxis, mouseX, mouseY, options) {\n            const type = pick(options.type, chart.zooming.type, '');\n            let axes = [];\n            if (type === 'x') {\n                axes = xAxis;\n            }\n            else if (type === 'y') {\n                axes = yAxis;\n            }\n            else if (type === 'xy') {\n                axes = chart.axes;\n            }\n            const hasZoomed = chart.transform({\n                axes,\n                // Create imaginary reference and target rectangles around the mouse\n                // point that scales up or down with `howMuch`;\n                to: {\n                    x: mouseX - 5,\n                    y: mouseY - 5,\n                    // Must use 10 to get passed the limit for too small reference.\n                    // Below this, the transform will default to a pan.\n                    width: 10,\n                    height: 10\n                },\n                from: {\n                    x: mouseX - 5 * howMuch,\n                    y: mouseY - 5 * howMuch,\n                    width: 10 * howMuch,\n                    height: 10 * howMuch\n                },\n                trigger: 'mousewheel'\n            });\n            if (hasZoomed) {\n                if (defined(wheelTimer)) {\n                    clearTimeout(wheelTimer);\n                }\n                // Some time after the last mousewheel event, run drop. In case any of\n                // the affected axes had `startOnTick` or `endOnTick`, they will be\n                // re-adjusted now.\n                wheelTimer = setTimeout(() => {\n                    chart.pointer?.drop();\n                }, 400);\n            }\n            return hasZoomed;\n        };\n        /**\n         * @private\n         */\n        function onAfterGetContainer() {\n            const wheelZoomOptions = optionsToObject(this.zooming.mouseWheel);\n            if (wheelZoomOptions.enabled) {\n                addEvent(this.container, 'wheel', (e) => {\n                    e = this.pointer?.normalize(e) || e;\n                    const { pointer } = this, allowZoom = pointer && !pointer.inClass(e.target, 'highcharts-no-mousewheel');\n                    // Firefox uses e.detail, WebKit and IE uses deltaX, deltaY, deltaZ.\n                    if (this.isInsidePlot(e.chartX - this.plotLeft, e.chartY - this.plotTop) && allowZoom) {\n                        const wheelSensitivity = wheelZoomOptions.sensitivity || 1.1, delta = e.detail || ((e.deltaY || 0) / 120), xAxisCoords = getAssignedAxis(pointer.getCoordinates(e).xAxis), yAxisCoords = getAssignedAxis(pointer.getCoordinates(e).yAxis);\n                        const hasZoomed = zoomBy(this, Math.pow(wheelSensitivity, delta), xAxisCoords ? [xAxisCoords.axis] : this.xAxis, yAxisCoords ? [yAxisCoords.axis] : this.yAxis, e.chartX, e.chartY, wheelZoomOptions);\n                        // Prevent page scroll\n                        if (hasZoomed) {\n                            e.preventDefault?.();\n                        }\n                    }\n                });\n            }\n        }\n        /**\n         * @private\n         */\n        function compose(ChartClass) {\n            if (composedClasses.indexOf(ChartClass) === -1) {\n                composedClasses.push(ChartClass);\n                addEvent(ChartClass, 'afterGetContainer', onAfterGetContainer);\n            }\n        }\n        /* *\n         *\n         *  Default Export\n         *\n         * */\n        const MouseWheelZoomComposition = {\n            compose\n        };\n        /* *\n         *\n         *  API Options\n         *\n         * */\n        /**\n         * The mouse wheel zoom is a feature included in Highcharts Stock, but is also\n         * available for Highcharts Core as a module. Zooming with the mouse wheel is\n         * enabled by default in Highcharts Stock. In Highcharts Core it is enabled if\n         * [chart.zooming.type](chart.zooming.type) is set. It can be disabled by\n         * setting this option to `false`.\n         *\n         * @type      {boolean|object}\n         * @since 11.1.0\n         * @requires  modules/mouse-wheel-zoom\n         * @sample    {highcharts} highcharts/mouse-wheel-zoom/enabled\n         *            Enable or disable\n         * @sample    {highstock} stock/mouse-wheel-zoom/enabled\n         *            Enable or disable\n         * @apioption chart.zooming.mouseWheel\n         */\n        /**\n         * Zooming with the mouse wheel can be disabled by setting this option to\n         * `false`.\n         *\n         * @type      {boolean}\n         * @default   true\n         * @since 11.1.0\n         * @requires  modules/mouse-wheel-zoom\n         * @apioption chart.zooming.mouseWheel.enabled\n         */\n        /**\n         * Adjust the sensitivity of the zoom. Sensitivity of mouse wheel or trackpad\n         * scrolling. `1` is no sensitivity, while with `2`, one mouse wheel delta will\n         * zoom in `50%`.\n         *\n         * @type      {number}\n         * @default   1.1\n         * @since 11.1.0\n         * @requires  modules/mouse-wheel-zoom\n         * @sample    {highcharts} highcharts/mouse-wheel-zoom/sensitivity\n         *            Change mouse wheel zoom sensitivity\n         * @sample    {highstock} stock/mouse-wheel-zoom/sensitivity\n         *            Change mouse wheel zoom sensitivity\n         * @apioption chart.zooming.mouseWheel.sensitivity\n         */\n        /**\n         * Decides in what dimensions the user can zoom scrolling the wheel. Can be one\n         * of `x`, `y` or `xy`. In Highcharts Core, if not specified here, it will\n         * inherit the type from [chart.zooming.type](chart.zooming.type). In Highcharts\n         * Stock, it defaults to `x`.\n         *\n         * Note that particularly with mouse wheel in the y direction, the zoom is\n         * affected by the default [yAxis.startOnTick](#yAxis.startOnTick) and\n         * [endOnTick]((#yAxis.endOnTick)) settings. In order to respect these settings,\n         * the zoom level will adjust after the user has stopped zooming. To prevent\n         * this, consider setting `startOnTick` and `endOnTick` to `false`.\n         *\n         * @type      {string}\n         * @default   {highcharts} undefined\n         * @default   {highstock} x\n         * @validvalue [\"x\", \"y\", \"xy\"]\n         * @since 11.1.0\n         * @requires  modules/mouse-wheel-zoom\n         * @apioption chart.zooming.mouseWheel.type\n         */\n        (''); // Keeps doclets above in JS file\n\n        return MouseWheelZoomComposition;\n    });\n    _registerModule(_modules, 'masters/modules/mouse-wheel-zoom.src.js', [_modules['Core/Globals.js'], _modules['Extensions/MouseWheelZoom/MouseWheelZoom.js']], function (Highcharts, MouseWheelZoom) {\n\n        const G = Highcharts;\n        G.MouseWheelZoom = G.MouseWheelZoom || MouseWheelZoom;\n        G.MouseWheelZoom.compose(G.Chart);\n\n        return Highcharts;\n    });\n    _registerModule(_modules, 'masters/modules/stock.src.js', [_modules['Core/Globals.js'], _modules['Series/DataModifyComposition.js'], _modules['Stock/Navigator/Navigator.js'], _modules['Core/Axis/OrdinalAxis.js'], _modules['Stock/RangeSelector/RangeSelector.js'], _modules['Stock/Scrollbar/Scrollbar.js'], _modules['Core/Chart/StockChart.js'], _modules['Series/OHLC/OHLCSeries.js'], _modules['Series/Flags/FlagsSeries.js']], function (Highcharts, DataModifyComposition, Navigator, OrdinalAxis, RangeSelector, Scrollbar, StockChart, OHLCSeries, FlagsSeries) {\n\n        const G = Highcharts;\n        // Classes\n        G.Navigator = G.Navigator || Navigator;\n        G.OrdinalAxis = G.OrdinalAxis || OrdinalAxis;\n        G.RangeSelector = G.RangeSelector || RangeSelector;\n        G.Scrollbar = G.Scrollbar || Scrollbar;\n        // Functions\n        G.stockChart = G.stockChart || StockChart.stockChart;\n        G.StockChart = G.StockChart || G.stockChart;\n        G.extend(G.StockChart, StockChart);\n        // Compositions\n        DataModifyComposition.compose(G.Series, G.Axis, G.Point);\n        FlagsSeries.compose(G.Renderer);\n        OHLCSeries.compose(G.Series);\n        G.Navigator.compose(G.Chart, G.Axis, G.Series);\n        G.OrdinalAxis.compose(G.Axis, G.Series, G.Chart);\n        G.RangeSelector.compose(G.Axis, G.Chart);\n        G.Scrollbar.compose(G.Axis);\n        G.StockChart.compose(G.Chart, G.Axis, G.Series, G.SVGRenderer);\n\n        return Highcharts;\n    });\n}));"],"names":["factory","module","exports","define","amd","Highcharts","undefined","_modules","_registerModule","obj","path","args","fn","hasOwnProperty","apply","CustomEvent","window","dispatchEvent","detail","Axis","Point","Series","U","DataModifyComposition","tooltipFormatter","pointTooltipFormatter","prototype","addEvent","arrayMax","arrayMin","correctFloat","defined","isArray","isNumber","isString","pick","setModifier","mode","modeState","redraw","isXAxis","series","forEach","setCompare","setCumulative","chart","pointFormat","point","numberFormatter","replace","value","tooltipOptions","changeDecimals","change","cumulativeSum","afterInit","dataModify","compare","options","cumulative","Additions","initCompare","initCumulative","afterGetExtremes","e","dataExtremes","activeYData","extremes","modifyValue","dataMin","dataMax","length","getCumulativeExtremes","seriesSetCompare","userOptions","update","points","afterProcessData","xAxis","processedYData","processedXData","compareStart","keyIndex","i","pointArrayMap","indexOf","pointValKey","compareValue","min","axisSetCompare","seriesSetCumulative","axisSetCumulative","compose","SeriesClass","AxisClass","PointClass","axisProto","pointProto","seriesProto","constructor","cumulativeDataMin","Infinity","cumulativeDataMax","reduce","prev","cur","sum","Math","max","index","compareBase","prevPoint","H","NavigatorConstructor","isTouchDevice","merge","composedMembers","onChartAfterAddSeries","navigator","setBaseSeries","onChartAfterSetChartSize","legendOptions","yAxis","legend","scrollbarHeight","scrollButtonSize","inverted","left","opposite","chartWidth","height","spacing","top","plotTop","plotLeft","navigatorOptions","chartHeight","scrollbar","margin","rangeSelector","extraBottomMargin","getHeight","verticalAlign","layout","enabled","floating","legendHeight","titleOffset","setAxisSize","onChartAfterUpdate","event","scroller","animation","onChartBeforeRender","onChartBeforeShowResetZoom","chartOptions","zooming","type","pinchType","onChartCallback","getExtremes","render","onChartUpdate","scrollbarOptions","ChartClass","NavigatorClass","pushUnique","chartProto","callbacks","push","onAxisInit","axis","navigatorAxis","NavigatorAxisAdditions","onAxisSetExtremes","zoomed","zoomType","trigger","range","previousZoom","preventDefault","keepProps","includes","destroy","toFixedRange","pxMin","pxMax","fixedMin","fixedMax","overscroll","ordinal","convertOverscroll","newMin","translate","horiz","newMax","fixedRange","halfPointRange","pointRange","maxWithOverscroll","Color","SeriesRegistry","parse","color","seriesTypes","maskInside","handles","width","symbols","lineWidth","backgroundColor","borderColor","maskFill","setOpacity","get","outlineColor","outlineWidth","areaspline","fillOpacity","sonification","dataGrouping","approximation","groupPixelWidth","firstAnchor","anchor","lastAnchor","units","dataLabels","zIndex","id","className","lineColor","marker","threshold","tickLength","gridLineColor","gridLineWidth","tickPixelInterval","labels","align","style","fontSize","opacity","textOutline","x","y","crosshair","startOnTick","endOnTick","minPadding","maxPadding","title","text","tickWidth","_x","_y","halfWidth","markerPosition","round","setFixedRange","D","NavigatorDefaults","NavigatorSymbols","RendererRegistry","StockUtilities","setOptions","composed","getRendererType","extend","onSeriesAfterUpdate","isInternal","ScrollbarAxis","Scrollbar","axisMin","axisMax","scrollMin","scrollMax","onAxisAfterGetOffset","scrollbarsOffsets","axisOffset","size","onAxisAfterInit","vertical","renderer","to","from","unitedMin","unitedMax","reversed","shouldUpdateExtremes","DOMType","animate","setExtremes","setRange","onAxisAfterRender","offsetsIndex","offset","axisTitleMargin","axisMargin","position","xPosition","isNaN","ScrollbarClass","barBorderRadius","buttonBorderRadius","buttonsEnabled","liveRedraw","minWidth","step","barBackgroundColor","barBorderWidth","barBorderColor","buttonArrowColor","buttonBackgroundColor","buttonBorderColor","buttonBorderWidth","rifleColor","trackBackgroundColor","trackBorderColor","trackBorderRadius","trackBorderWidth","ScrollbarDefaults","defaultOptions","destroyObjectProperties","fireEvent","removeEvent","swapXY","seg","temp","len","_events","chartX","chartY","scrollbarButtons","scrollbarLeft","scrollbarStrokeWidth","scrollbarTop","init","addEvents","buttonsOrder","buttons","bar","scrollbarGroup","element","track","mouseDownHandler","bind","mouseMoveHandler","mouseUpHandler","buttonToMinClick","buttonToMaxClick","trackClick","ownerDocument","updatePosition","DOMEvent","cursorToScrollbarPosition","normalizedEvent","minWidthDifference","calculatedWidth","xOffset","barWidth","yOffset","removeEvents","prop","drawScrollbarButton","group","g","add","rect","addClass","styledMode","attr","stroke","fill","crisp","r","strokeWidth","arrow","pointer","normalize","mousePosition","initPositions","grabbedCenter","direction","touches","chartPosition","hasDragged","method","rendered","show","translateX","translateY","hide","scrollbarRifles","fromPX","newSize","fullWidth","toPX","ceil","newPos","floor","newRiflesPos","showFull","eventType","svg","boosted","ChartNavigatorComposition","NavigatorComposition","clamp","erase","find","splat","numExt","extreme","numbers","filter","call","Navigator","drawHandle","verb","parseInt","drawOutline","zoomedMin","zoomedMax","outline","halfOutline","outlineCorrection","navigatorSize","navigatorTop","lineTop","lineBtm","verticalMin","d","drawMasks","navigatorHeight","shades","shade","renderElements","mouseCursor","cursor","navigatorGroup","visibility","hasMask","css","handlesOptions","symbol","rotation","rotationOriginX","rotationOriginY","baseSeries","navigatorSeries","scrollbarXAxis","fake","navigatorEnabled","minRange","maxRange","navigatorWidth","plotWidth","plotHeight","toPixels","abs","toValue","currentRange","grabbedLeft","grabbedRight","fixedWidth","addMouseEvents","container","eventsToUnbind","onMouseMove","onMouseUp","getPartsEvents","renderTo","concat","modifyNavigatorAxisExtremes","eventName","events","name","navigatorItem","shadesMousedown","navigatorPosition","ext","dragOffset","reversedExtremes","getUnionExtremes","eventArguments","handlesMousedown","baseXAxis","reverse","otherHandlePos","fixedExtreme","pageX","setTimeout","unionExtremes","triggerOp","Object","keys","unbind","removeBaseSeriesEvents","adaptToUpdatedData","updatedDataHandler","modifyBaseAxisExtremes","scrollbarEnabled","Boolean","xAxisIndex","yAxisIndex","baseXaxis","isDirtyBox","breaks","keepOrdinalPadding","zoomEnabled","offsets","alignTicks","data","updateNavigatorSeries","unbindRedraw","scrollTrackWidth","valueRange","addBaseSeriesEvents","addChartEvents","returnFalseOnNoBaseSeries","ret","baseAxis","navAxis","navAxisOptions","baseAxisOptions","baseSeriesOptions","s","showInNavigator","navSeriesMixin","enableMouseTracking","linkedTo","padXAxis","showInLegend","stacking","states","inactive","navSeries","base","baseOptions","mergedNavSeriesOptions","chartNavigatorSeriesOptions","baseNavigatorOptions","linkedNavSeries","userNavOptions","visible","plotOptions","navigatorSeriesData","hasNavigatorData","slice","initSeries","setSortedData","userSeriesOptions","colors","setVisible","remove","getBaseSeriesMin","currentSeriesMin","xData","baseExtremes","baseMin","baseMax","baseDataMin","baseDataMax","stickToMin","stickToMax","hasSetExtremes","eventArgs","Number","MAX_VALUE","userMin","userMax","shouldStickToMax","shouldStickToMin","pointStart","setData","xDataMin","marginName","axes","coll","OrdinalAxis","error","timeUnits","getTimeTicks","normalizedInterval","startOfWeek","positions","closestDistance","findHigherRanks","higherRanks","tickPixelIntervalOption","time","segmentStarts","end","segmentPositions","hasCrossedHigherRank","info","outsideMax","start","groupPositions","lastGroupPosition","arguments","posLength","shift","unitRange","hour","dateFormat","translatedArr","distances","itemToRemove","translated","lastTranslated","medianDistance","distance","sort","splice","index2val","ordinalPositions","lin2val","val","localMin","old","localA","transA","getExtendedPositions","pixelVal","minPixelPadding","getIndexOfPoint","mantissa","leftNeighbour","rightNeighbour","getIndexInArray","findIndexOf","percent","onAxisFoundExtremes","originalOrdinalRange","onAxisAfterSetScale","isDirty","isOrdinal","onAxisInitialAxisTranslation","beforeSetTickPositions","tickInterval","postProcessTickInterval","onChartPan","originalEvent","panning","runBase","trimmedRange","mouseDownX","hoverPoints","closestPointRange","overscrollPointsRange","movedUnits","translationSlope","slope","extendedOrdinalPositions","extendedAxis","val2lin","setState","test","onSeriesUpdatedData","toIndex","ordinalIndex","ordinalLength","originalPositionsReference","diff","approximateIndexOffset","ordinal2lin","hasBreaks","brokenAxis","uniqueOrdinalPositions","dist","minIndex","maxIndex","useOrdinal","adjustOrdinalExtremesPoints","isBoosted","distanceBetweenPoint","reserveSpace","takeOrdinalPosition","a","b","unshift","pop","forceOrdinal","getOverscrollPositions","groupIntervalFactor","sortedArray","key","indirectSearch","middle","withOverscroll","grouping","currentDataGrouping","count","unitName","fakeAxis","fakeSeries","applyGrouping","getGroupPixelWidth","getGroupIntervalFactor","destroyGroupedData","noop","getProcessedData","forced","processData","hasExtremesChanged","basePointRange","xMin","xMax","median","ordinalArray","firstPointX","firstPointVal","hasPointsInside","some","firstPoint","plotX","ordinalPointPixelInterval","shiftIndex","extraRange","ordinalSlope","calculateOverscroll","overscrollPercentage","overscrollValue","pixelToPercent","limitedOverscrollValue","lang","rangeSelectorZoom","rangeSelectorFrom","rangeSelectorTo","allButtonsEnabled","buttonSpacing","dropdown","buttonTheme","padding","inputBoxBorderColor","inputBoxHeight","inputBoxWidth","inputDateFormat","inputDateParser","inputEditDateFormat","inputEnabled","inputPosition","inputSpacing","selected","buttonPosition","inputStyle","labelStyle","RangeSelectorDefaults","RangeSelectorConstructor","chartDestroyEvents","axisMinFromRange","rangeOptions","getTrueRange","timeName","date","Date","basePeriod","set","getTime","MIN_VALUE","_offsetMin","onChartAfterGetContainer","deferredYTDClick","clickButton","updateNames","setScale","getAxisMargins","extraTopMargin","alignTo","display","spacingBox","placed","onChartDestroy","iEnd","onChartGetMargins","rangeSelectorHeight","marginBottom","onChartRender","optionsRangeSelector","extraBottomMarginWas","extraTopMarginWas","RangeSelectorClass","minFromRange","RangeSelectorComposition","SVGElement","createElement","discardElement","objectEach","pad","pInt","RangeSelector","buttonOptions","defaultButtons","initialButtonGroupWidth","baseXAxisOptions","_range","rangeMin","minSetting","rangeSetting","ctx","ytdExtremes","addOffsetMin","setSelected","forcedDataGrouping","setDataGrouping","frozenStates","preserveDataGrouping","getYTDExtremes","useUTC","_offsetMax","selectedIndex","rangeSelectorButton","selectedOption","blurInputs","minInput","maxInput","blur","computeButtonRange","updateButtonStates","actualRange","hasNoData","hasVisibleSeries","day","ytdMin","ytdMax","selectedExists","isSelectedTooGreat","button","offsetRange","isSelected","isTooGreatRange","isTooSmallRange","state","isYTDButNotSelected","isAllButAlreadyShowingAll","isSameRange","month","year","disable","select","disabled","fixedTimes","millisecond","second","minute","week","offsetMin","offsetMax","getInputValue","input","defaultInputDateParser","setInputValue","inputTime","dateBox","minDateBox","maxDateBox","hcTimeAttr","getAttribute","updatedTime","previousTime","setAttribute","inputTypeFormats","setInputExtremes","format","showInput","inputGroup","isTextInput","border","offsetWidth","offsetHeight","hideInput","inputDate","split","join","str","isSafari","lastIndexOf","getTimezoneOffset","parts","UTC","drawInput","div","chartStyle","isMin","updateExtremes","chartAxis","label","on","focus","preferredInputType","char","boxShadow","textAlign","fontFamily","onfocus","onblur","doc","activeElement","keyDown","onchange","onkeypress","keyCode","onkeydown","onkeyup","getPosition","buttonTop","inputTop","now","startOfYear","ts","inputsZIndex","renderButtons","parentNode","insertBefore","minElems","minLabel","maxElems","maxLabel","getBBox","alignElements","buttonGroup","isMS","currentButtonIndex","zoomText","paddingLeft","paddingRight","textContent","textStr","callDefaultEvent","buttonEvents","click","isActive","hover","navButtonOptions","exporting","navigation","getXOffsetForExportButton","titleCollision","positionButtons","xOffsetForExportButton","alignButtonGroup","hasLoaded","handleCollision","alignTranslateY","alignAttr","groupHeight","marginTop","buttonLeft","maxButtonWidth","buttonWidth","bBox","groupsOverlap","buttonGroupWidth","inputGroupX","alignOptions","inputGroupWidth","buttonGroupX","moveInputsDown","collapseButtons","expandButtons","isCollapsed","userButtonTheme","getAttribs","hasActiveButton","showDropdown","hideDropdown","hasVisibleDropdown","rangeSelectorGroup","yPosition","buttonPositionY","inputPositionY","subtitle","rSelector","HTMLElement","Chart","F","getOptions","getDefaultAxisOptions","showLastLabel","categories","getForcedAxisOptions","axisOptions","StockChart","callback","xAxisOptions","yAxisOptions","mouseWheel","tooltip","crosshairs","isStock","map","createAxis","onAxisAfterDrawCrosshair","cross","log","logarithmic","tickInside","tickPosition","snap","crossLabel","posx","posy","formatOption","formatFormat","limit","lin2log","labelAlign","shape","colorIndex","borderRadius","labelGroup","borderWidth","fontWeight","plotY","formatter","dateTime","isInside","isPointInside","crossBox","right","anchorX","anchorY","onAxisAfterHideCrosshair","onAxisAutoLabelAlign","panes","_labelPanes","labelOptions","side","onAxisDestroy","onAxisGetPlotLinePath","isLinked","linkedParent","axisLeft","axisTop","result","translatedValue","force","x1","y1","x2","y2","uniqueAxes","transVal","acrossPanes","A","getAxis","otherColl","opt","axis2","unique","pos","skip","transB","crispPolyLine","onSeriesSetOptions","overrides","is","shadow","radius","seriesForceCropping","dataGroupingOptions","allowDG","svgRendererCrispPolyLine","SVGRendererClass","forceCropping","stockChart","c","column","pointClass","ColumnPoint","stickyTracking","HLCPoint","HLCSeriesDefaults","ColumnSeries","HLCSeries","extendStem","halfStrokeWidth","getPointPath","graphic","crispCorr","crispX","shapeArgs","plotClose","yBottom","plotHigh","close","drawSinglePoint","pointAttribs","getClassName","drawPoints","attribs","toYData","high","low","names","charAt","toUpperCase","tooltipPos","directTouch","pointAttrToOptions","registerSeriesType","hlc","OHLCPoint","open","resolveUpColor","upColor","resolveColor","getZone","zone","applyOptions","OHLCSeriesDefaults","onSeriesAfterSetOptions","useOhlcData","onSeriesInit","eventOptions","OHLCSeries","_args","plotOpen","CandlestickSeriesDefaults","ohlc","CandlestickSeries","isUp","upLineColor","stateOptions","reversedYAxis","topBox","bottomBox","hasTopWhisker","hasBottomWhisker","isNew","ttBelow","isValid","hasNewShapeType","symbolKey","allowOverlapX","stackDistance","fillColor","FlagsSymbols","modifiedMembers","flag","w","h","circle","createPinSymbol","labelX","startSeg","endSeg","labelY","RendererClass","OnSeriesComposition","columnProto","stableSort","getPlotBox","onSeries","optionsOnSeries","onData","lastPoint","onKey","leftPoint","lastX","rightPoint","distanceRatio","pointXOffset","barW","totalRange","substr","p0","p3","p1","controlPoints","p2","calculateCoord","t","pow","tMin","tMax","tMid","xMid","stackIndex","FlagsPoint","FlagsSeriesDefaults","R","distribute","wrap","FlagsSeries","setClip","outsideRight","centered","optionsY","boxesMap","boxes","useHTML","markerGroup","target","maxDistance","box","proceed","drawTracker","unbindMouseOver","otherPoint","raised","clip","sharedClipKey","sharedClips","forceCrop","invertible","noSharedTooltip","sorted","trackerGroups","buildKDTree","StackItem","BrokenAxis","setBreaks","onAxisAfterSetOptions","onAxisAfterSetTickPositions","tickPositions","newPositions","isInAnyBreak","onSeriesAfterGeneratePoints","connectNulls","isPointInBreak","onSeriesAfterRender","drawBreaks","seriesDrawBreaks","breakArray","breaksOutOfRange","brk","isOut","otherBreak","seriesGappedPath","groupingSize","gapSize","current","next","gapUnit","xRange","isNull","stack","stacks","stackKey","stackLabels","total","getGraphPath","gappedPath","isInBreak","repeat","inclusive","lin2Val","nval","val2Lin","findBreakAt","testKeep","inbrk","keep","showPoints","forceRedraw","axisBreak","setAxisTranslation","unitLength","breakArrayT","pointRangePadding","inBrk","move","breakSize","staticScale","minPointOffset","G","ApproximationRegistry","average","arr","hasNulls","ApproximationDefaults","averages","common","dateTimeLabelFormats","seriesSpecific","line","spline","area","arearange","columnrange","candlestick","heikinashi","DataGroupingDefaults","AxisConstructor","hasProcessed","doGrouping","dataLength","dgOptions","plotSizeX","onAfterSetScale","seriesOptions","DateTimeAxis","baseGeneratePoints","generatePoints","groupedXData","hasGroupedData","groupingEnabled","lastDataGrouping","croppedData","revertRequireSorting","requireSorting","skipDataGrouping","isCartesian","groupAll","yData","interval","normalizeTimeTickInterval","groupedData","groupData","groupedYData","smoothed","groupMap","anchorPoints","groupedDataLastIndex","anchorIndexIterator","anchorFirstIndex","firstGroupEnd","groupStart","groupLength","lastGroupStart","shiftInterval","allGroupedData","cropData","cropStart","preventGraphAnimation","getDGApproximation","dataOptions","handleYData","values","pointArrayMapLength","extendedPointArrayMap","pointX","pointY","groupedY","approximationFn","valuesLen","dataGroupInfo","optionsToObject","j","onAfterSetOptions","useCommonDataGrouping","dataGroup","DataGroupingAxisComposition","DataGroupingSeriesComposition","onTooltipHeaderFormatter","labelConfig","xDateFormat","xDateFormatEnd","labelFormats","formattedKey","formatString","isFooter","getXDateFormat","groupEnd","styledModeFormat","TooltipClass","DataGrouping","approximationDefaults","approximations","Tooltip","annotationsFieldsTypes","getAssignedAxis","coords","coord","getFieldType","predefinedType","fieldType","NBU","wheelTimer","isObject","composedClasses","sensitivity","zoomBy","howMuch","mouseX","mouseY","hasZoomed","transform","clearTimeout","drop","onAfterGetContainer","wheelZoomOptions","allowZoom","inClass","isInsidePlot","wheelSensitivity","delta","deltaY","xAxisCoords","getCoordinates","yAxisCoords","MouseWheelZoom","Renderer","SVGRenderer"],"mappings":"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"}